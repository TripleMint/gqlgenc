diff --git a/.github/workflows/go.yml b/.github/workflows/go.yml
index 6f62fe9..5939de1 100644
--- a/.github/workflows/go.yml
+++ b/.github/workflows/go.yml
@@ -31,7 +31,7 @@ jobs:
         fi
         
     - name: Install Lint
-      run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.43.0
+      run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.39.0
     
     - name: Lint
       run: make lint
diff --git a/.gitignore b/.gitignore
index 35a6635..af808b3 100644
--- a/.gitignore
+++ b/.gitignore
@@ -6,4 +6,6 @@
 /query/
 /.idea/
 
+bin/
+
 coverage.out
diff --git a/.golangci.yml b/.golangci.yml
index 1dd6846..ba5c5f3 100644
--- a/.golangci.yml
+++ b/.golangci.yml
@@ -40,10 +40,6 @@ linters:
     - forbidigo
     - cyclop
     - govet
-    - errname
-    - varnamelen
-    - nilnil
-    - structcheck
   fast: false
 
 issues:
diff --git a/LICENSE b/LICENSE
index e16053d..15ac9a4 100644
--- a/LICENSE
+++ b/LICENSE
@@ -1,6 +1,6 @@
 MIT License
 
-Copyright (c) 2020 Yamashou
+Copyright (c) 2020 TripleMint
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
diff --git a/Makefile b/Makefile
index c0ff3ad..777d0ae 100644
--- a/Makefile
+++ b/Makefile
@@ -1,7 +1,7 @@
 MAKEFLAGS=--no-builtin-rules --no-builtin-variables --always-make
 
 fmt:
-	gofumports -local github.com/Yamashou/gqlgenc -w .
+	gofumports -local github.com/TripleMint/gqlgenc -w .
 
 lint:
 	golangci-lint cache clean && golangci-lint run
diff --git a/README.md b/README.md
index 664ce89..52d818d 100644
--- a/README.md
+++ b/README.md
@@ -18,7 +18,7 @@ So I want to automatically generate types.
 ## Installation
 
 ```shell script
-go get -u github.com/Yamashou/gqlgenc
+go get -u github.com/TripleMint/gqlgenc
 ```
 
 ## How to use
@@ -90,7 +90,7 @@ import (
 	"fmt"
 	"os"
 
-	"github.com/Yamashou/gqlgenc/clientgen"
+	"github.com/TripleMint/gqlgenc/clientgen"
 
 	"github.com/99designs/gqlgen/api"
 	"github.com/99designs/gqlgen/codegen/config"
@@ -136,4 +136,4 @@ This client does not support subscription. If you need a subscription, please cr
 
 ### Pre-conditions
 
-[clientgen](https://github.com/Yamashou/gqlgenc/tree/master/clientgen) is created based on [modelgen](https://github.com/99designs/gqlgen/tree/master/plugin/modelgen). So if you don't have a modelgen, it may be a mysterious move.
+[clientgen](https://github.com/TripleMint/gqlgenc/tree/master/clientgen) is created based on [modelgen](https://github.com/99designs/gqlgen/tree/master/plugin/modelgen). So if you don't have a modelgen, it may be a mysterious move.
diff --git a/client/client.go b/client/client.go
index 4f049b3..1903b48 100644
--- a/client/client.go
+++ b/client/client.go
@@ -8,7 +8,7 @@ import (
 	"io/ioutil"
 	"net/http"
 
-	"github.com/Yamashou/gqlgenc/graphqljson"
+	"github.com/TripleMint/gqlgenc/graphqljson"
 	"github.com/vektah/gqlparser/v2/gqlerror"
 )
 
diff --git a/client/client_test.go b/client/client_test.go
index 1f130de..2014936 100644
--- a/client/client_test.go
+++ b/client/client_test.go
@@ -138,14 +138,14 @@ func TestUnmarshal(t *testing.T) {
 
 	t.Run("valid data", func(t *testing.T) {
 		t.Parallel()
-		res := &fakeRes{}
-		err := unmarshal([]byte(validData), res)
+		r := &fakeRes{}
+		err := unmarshal([]byte(validData), r)
 		require.NoError(t, err)
 
 		expected := &fakeRes{
 			Something: "some data",
 		}
-		require.Equal(t, res, expected)
+		require.Equal(t, r, expected)
 	})
 
 	t.Run("bad data format", func(t *testing.T) {
diff --git a/clientgen/client.go b/clientgen/client.go
index bffeb51..04278bc 100644
--- a/clientgen/client.go
+++ b/clientgen/client.go
@@ -5,7 +5,7 @@ import (
 
 	"github.com/99designs/gqlgen/codegen/config"
 	"github.com/99designs/gqlgen/plugin"
-	gqlgencConfig "github.com/Yamashou/gqlgenc/config"
+	gqlgencConfig "github.com/TripleMint/gqlgenc/config"
 )
 
 var _ plugin.ConfigMutator = &Plugin{}
@@ -77,7 +77,8 @@ func (p *Plugin) MutateConfig(cfg *config.Config) error {
 		return fmt.Errorf("generating operation failed: %w", err)
 	}
 
-	if err := RenderTemplate(cfg, query, mutation, fragments, operations, operationResponses, p.GenerateConfig, p.Client); err != nil {
+	generateClient := p.GenerateConfig.ShouldGenerateClient()
+	if err := RenderTemplate(cfg, query, mutation, fragments, operations, operationResponses, generateClient, p.Client); err != nil {
 		return fmt.Errorf("template failed: %w", err)
 	}
 
diff --git a/clientgen/query.go b/clientgen/query.go
index 2b65193..d0d8382 100644
--- a/clientgen/query.go
+++ b/clientgen/query.go
@@ -3,7 +3,7 @@ package clientgen
 import (
 	"fmt"
 
-	"github.com/Yamashou/gqlgenc/config"
+	"github.com/TripleMint/gqlgenc/config"
 	"github.com/vektah/gqlparser/v2/ast"
 	"github.com/vektah/gqlparser/v2/parser"
 	"github.com/vektah/gqlparser/v2/validator"
diff --git a/clientgen/source.go b/clientgen/source.go
index 1d059f3..036c32f 100644
--- a/clientgen/source.go
+++ b/clientgen/source.go
@@ -6,7 +6,7 @@ import (
 	"go/types"
 
 	"github.com/99designs/gqlgen/codegen/templates"
-	"github.com/Yamashou/gqlgenc/config"
+	"github.com/TripleMint/gqlgenc/config"
 	"github.com/vektah/gqlparser/v2/ast"
 	"github.com/vektah/gqlparser/v2/formatter"
 )
@@ -35,7 +35,7 @@ type Fragment struct {
 func (s *Source) Fragments() ([]*Fragment, error) {
 	fragments := make([]*Fragment, 0, len(s.queryDocument.Fragments))
 	for _, fragment := range s.queryDocument.Fragments {
-		responseFields := s.sourceGenerator.NewResponseFields(fragment.SelectionSet)
+		responseFields := s.sourceGenerator.NewResponseFields(fragment.SelectionSet, "")
 		if s.sourceGenerator.cfg.Models.Exists(fragment.Name) {
 			return nil, fmt.Errorf("%s is duplicated", fragment.Name)
 		}
@@ -137,16 +137,47 @@ type OperationResponse struct {
 	Type types.Type
 }
 
+func getNestedTypes(source *Source, selectionSet ast.SelectionSet, parentName string, indent int) []*OperationResponse {
+	// tabs := strings.Repeat("  ", indent)
+	var results []*OperationResponse
+	for _, selection := range selectionSet {
+		switch v := selection.(type) {
+		case nil:
+			panic("nil")
+		case *ast.Field:
+			responseFields := source.sourceGenerator.NewResponseFields(v.SelectionSet, parentName+templates.ToGo(v.Alias))
+			if responseFields.IsStructType() {
+
+				// This is where we define the nested fields like Nodes
+				results = append(results, &OperationResponse{
+					Name: parentName + templates.ToGo(v.Alias),
+					Type: responseFields.StructType(),
+				})
+				results = append(results, getNestedTypes(source, v.SelectionSet, parentName+templates.ToGo(v.Alias), indent+1)...)
+			}
+
+		default:
+			fmt.Println("unknown", v)
+		}
+	}
+	return results
+}
+
 func (s *Source) OperationResponses() ([]*OperationResponse, error) {
-	operationResponse := make([]*OperationResponse, 0, len(s.queryDocument.Operations))
+	var operationResponse []*OperationResponse
 	for _, operation := range s.queryDocument.Operations {
-		responseFields := s.sourceGenerator.NewResponseFields(operation.SelectionSet)
+		queryName := getResponseStructName(operation, s.generateConfig)
+		responseFields := s.sourceGenerator.NewResponseFields(operation.SelectionSet, queryName)
+
+		nestedTypes := getNestedTypes(s, operation.SelectionSet, queryName, 0)
+		operationResponse = append(operationResponse, nestedTypes...)
+
 		name := getResponseStructName(operation, s.generateConfig)
 		if s.sourceGenerator.cfg.Models.Exists(name) {
 			return nil, fmt.Errorf("%s is duplicated", name)
 		}
 		operationResponse = append(operationResponse, &OperationResponse{
-			Name: name,
+			Name: queryName,
 			Type: responseFields.StructType(),
 		})
 	}
diff --git a/clientgen/source_generator.go b/clientgen/source_generator.go
index a43308a..e8502a7 100644
--- a/clientgen/source_generator.go
+++ b/clientgen/source_generator.go
@@ -79,10 +79,10 @@ func NewSourceGenerator(cfg *config.Config, client config.PackageConfig) *Source
 	}
 }
 
-func (r *SourceGenerator) NewResponseFields(selectionSet ast.SelectionSet) ResponseFieldList {
+func (r *SourceGenerator) NewResponseFields(selectionSet ast.SelectionSet, parentName string) ResponseFieldList {
 	responseFields := make(ResponseFieldList, 0, len(selectionSet))
 	for _, selection := range selectionSet {
-		responseFields = append(responseFields, r.NewResponseField(selection))
+		responseFields = append(responseFields, r.NewResponseField(selection, parentName))
 	}
 
 	return responseFields
@@ -138,10 +138,10 @@ func (r *SourceGenerator) NewResponseFieldsByDefinition(definition *ast.Definiti
 	return fields, nil
 }
 
-func (r *SourceGenerator) NewResponseField(selection ast.Selection) *ResponseField {
+func (r *SourceGenerator) NewResponseField(selection ast.Selection, parentName string) *ResponseField {
 	switch selection := selection.(type) {
 	case *ast.Field:
-		fieldsResponseFields := r.NewResponseFields(selection.SelectionSet)
+		fieldsResponseFields := r.NewResponseFields(selection.SelectionSet, selection.Alias)
 
 		var baseType types.Type
 		switch {
@@ -152,7 +152,11 @@ func (r *SourceGenerator) NewResponseField(selection ast.Selection) *ResponseFie
 			// if a child field is fragment, this field type became fragment.
 			baseType = fieldsResponseFields[0].Type
 		case fieldsResponseFields.IsStructType():
-			baseType = fieldsResponseFields.StructType()
+			baseType = types.NewNamed(
+				types.NewTypeName(0, r.client.Pkg(), parentName+templates.ToGo(selection.Alias), nil),
+				fieldsResponseFields.StructType(),
+				nil,
+			)
 		default:
 			// ここにきたらバグ
 			// here is bug
@@ -177,7 +181,7 @@ func (r *SourceGenerator) NewResponseField(selection ast.Selection) *ResponseFie
 
 	case *ast.FragmentSpread:
 		// この構造体はテンプレート側で使われることはなく、ast.FieldでFragment判定するために使用する
-		fieldsResponseFields := r.NewResponseFields(selection.Definition.SelectionSet)
+		fieldsResponseFields := r.NewResponseFields(selection.Definition.SelectionSet, "")
 		typ := types.NewNamed(
 			types.NewTypeName(0, r.client.Pkg(), templates.ToGo(selection.Name), nil),
 			fieldsResponseFields.StructType(),
@@ -193,7 +197,7 @@ func (r *SourceGenerator) NewResponseField(selection ast.Selection) *ResponseFie
 
 	case *ast.InlineFragment:
 		// InlineFragmentは子要素をそのままstructとしてもつので、ここで、構造体の型を作成します
-		fieldsResponseFields := r.NewResponseFields(selection.SelectionSet)
+		fieldsResponseFields := r.NewResponseFields(selection.SelectionSet, "")
 
 		return &ResponseField{
 			Name:             selection.TypeCondition,
diff --git a/clientgen/template.go b/clientgen/template.go
index 8a8017e..ddbb365 100644
--- a/clientgen/template.go
+++ b/clientgen/template.go
@@ -5,24 +5,22 @@ import (
 
 	"github.com/99designs/gqlgen/codegen/config"
 	"github.com/99designs/gqlgen/codegen/templates"
-	gqlgencConfig "github.com/Yamashou/gqlgenc/config"
 )
 
-func RenderTemplate(cfg *config.Config, query *Query, mutation *Mutation, fragments []*Fragment, operations []*Operation, operationResponses []*OperationResponse, generateCfg *gqlgencConfig.GenerateConfig, client config.PackageConfig) error {
+func RenderTemplate(cfg *config.Config, query *Query, mutation *Mutation, fragments []*Fragment, operations []*Operation, operationResponses []*OperationResponse, generateClient bool, client config.PackageConfig) error {
 	if err := templates.Render(templates.Options{
 		PackageName: client.Package,
 		Filename:    client.Filename,
 		Data: map[string]interface{}{
-			"Query":               query,
-			"Mutation":            mutation,
-			"Fragment":            fragments,
-			"Operation":           operations,
-			"OperationResponse":   operationResponses,
-			"GenerateClient":      generateCfg.ShouldGenerateClient(),
-			"ClientInterfaceName": generateCfg.ClientInterfaceName,
+			"Query":             query,
+			"Mutation":          mutation,
+			"Fragment":          fragments,
+			"Operation":         operations,
+			"OperationResponse": operationResponses,
+			"GenerateClient":    generateClient,
 		},
 		Packages:   cfg.Packages,
-		PackageDoc: "// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.\n",
+		PackageDoc: "// Code generated by github.com/TripleMint/gqlgenc, DO NOT EDIT.\n",
 	}); err != nil {
 		return fmt.Errorf("%s generating failed: %w", client.Filename, err)
 	}
diff --git a/clientgen/template.gotpl b/clientgen/template.gotpl
index 30b2df2..082ea83 100644
--- a/clientgen/template.gotpl
+++ b/clientgen/template.gotpl
@@ -11,30 +11,30 @@
 	{{ reserveImport "time" }}
 
 
-	{{ reserveImport "github.com/Yamashou/gqlgenc/graphqljson" }}
-	{{ reserveImport "github.com/Yamashou/gqlgenc/client" }}
-
-	{{- if .ClientInterfaceName }}
-    	type {{ .ClientInterfaceName }} interface {
-    		{{- range $model := .Operation }}
-    			{{ $model.Name | go }} (ctx context.Context{{- range $arg := .Args }}, {{ $arg.Variable | goPrivate }} {{ $arg.Type | ref }} {{- end }}, httpRequestOptions ...client.HTTPRequestOption) (*{{ $model.ResponseStructName | go }}, error)
-    		{{- end }}
-    	}
-    {{- end }}
-
-	type Client struct {
-		Client *client.Client
-	}
+	{{ reserveImport "github.com/TripleMint/gqlgenc/graphqljson" }}
+	{{ reserveImport "github.com/TripleMint/gqlgenc/client" }}
+
+    type gqlClient interface {
+        Post(ctx context.Context, operationName, query string, respData interface{}, vars map[string]interface{}) error
+    }
 
-	{{- if .ClientInterfaceName }}
-	func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) {{ .ClientInterfaceName }} {
-		return &Client{Client: client.NewClient(cli, baseURL, options...)}
+	type generatedClient struct {
+		gqlClient gqlClient
 	}
-	{{- else }}
-		func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) *Client {
-			return &Client{Client: client.NewClient(cli, baseURL, options...)}
-		}
-	{{- end }}
+
+    type GeneratedClient interface {
+    {{- range $model := .Operation}}
+        {{- if $.GenerateClient }}
+            {{ $model.Name | go }} (ctx context.Context{{- range $arg := .Args }}, {{ $arg.Variable | goPrivate }} {{ $arg.Type | ref }} {{- end }}) (*{{ $model.ResponseStructName | go }}, error)
+        {{- end}}
+    {{- end}}
+    }
+
+    func NewGeneratedClient(c gqlClient) GeneratedClient {
+        return &generatedClient{gqlClient: c}
+    }
+
+
 {{- end }}
 
 type {{ .Query.Name | go }} {{ .Query.Type | ref }}
@@ -51,13 +51,11 @@ type {{ .Query.Name | go }} {{ .Query.Type | ref }}
     type  {{ .Name | go  }} {{ .Type | ref }}
 {{- end }}
 
-
-
 {{- range $model := .Operation}}
 	const {{ $model.Name|go }}Document = `{{ $model.Operation }}`
 
 	{{- if $.GenerateClient }}
-		func (c *Client) {{ $model.Name | go }} (ctx context.Context{{- range $arg := .Args }}, {{ $arg.Variable | goPrivate }} {{ $arg.Type | ref }} {{- end }}, httpRequestOptions ...client.HTTPRequestOption) (*{{ $model.ResponseStructName | go }}, error) {
+		func (c *generatedClient) {{ $model.Name | go }} (ctx context.Context{{- range $arg := .Args }}, {{ $arg.Variable | goPrivate }} {{ $arg.Type | ref }} {{- end }}) (*{{ $model.ResponseStructName | go }}, error) {
 			vars := map[string]interface{}{
 			{{- range $args := .VariableDefinitions}}
 				"{{ $args.Variable }}": {{ $args.Variable | goPrivate }},
@@ -65,7 +63,7 @@ type {{ .Query.Name | go }} {{ .Query.Type | ref }}
 			}
 
 			var res {{ $model.ResponseStructName | go }}
-			if err := c.Client.Post(ctx, "{{ $model.Name }}", {{ $model.Name|go }}Document, &res, vars, httpRequestOptions...); err != nil {
+			if err := c.gqlClient.Post(ctx, "{{ $model.Name }}", {{ $model.Name|go }}Document, &res, vars); err != nil {
 				return nil, err
 			}
 
diff --git a/clientgenv2/client.go b/clientgenv2/client.go
index 8d7ebfa..3b1c538 100644
--- a/clientgenv2/client.go
+++ b/clientgenv2/client.go
@@ -5,7 +5,7 @@ import (
 
 	"github.com/99designs/gqlgen/codegen/config"
 	"github.com/99designs/gqlgen/plugin"
-	gqlgencConfig "github.com/Yamashou/gqlgenc/config"
+	gqlgencConfig "github.com/TripleMint/gqlgenc/config"
 )
 
 var _ plugin.ConfigMutator = &Plugin{}
@@ -72,12 +72,8 @@ func (p *Plugin) MutateConfig(cfg *config.Config) error {
 		return fmt.Errorf("generating operation response failed: %w", err)
 	}
 
-	operations, err := source.Operations(queryDocuments)
-	if err != nil {
-		return fmt.Errorf("generating operation failed: %w", err)
-	}
-
-	if err := RenderTemplate(cfg, query, mutation, fragments, operations, operationResponses, source.ResponseSubTypes(), p.GenerateConfig, p.Client); err != nil {
+	generateClient := p.GenerateConfig.ShouldGenerateClient()
+	if err := RenderTemplate(cfg, query, mutation, fragments, source.Operations(queryDocuments), operationResponses, generateClient, p.Client); err != nil {
 		return fmt.Errorf("template failed: %w", err)
 	}
 
diff --git a/clientgenv2/source.go b/clientgenv2/source.go
index 4d3fa78..7114908 100644
--- a/clientgenv2/source.go
+++ b/clientgenv2/source.go
@@ -6,7 +6,7 @@ import (
 	"go/types"
 
 	"github.com/99designs/gqlgen/codegen/templates"
-	"github.com/Yamashou/gqlgenc/config"
+	"github.com/TripleMint/gqlgenc/config"
 	"github.com/vektah/gqlparser/v2/ast"
 	"github.com/vektah/gqlparser/v2/formatter"
 )
@@ -35,7 +35,7 @@ type Fragment struct {
 func (s *Source) Fragments() ([]*Fragment, error) {
 	fragments := make([]*Fragment, 0, len(s.queryDocument.Fragments))
 	for _, fragment := range s.queryDocument.Fragments {
-		responseFields := s.sourceGenerator.NewResponseFields(fragment.SelectionSet, fragment.Name)
+		responseFields := s.sourceGenerator.NewResponseFields(fragment.SelectionSet)
 		if s.sourceGenerator.cfg.Models.Exists(fragment.Name) {
 			return nil, fmt.Errorf("%s is duplicated", fragment.Name)
 		}
@@ -77,39 +77,13 @@ func NewOperation(operation *ast.OperationDefinition, queryDocument *ast.QueryDo
 	}
 }
 
-func ValidateOperationList(os ast.OperationList) error {
-	if err := IsUniqueName(os); err != nil {
-		return fmt.Errorf("is not unique operation name: %w", err)
-	}
-
-	return nil
-}
-
-func IsUniqueName(os ast.OperationList) error {
-	operationNames := make(map[string]struct{})
-	for _, operation := range os {
-		_, exist := operationNames[templates.ToGo(operation.Name)]
-		if exist {
-			return fmt.Errorf("duplicate operation: %s", operation.Name)
-		}
-	}
-
-	return nil
-}
-
-func (s *Source) Operations(queryDocuments []*ast.QueryDocument) ([]*Operation, error) {
+func (s *Source) Operations(queryDocuments []*ast.QueryDocument) []*Operation {
 	operations := make([]*Operation, 0, len(s.queryDocument.Operations))
 
 	queryDocumentsMap := queryDocumentMapByOperationName(queryDocuments)
 	operationArgsMap := s.operationArgsMapByOperationName()
-
-	if err := ValidateOperationList(s.queryDocument.Operations); err != nil {
-		return nil, fmt.Errorf("validation error: %w", err)
-	}
-
 	for _, operation := range s.queryDocument.Operations {
 		queryDocument := queryDocumentsMap[operation.Name]
-
 		args := operationArgsMap[operation.Name]
 		operations = append(operations, NewOperation(
 			operation,
@@ -119,7 +93,7 @@ func (s *Source) Operations(queryDocuments []*ast.QueryDocument) ([]*Operation,
 		))
 	}
 
-	return operations, nil
+	return operations
 }
 
 func (s *Source) operationArgsMapByOperationName() map[string][]*Argument {
@@ -157,7 +131,7 @@ type OperationResponse struct {
 func (s *Source) OperationResponses() ([]*OperationResponse, error) {
 	operationResponse := make([]*OperationResponse, 0, len(s.queryDocument.Operations))
 	for _, operation := range s.queryDocument.Operations {
-		responseFields := s.sourceGenerator.NewResponseFields(operation.SelectionSet, operation.Name)
+		responseFields := s.sourceGenerator.NewResponseFields(operation.SelectionSet)
 		name := getResponseStructName(operation, s.generateConfig)
 		if s.sourceGenerator.cfg.Models.Exists(name) {
 			return nil, fmt.Errorf("%s is duplicated", name)
@@ -179,10 +153,6 @@ func (s *Source) OperationResponses() ([]*OperationResponse, error) {
 	return operationResponse, nil
 }
 
-func (s *Source) ResponseSubTypes() []*StructSource {
-	return s.sourceGenerator.StructSources
-}
-
 type Query struct {
 	Name string
 	Type types.Type
diff --git a/clientgenv2/source_generator.go b/clientgenv2/source_generator.go
index 4b8a80d..fda2c69 100644
--- a/clientgenv2/source_generator.go
+++ b/clientgenv2/source_generator.go
@@ -26,14 +26,6 @@ type ResponseField struct {
 
 type ResponseFieldList []*ResponseField
 
-func (rs ResponseFieldList) IsFragmentSpread() bool {
-	if len(rs) != 1 {
-		return false
-	}
-
-	return rs[0].IsFragmentSpread
-}
-
 func (rs ResponseFieldList) StructType() *types.Struct {
 	vars := make([]*types.Var, 0)
 	structTags := make([]string, 0)
@@ -73,31 +65,24 @@ func (rs ResponseFieldList) IsStructType() bool {
 	return len(rs) > 0 && !rs.IsFragment()
 }
 
-type StructSource struct {
-	Name string
-	Type types.Type
-}
-
 type SourceGenerator struct {
-	cfg           *config.Config
-	binder        *config.Binder
-	client        config.PackageConfig
-	StructSources []*StructSource
+	cfg    *config.Config
+	binder *config.Binder
+	client config.PackageConfig
 }
 
 func NewSourceGenerator(cfg *config.Config, client config.PackageConfig) *SourceGenerator {
 	return &SourceGenerator{
-		cfg:           cfg,
-		binder:        cfg.NewBinder(),
-		client:        client,
-		StructSources: []*StructSource{},
+		cfg:    cfg,
+		binder: cfg.NewBinder(),
+		client: client,
 	}
 }
 
-func (r *SourceGenerator) NewResponseFields(selectionSet ast.SelectionSet, typeName string) ResponseFieldList {
+func (r *SourceGenerator) NewResponseFields(selectionSet ast.SelectionSet) ResponseFieldList {
 	responseFields := make(ResponseFieldList, 0, len(selectionSet))
 	for _, selection := range selectionSet {
-		responseFields = append(responseFields, r.NewResponseField(selection, typeName))
+		responseFields = append(responseFields, r.NewResponseField(selection))
 	}
 
 	return responseFields
@@ -138,11 +123,9 @@ func (r *SourceGenerator) NewResponseFieldsByDefinition(definition *ast.Definiti
 			typ = r.binder.CopyModifiersFromAst(field.Type, baseType)
 		}
 
-		var tags []string
-		if !field.Type.NonNull {
-			tags = append(tags, fmt.Sprintf(`json:"%s,omitempty"`, field.Name), fmt.Sprintf(`graphql:"%s"`, field.Name))
-		} else {
-			tags = append(tags, fmt.Sprintf(`json:"%s"`, field.Name), fmt.Sprintf(`graphql:"%s"`, field.Name))
+		tags := []string{
+			fmt.Sprintf(`json:"%s"`, field.Name),
+			fmt.Sprintf(`graphql:"%s"`, field.Name),
 		}
 
 		fields = append(fields, &ResponseField{
@@ -155,15 +138,10 @@ func (r *SourceGenerator) NewResponseFieldsByDefinition(definition *ast.Definiti
 	return fields, nil
 }
 
-func NewLayerTypeName(base, thisField string) string {
-	return fmt.Sprintf("%s_%s", base, thisField)
-}
-
-func (r *SourceGenerator) NewResponseField(selection ast.Selection, typeName string) *ResponseField {
+func (r *SourceGenerator) NewResponseField(selection ast.Selection) *ResponseField {
 	switch selection := selection.(type) {
 	case *ast.Field:
-		typeName = NewLayerTypeName(typeName, templates.ToGo(selection.Alias))
-		fieldsResponseFields := r.NewResponseFields(selection.SelectionSet, typeName)
+		fieldsResponseFields := r.NewResponseFields(selection.SelectionSet)
 
 		var baseType types.Type
 		switch {
@@ -174,16 +152,7 @@ func (r *SourceGenerator) NewResponseField(selection ast.Selection, typeName str
 			// if a child field is fragment, this field type became fragment.
 			baseType = fieldsResponseFields[0].Type
 		case fieldsResponseFields.IsStructType():
-			structType := fieldsResponseFields.StructType()
-			r.StructSources = append(r.StructSources, &StructSource{
-				Name: typeName,
-				Type: structType,
-			})
-			baseType = types.NewNamed(
-				types.NewTypeName(0, r.client.Pkg(), typeName, nil),
-				structType,
-				nil,
-			)
+			baseType = fieldsResponseFields.StructType()
 		default:
 			// ここにきたらバグ
 			// here is bug
@@ -208,8 +177,8 @@ func (r *SourceGenerator) NewResponseField(selection ast.Selection, typeName str
 
 	case *ast.FragmentSpread:
 		// この構造体はテンプレート側で使われることはなく、ast.FieldでFragment判定するために使用する
-		fieldsResponseFields := r.NewResponseFields(selection.Definition.SelectionSet, NewLayerTypeName(typeName, templates.ToGo(selection.Name)))
-		baseType := types.NewNamed(
+		fieldsResponseFields := r.NewResponseFields(selection.Definition.SelectionSet)
+		typ := types.NewNamed(
 			types.NewTypeName(0, r.client.Pkg(), templates.ToGo(selection.Name), nil),
 			fieldsResponseFields.StructType(),
 			nil,
@@ -217,45 +186,18 @@ func (r *SourceGenerator) NewResponseField(selection ast.Selection, typeName str
 
 		return &ResponseField{
 			Name:             selection.Name,
-			Type:             types.NewPointer(baseType),
+			Type:             typ,
 			IsFragmentSpread: true,
 			ResponseFields:   fieldsResponseFields,
 		}
 
 	case *ast.InlineFragment:
 		// InlineFragmentは子要素をそのままstructとしてもつので、ここで、構造体の型を作成します
-		name := NewLayerTypeName(typeName, templates.ToGo(selection.TypeCondition))
-		fieldsResponseFields := r.NewResponseFields(selection.SelectionSet, name)
-
-		if fieldsResponseFields.IsFragmentSpread() {
-			typ := types.NewNamed(
-				types.NewTypeName(0, r.client.Pkg(), templates.ToGo(fieldsResponseFields[0].Name), nil),
-				fieldsResponseFields.StructType(),
-				nil,
-			)
-
-			return &ResponseField{
-				Name:           selection.TypeCondition,
-				Type:           typ,
-				Tags:           []string{fmt.Sprintf(`graphql:"... on %s"`, selection.TypeCondition)},
-				ResponseFields: fieldsResponseFields,
-			}
-		}
-
-		structType := fieldsResponseFields.StructType()
-		r.StructSources = append(r.StructSources, &StructSource{
-			Name: name,
-			Type: structType,
-		})
-		typ := types.NewNamed(
-			types.NewTypeName(0, r.client.Pkg(), name, nil),
-			structType,
-			nil,
-		)
+		fieldsResponseFields := r.NewResponseFields(selection.SelectionSet)
 
 		return &ResponseField{
 			Name:             selection.TypeCondition,
-			Type:             typ,
+			Type:             fieldsResponseFields.StructType(),
 			IsInlineFragment: true,
 			Tags:             []string{fmt.Sprintf(`graphql:"... on %s"`, selection.TypeCondition)},
 			ResponseFields:   fieldsResponseFields,
diff --git a/clientgenv2/template.go b/clientgenv2/template.go
index 156ea0d..a33f0b8 100644
--- a/clientgenv2/template.go
+++ b/clientgenv2/template.go
@@ -1,36 +1,26 @@
 package clientgenv2
 
 import (
-
-	// nolint:golint, nolintlint
-	_ "embed"
 	"fmt"
 
 	"github.com/99designs/gqlgen/codegen/config"
 	"github.com/99designs/gqlgen/codegen/templates"
-	gqlgencConfig "github.com/Yamashou/gqlgenc/config"
 )
 
-//go:embed template.gotpl
-var template string
-
-func RenderTemplate(cfg *config.Config, query *Query, mutation *Mutation, fragments []*Fragment, operations []*Operation, operationResponses []*OperationResponse, structSources []*StructSource, generateCfg *gqlgencConfig.GenerateConfig, client config.PackageConfig) error {
+func RenderTemplate(cfg *config.Config, query *Query, mutation *Mutation, fragments []*Fragment, operations []*Operation, operationResponses []*OperationResponse, generateClient bool, client config.PackageConfig) error {
 	if err := templates.Render(templates.Options{
 		PackageName: client.Package,
 		Filename:    client.Filename,
-		Template:    template,
 		Data: map[string]interface{}{
-			"Query":               query,
-			"Mutation":            mutation,
-			"Fragment":            fragments,
-			"Operation":           operations,
-			"OperationResponse":   operationResponses,
-			"GenerateClient":      generateCfg.ShouldGenerateClient(),
-			"StructSources":       structSources,
-			"ClientInterfaceName": generateCfg.GetClientInterfaceName(),
+			"Query":             query,
+			"Mutation":          mutation,
+			"Fragment":          fragments,
+			"Operation":         operations,
+			"OperationResponse": operationResponses,
+			"GenerateClient":    generateClient,
 		},
 		Packages:   cfg.Packages,
-		PackageDoc: "// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.\n",
+		PackageDoc: "// Code generated by github.com/TripleMint/gqlgenc, DO NOT EDIT.\n",
 	}); err != nil {
 		return fmt.Errorf("%s generating failed: %w", client.Filename, err)
 	}
diff --git a/clientgenv2/template.gotpl b/clientgenv2/template.gotpl
index fbb6167..0bc9d92 100644
--- a/clientgenv2/template.gotpl
+++ b/clientgenv2/template.gotpl
@@ -11,26 +11,16 @@
 	{{ reserveImport "time" }}
 
 
-	{{ reserveImport "github.com/Yamashou/gqlgenc/graphqljson" }}
-	{{ reserveImport "github.com/Yamashou/gqlgenc/clientv2" }}
-
-
-	{{- if .ClientInterfaceName }}
-        type {{ .ClientInterfaceName }} interface {
-            {{- range $model := .Operation }}
-                {{ $model.Name | go }} (ctx context.Context{{- range $arg := .Args }}, {{ $arg.Variable | goPrivate }} {{ $arg.Type | ref }} {{- end }}, interceptors ...clientv2.RequestInterceptor) (*{{ $model.ResponseStructName | go }}, error)
-            {{- end }}
-        }
-    {{- end }}
+	{{ reserveImport "github.com/TripleMint/gqlgenc/graphqljson" }}
+	{{ reserveImport "github.com/TripleMint/gqlgenc/clientv2" }}
 
 	type Client struct {
-	    Client *clientv2.Client
+	Client *clientv2.Client
 	}
 
-    func NewClient(cli *http.Client, baseURL string, interceptors ...clientv2.RequestInterceptor) {{- if .ClientInterfaceName }} {{ .ClientInterfaceName }} {{- else }} *Client {{- end }} {
-        return &Client{Client: clientv2.NewClient(cli, baseURL, interceptors...)}
-    }
-
+	func NewClient(cli *http.Client, baseURL string, interceptors ...clientv2.RequestInterceptor) *Client {
+	return &Client{Client: clientv2.NewClient(cli, baseURL, interceptors...)}
+	}
 {{- end }}
 
 type {{ .Query.Name | go }} {{ .Query.Type | ref }}
@@ -43,10 +33,6 @@ type {{ .Query.Name | go }} {{ .Query.Type | ref }}
 	type  {{ .Name | go  }} {{ .Type | ref }}
 {{- end }}
 
-{{- range $name, $element := .StructSources }}
-	type {{ .Name }} {{ .Type | ref }}
-{{- end}}
-
 {{- range $name, $element := .OperationResponse }}
 	type  {{ .Name | go  }} {{ .Type | ref }}
 {{- end }}
@@ -63,7 +49,7 @@ type {{ .Query.Name | go }} {{ .Query.Type | ref }}
 			}
 
 			var res {{ $model.ResponseStructName | go }}
-			if err := c.Client.Post(ctx, "{{ $model.Name }}", {{ $model.Name|go }}Document, &res, vars, interceptors...); err != nil {
+			if err := c.Client.Post(ctx, "{{ $model.Name|go }}", {{ $model.Name|go }}Document, &res, vars, interceptors...); err != nil {
 				return nil, err
 			}
 
diff --git a/clientv2/client.go b/clientv2/client.go
index abb1689..7285a3c 100644
--- a/clientv2/client.go
+++ b/clientv2/client.go
@@ -8,7 +8,7 @@ import (
 	"io/ioutil"
 	"net/http"
 
-	"github.com/Yamashou/gqlgenc/graphqljson"
+	"github.com/TripleMint/gqlgenc/graphqljson"
 	"github.com/vektah/gqlparser/v2/gqlerror"
 )
 
diff --git a/clientv2/client_test.go b/clientv2/client_test.go
index 51c1aae..b1baeb3 100644
--- a/clientv2/client_test.go
+++ b/clientv2/client_test.go
@@ -141,14 +141,14 @@ func TestUnmarshal(t *testing.T) {
 
 	t.Run("valid data", func(t *testing.T) {
 		t.Parallel()
-		res := &fakeRes{}
-		err := unmarshal([]byte(validData), res)
+		r := &fakeRes{}
+		err := unmarshal([]byte(validData), r)
 		require.NoError(t, err)
 
 		expected := &fakeRes{
 			Something: "some data",
 		}
-		require.Equal(t, res, expected)
+		require.Equal(t, r, expected)
 	})
 
 	t.Run("bad data format", func(t *testing.T) {
diff --git a/config/config.go b/config/config.go
index 2ac49a2..ef47a0c 100644
--- a/config/config.go
+++ b/config/config.go
@@ -11,8 +11,8 @@ import (
 	"strings"
 
 	"github.com/99designs/gqlgen/codegen/config"
-	"github.com/Yamashou/gqlgenc/client"
-	"github.com/Yamashou/gqlgenc/introspection"
+	"github.com/TripleMint/gqlgenc/client"
+	"github.com/TripleMint/gqlgenc/introspection"
 	"github.com/vektah/gqlparser/v2"
 	"github.com/vektah/gqlparser/v2/ast"
 	"github.com/vektah/gqlparser/v2/validator"
@@ -200,7 +200,7 @@ func LoadConfig(filename string) (*Config, error) {
 		Model:  cfg.Model,
 		Models: models,
 		// TODO: gqlgen must be set exec but client not used
-		Exec:       config.ExecConfig{Filename: "generated.go"},
+		Exec:       config.PackageConfig{Filename: "generated.go"},
 		Directives: map[string]config.DirectiveConfig{},
 		Sources:    sources,
 	}
@@ -276,11 +276,10 @@ func (c *Config) loadLocalSchema() (*ast.Schema, error) {
 }
 
 type GenerateConfig struct {
-	Prefix              *NamingConfig `yaml:"prefix,omitempty"`
-	Suffix              *NamingConfig `yaml:"suffix,omitempty"`
-	UnamedPattern       string        `yaml:"unamedPattern,omitempty"`
-	Client              *bool         `yaml:"client,omitempty"`
-	ClientInterfaceName *string       `yaml:"clientInterfaceName,omitempty"`
+	Prefix        *NamingConfig `yaml:"prefix,omitempty"`
+	Suffix        *NamingConfig `yaml:"suffix,omitempty"`
+	UnamedPattern string        `yaml:"unamedPattern,omitempty"`
+	Client        *bool         `yaml:"client,omitempty"`
 	// if true, used client v2 in generate code
 	ClientV2 bool `yaml:"clientV2,omitempty"`
 }
@@ -297,14 +296,6 @@ func (c *GenerateConfig) ShouldGenerateClient() bool {
 	return true
 }
 
-func (c *GenerateConfig) GetClientInterfaceName() *string {
-	if c == nil {
-		return nil
-	}
-
-	return c.ClientInterfaceName
-}
-
 type NamingConfig struct {
 	Query    string `yaml:"query,omitempty"`
 	Mutation string `yaml:"mutation,omitempty"`
diff --git a/config/config_test.go b/config/config_test.go
index f5f5046..e5b7663 100644
--- a/config/config_test.go
+++ b/config/config_test.go
@@ -48,15 +48,15 @@ func TestLoadConfig(t *testing.T) {
 
 	t.Run("globbed filenames", func(t *testing.T) {
 		t.Parallel()
-		loadConfig, err := LoadConfig("testdata/cfg/glob.yml")
+		c, err := LoadConfig("testdata/cfg/glob.yml")
 		require.NoError(t, err)
 
 		if runtime.GOOS == "windows" {
-			require.Equal(t, loadConfig.SchemaFilename[0], `testdata\cfg\glob\bar\bar with spaces.graphql`)
-			require.Equal(t, loadConfig.SchemaFilename[1], `testdata\cfg\glob\foo\foo.graphql`)
+			require.Equal(t, c.SchemaFilename[0], `testdata\cfg\glob\bar\bar with spaces.graphql`)
+			require.Equal(t, c.SchemaFilename[1], `testdata\cfg\glob\foo\foo.graphql`)
 		} else {
-			require.Equal(t, loadConfig.SchemaFilename[0], "testdata/cfg/glob/bar/bar with spaces.graphql")
-			require.Equal(t, loadConfig.SchemaFilename[1], "testdata/cfg/glob/foo/foo.graphql")
+			require.Equal(t, c.SchemaFilename[0], "testdata/cfg/glob/bar/bar with spaces.graphql")
+			require.Equal(t, c.SchemaFilename[1], "testdata/cfg/glob/foo/foo.graphql")
 		}
 	})
 
@@ -72,14 +72,14 @@ func TestLoadConfig(t *testing.T) {
 
 	t.Run("generate", func(t *testing.T) {
 		t.Parallel()
-		loadConfig, err := LoadConfig("testdata/cfg/generate.yml")
+		c, err := LoadConfig("testdata/cfg/generate.yml")
 		require.NoError(t, err)
-		require.Equal(t, true, loadConfig.Generate.ShouldGenerateClient())
-		require.Equal(t, loadConfig.Generate.UnamedPattern, "Empty")
-		require.Equal(t, loadConfig.Generate.Suffix.Mutation, "Bar")
-		require.Equal(t, loadConfig.Generate.Suffix.Query, "Foo")
-		require.Equal(t, loadConfig.Generate.Prefix.Mutation, "Hoge")
-		require.Equal(t, loadConfig.Generate.Prefix.Query, "Data")
+		require.Equal(t, true, c.Generate.ShouldGenerateClient())
+		require.Equal(t, c.Generate.UnamedPattern, "Empty")
+		require.Equal(t, c.Generate.Suffix.Mutation, "Bar")
+		require.Equal(t, c.Generate.Suffix.Query, "Foo")
+		require.Equal(t, c.Generate.Prefix.Mutation, "Hoge")
+		require.Equal(t, c.Generate.Prefix.Query, "Data")
 	})
 
 	t.Run("generate skip client", func(t *testing.T) {
@@ -138,7 +138,7 @@ func newMockRemoteServer(t *testing.T, response interface{}) (mock *mockRemoteSe
 	t.Helper()
 
 	mock = &mockRemoteServer{
-		Server: httptest.NewServer(http.HandlerFunc(func(writer http.ResponseWriter, req *http.Request) {
+		Server: httptest.NewServer(http.HandlerFunc(func(rw http.ResponseWriter, req *http.Request) {
 			var err error
 			mock.body, err = ioutil.ReadAll(req.Body)
 			require.NoError(t, err)
@@ -154,7 +154,7 @@ func newMockRemoteServer(t *testing.T, response interface{}) (mock *mockRemoteSe
 				require.NoError(t, err)
 			}
 
-			_, err = writer.Write(responseBody)
+			_, err = rw.Write(responseBody)
 			require.NoError(t, err)
 		})),
 	}
diff --git a/example/annict/gen/client.go b/example/annict/gen/client.go
index e422aeb..b18ca69 100644
--- a/example/annict/gen/client.go
+++ b/example/annict/gen/client.go
@@ -1,4 +1,4 @@
-// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.
+// Code generated by github.com/TripleMint/gqlgenc, DO NOT EDIT.
 
 package gen
 
@@ -7,7 +7,7 @@ import (
 	"net/http"
 	"time"
 
-	"github.com/Yamashou/gqlgenc/client"
+	"github.com/TripleMint/gqlgenc/client"
 )
 
 type Client struct {
diff --git a/example/annict/main.go b/example/annict/main.go
index e17dd99..83afb66 100644
--- a/example/annict/main.go
+++ b/example/annict/main.go
@@ -6,8 +6,8 @@ import (
 	"net/http"
 	"os"
 
-	"github.com/Yamashou/gqlgenc/client"
-	"github.com/Yamashou/gqlgenc/example/annict/gen"
+	"github.com/TripleMint/gqlgenc/client"
+	"github.com/TripleMint/gqlgenc/example/annict/gen"
 )
 
 func main() {
diff --git a/example/annictV2/gen/client.go b/example/annictV2/gen/client.go
index 370946a..d19bd2f 100644
--- a/example/annictV2/gen/client.go
+++ b/example/annictV2/gen/client.go
@@ -1,4 +1,4 @@
-// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.
+// Code generated by github.com/TripleMint/gqlgenc, DO NOT EDIT.
 
 package gen
 
@@ -7,7 +7,7 @@ import (
 	"net/http"
 	"time"
 
-	"github.com/Yamashou/gqlgenc/clientv2"
+	"github.com/TripleMint/gqlgenc/clientv2"
 )
 
 type Client struct {
diff --git a/example/annictV2/main.go b/example/annictV2/main.go
index 6a28efb..2836705 100644
--- a/example/annictV2/main.go
+++ b/example/annictV2/main.go
@@ -6,8 +6,8 @@ import (
 	"net/http"
 	"os"
 
-	"github.com/Yamashou/gqlgenc/clientv2"
-	"github.com/Yamashou/gqlgenc/example/annictV2/gen"
+	"github.com/TripleMint/gqlgenc/clientv2"
+	"github.com/TripleMint/gqlgenc/example/annictV2/gen"
 )
 
 func main() {
diff --git a/example/github/.gqlgenc.yml b/example/github/.gqlgenc.yml
index 05a7fd6..80df9e4 100644
--- a/example/github/.gqlgenc.yml
+++ b/example/github/.gqlgenc.yml
@@ -11,6 +11,3 @@ endpoint:
     Authorization: "Bearer ${GITHUB_TOKEN}" # public access token
 query:
   - "./query/*.graphql"
-generate:
-  clientV2: true
-  clientInterfaceName: "GithubGraphQLClient"
diff --git a/example/github/gen/client.go b/example/github/gen/client.go
index 2cb45d1..cb68934 100644
--- a/example/github/gen/client.go
+++ b/example/github/gen/client.go
@@ -1,4 +1,4 @@
-// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.
+// Code generated by github.com/TripleMint/gqlgenc, DO NOT EDIT.
 
 package gen
 
@@ -6,226 +6,185 @@ import (
 	"context"
 	"net/http"
 
-	"github.com/Yamashou/gqlgenc/clientv2"
+	"github.com/TripleMint/gqlgenc/client"
 )
 
-type GithubGraphQLClient interface {
-	GetUser(ctx context.Context, repositoryFirst int, languageFirst int, interceptors ...clientv2.RequestInterceptor) (*GetUser, error)
-	GetNode(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetNode, error)
-	AddStar(ctx context.Context, input AddStarInput, interceptors ...clientv2.RequestInterceptor) (*AddStar, error)
-	GetNode2(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetNode2, error)
-}
-
 type Client struct {
-	Client *clientv2.Client
+	Client *client.Client
 }
 
-func NewClient(cli *http.Client, baseURL string, interceptors ...clientv2.RequestInterceptor) GithubGraphQLClient {
-	return &Client{Client: clientv2.NewClient(cli, baseURL, interceptors...)}
+func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) *Client {
+	return &Client{Client: client.NewClient(cli, baseURL, options...)}
 }
 
 type Query struct {
-	CodeOfConduct                            *CodeOfConduct                     "json:\"codeOfConduct,omitempty\" graphql:\"codeOfConduct\""
-	CodesOfConduct                           []*CodeOfConduct                   "json:\"codesOfConduct,omitempty\" graphql:\"codesOfConduct\""
-	Enterprise                               *Enterprise                        "json:\"enterprise,omitempty\" graphql:\"enterprise\""
-	EnterpriseAdministratorInvitation        *EnterpriseAdministratorInvitation "json:\"enterpriseAdministratorInvitation,omitempty\" graphql:\"enterpriseAdministratorInvitation\""
-	EnterpriseAdministratorInvitationByToken *EnterpriseAdministratorInvitation "json:\"enterpriseAdministratorInvitationByToken,omitempty\" graphql:\"enterpriseAdministratorInvitationByToken\""
-	License                                  *License                           "json:\"license,omitempty\" graphql:\"license\""
+	CodeOfConduct                            *CodeOfConduct                     "json:\"codeOfConduct\" graphql:\"codeOfConduct\""
+	CodesOfConduct                           []*CodeOfConduct                   "json:\"codesOfConduct\" graphql:\"codesOfConduct\""
+	Enterprise                               *Enterprise                        "json:\"enterprise\" graphql:\"enterprise\""
+	EnterpriseAdministratorInvitation        *EnterpriseAdministratorInvitation "json:\"enterpriseAdministratorInvitation\" graphql:\"enterpriseAdministratorInvitation\""
+	EnterpriseAdministratorInvitationByToken *EnterpriseAdministratorInvitation "json:\"enterpriseAdministratorInvitationByToken\" graphql:\"enterpriseAdministratorInvitationByToken\""
+	License                                  *License                           "json:\"license\" graphql:\"license\""
 	Licenses                                 []*License                         "json:\"licenses\" graphql:\"licenses\""
 	MarketplaceCategories                    []*MarketplaceCategory             "json:\"marketplaceCategories\" graphql:\"marketplaceCategories\""
-	MarketplaceCategory                      *MarketplaceCategory               "json:\"marketplaceCategory,omitempty\" graphql:\"marketplaceCategory\""
-	MarketplaceListing                       *MarketplaceListing                "json:\"marketplaceListing,omitempty\" graphql:\"marketplaceListing\""
+	MarketplaceCategory                      *MarketplaceCategory               "json:\"marketplaceCategory\" graphql:\"marketplaceCategory\""
+	MarketplaceListing                       *MarketplaceListing                "json:\"marketplaceListing\" graphql:\"marketplaceListing\""
 	MarketplaceListings                      MarketplaceListingConnection       "json:\"marketplaceListings\" graphql:\"marketplaceListings\""
 	Meta                                     GitHubMetadata                     "json:\"meta\" graphql:\"meta\""
-	Node                                     Node                               "json:\"node,omitempty\" graphql:\"node\""
+	Node                                     Node                               "json:\"node\" graphql:\"node\""
 	Nodes                                    []Node                             "json:\"nodes\" graphql:\"nodes\""
-	Organization                             *Organization                      "json:\"organization,omitempty\" graphql:\"organization\""
-	RateLimit                                *RateLimit                         "json:\"rateLimit,omitempty\" graphql:\"rateLimit\""
+	Organization                             *Organization                      "json:\"organization\" graphql:\"organization\""
+	RateLimit                                *RateLimit                         "json:\"rateLimit\" graphql:\"rateLimit\""
 	Relay                                    *Query                             "json:\"relay\" graphql:\"relay\""
-	Repository                               *Repository                        "json:\"repository,omitempty\" graphql:\"repository\""
-	RepositoryOwner                          RepositoryOwner                    "json:\"repositoryOwner,omitempty\" graphql:\"repositoryOwner\""
-	Resource                                 UniformResourceLocatable           "json:\"resource,omitempty\" graphql:\"resource\""
+	Repository                               *Repository                        "json:\"repository\" graphql:\"repository\""
+	RepositoryOwner                          RepositoryOwner                    "json:\"repositoryOwner\" graphql:\"repositoryOwner\""
+	Resource                                 UniformResourceLocatable           "json:\"resource\" graphql:\"resource\""
 	Search                                   SearchResultItemConnection         "json:\"search\" graphql:\"search\""
 	SecurityAdvisories                       SecurityAdvisoryConnection         "json:\"securityAdvisories\" graphql:\"securityAdvisories\""
-	SecurityAdvisory                         *SecurityAdvisory                  "json:\"securityAdvisory,omitempty\" graphql:\"securityAdvisory\""
+	SecurityAdvisory                         *SecurityAdvisory                  "json:\"securityAdvisory\" graphql:\"securityAdvisory\""
 	SecurityVulnerabilities                  SecurityVulnerabilityConnection    "json:\"securityVulnerabilities\" graphql:\"securityVulnerabilities\""
 	Sponsorables                             SponsorableItemConnection          "json:\"sponsorables\" graphql:\"sponsorables\""
-	Topic                                    *Topic                             "json:\"topic,omitempty\" graphql:\"topic\""
-	User                                     *User                              "json:\"user,omitempty\" graphql:\"user\""
+	SponsorsListing                          *SponsorsListing                   "json:\"sponsorsListing\" graphql:\"sponsorsListing\""
+	Topic                                    *Topic                             "json:\"topic\" graphql:\"topic\""
+	User                                     *User                              "json:\"user\" graphql:\"user\""
 	Viewer                                   User                               "json:\"viewer\" graphql:\"viewer\""
 }
 
 type Mutation struct {
-	AbortQueuedMigrations                                       *AbortQueuedMigrationsPayload                                       "json:\"abortQueuedMigrations,omitempty\" graphql:\"abortQueuedMigrations\""
-	AcceptEnterpriseAdministratorInvitation                     *AcceptEnterpriseAdministratorInvitationPayload                     "json:\"acceptEnterpriseAdministratorInvitation,omitempty\" graphql:\"acceptEnterpriseAdministratorInvitation\""
-	AcceptTopicSuggestion                                       *AcceptTopicSuggestionPayload                                       "json:\"acceptTopicSuggestion,omitempty\" graphql:\"acceptTopicSuggestion\""
-	AddAssigneesToAssignable                                    *AddAssigneesToAssignablePayload                                    "json:\"addAssigneesToAssignable,omitempty\" graphql:\"addAssigneesToAssignable\""
-	AddComment                                                  *AddCommentPayload                                                  "json:\"addComment,omitempty\" graphql:\"addComment\""
-	AddDiscussionComment                                        *AddDiscussionCommentPayload                                        "json:\"addDiscussionComment,omitempty\" graphql:\"addDiscussionComment\""
-	AddEnterpriseSupportEntitlement                             *AddEnterpriseSupportEntitlementPayload                             "json:\"addEnterpriseSupportEntitlement,omitempty\" graphql:\"addEnterpriseSupportEntitlement\""
-	AddLabelsToLabelable                                        *AddLabelsToLabelablePayload                                        "json:\"addLabelsToLabelable,omitempty\" graphql:\"addLabelsToLabelable\""
-	AddProjectCard                                              *AddProjectCardPayload                                              "json:\"addProjectCard,omitempty\" graphql:\"addProjectCard\""
-	AddProjectColumn                                            *AddProjectColumnPayload                                            "json:\"addProjectColumn,omitempty\" graphql:\"addProjectColumn\""
-	AddProjectNextItem                                          *AddProjectNextItemPayload                                          "json:\"addProjectNextItem,omitempty\" graphql:\"addProjectNextItem\""
-	AddPullRequestReview                                        *AddPullRequestReviewPayload                                        "json:\"addPullRequestReview,omitempty\" graphql:\"addPullRequestReview\""
-	AddPullRequestReviewComment                                 *AddPullRequestReviewCommentPayload                                 "json:\"addPullRequestReviewComment,omitempty\" graphql:\"addPullRequestReviewComment\""
-	AddPullRequestReviewThread                                  *AddPullRequestReviewThreadPayload                                  "json:\"addPullRequestReviewThread,omitempty\" graphql:\"addPullRequestReviewThread\""
-	AddReaction                                                 *AddReactionPayload                                                 "json:\"addReaction,omitempty\" graphql:\"addReaction\""
-	AddStar                                                     *AddStarPayload                                                     "json:\"addStar,omitempty\" graphql:\"addStar\""
-	AddUpvote                                                   *AddUpvotePayload                                                   "json:\"addUpvote,omitempty\" graphql:\"addUpvote\""
-	AddVerifiableDomain                                         *AddVerifiableDomainPayload                                         "json:\"addVerifiableDomain,omitempty\" graphql:\"addVerifiableDomain\""
-	ApproveDeployments                                          *ApproveDeploymentsPayload                                          "json:\"approveDeployments,omitempty\" graphql:\"approveDeployments\""
-	ApproveVerifiableDomain                                     *ApproveVerifiableDomainPayload                                     "json:\"approveVerifiableDomain,omitempty\" graphql:\"approveVerifiableDomain\""
-	ArchiveRepository                                           *ArchiveRepositoryPayload                                           "json:\"archiveRepository,omitempty\" graphql:\"archiveRepository\""
-	CancelEnterpriseAdminInvitation                             *CancelEnterpriseAdminInvitationPayload                             "json:\"cancelEnterpriseAdminInvitation,omitempty\" graphql:\"cancelEnterpriseAdminInvitation\""
-	CancelSponsorship                                           *CancelSponsorshipPayload                                           "json:\"cancelSponsorship,omitempty\" graphql:\"cancelSponsorship\""
-	ChangeUserStatus                                            *ChangeUserStatusPayload                                            "json:\"changeUserStatus,omitempty\" graphql:\"changeUserStatus\""
-	ClearLabelsFromLabelable                                    *ClearLabelsFromLabelablePayload                                    "json:\"clearLabelsFromLabelable,omitempty\" graphql:\"clearLabelsFromLabelable\""
-	CloneProject                                                *CloneProjectPayload                                                "json:\"cloneProject,omitempty\" graphql:\"cloneProject\""
-	CloneTemplateRepository                                     *CloneTemplateRepositoryPayload                                     "json:\"cloneTemplateRepository,omitempty\" graphql:\"cloneTemplateRepository\""
-	CloseIssue                                                  *CloseIssuePayload                                                  "json:\"closeIssue,omitempty\" graphql:\"closeIssue\""
-	ClosePullRequest                                            *ClosePullRequestPayload                                            "json:\"closePullRequest,omitempty\" graphql:\"closePullRequest\""
-	ConvertProjectCardNoteToIssue                               *ConvertProjectCardNoteToIssuePayload                               "json:\"convertProjectCardNoteToIssue,omitempty\" graphql:\"convertProjectCardNoteToIssue\""
-	ConvertPullRequestToDraft                                   *ConvertPullRequestToDraftPayload                                   "json:\"convertPullRequestToDraft,omitempty\" graphql:\"convertPullRequestToDraft\""
-	CreateBranchProtectionRule                                  *CreateBranchProtectionRulePayload                                  "json:\"createBranchProtectionRule,omitempty\" graphql:\"createBranchProtectionRule\""
-	CreateCheckRun                                              *CreateCheckRunPayload                                              "json:\"createCheckRun,omitempty\" graphql:\"createCheckRun\""
-	CreateCheckSuite                                            *CreateCheckSuitePayload                                            "json:\"createCheckSuite,omitempty\" graphql:\"createCheckSuite\""
-	CreateCommitOnBranch                                        *CreateCommitOnBranchPayload                                        "json:\"createCommitOnBranch,omitempty\" graphql:\"createCommitOnBranch\""
-	CreateDiscussion                                            *CreateDiscussionPayload                                            "json:\"createDiscussion,omitempty\" graphql:\"createDiscussion\""
-	CreateEnterpriseOrganization                                *CreateEnterpriseOrganizationPayload                                "json:\"createEnterpriseOrganization,omitempty\" graphql:\"createEnterpriseOrganization\""
-	CreateEnvironment                                           *CreateEnvironmentPayload                                           "json:\"createEnvironment,omitempty\" graphql:\"createEnvironment\""
-	CreateIPAllowListEntry                                      *CreateIPAllowListEntryPayload                                      "json:\"createIpAllowListEntry,omitempty\" graphql:\"createIpAllowListEntry\""
-	CreateIssue                                                 *CreateIssuePayload                                                 "json:\"createIssue,omitempty\" graphql:\"createIssue\""
-	CreateMigrationSource                                       *CreateMigrationSourcePayload                                       "json:\"createMigrationSource,omitempty\" graphql:\"createMigrationSource\""
-	CreateProject                                               *CreateProjectPayload                                               "json:\"createProject,omitempty\" graphql:\"createProject\""
-	CreatePullRequest                                           *CreatePullRequestPayload                                           "json:\"createPullRequest,omitempty\" graphql:\"createPullRequest\""
-	CreateRef                                                   *CreateRefPayload                                                   "json:\"createRef,omitempty\" graphql:\"createRef\""
-	CreateRepository                                            *CreateRepositoryPayload                                            "json:\"createRepository,omitempty\" graphql:\"createRepository\""
-	CreateSponsorship                                           *CreateSponsorshipPayload                                           "json:\"createSponsorship,omitempty\" graphql:\"createSponsorship\""
-	CreateTeamDiscussion                                        *CreateTeamDiscussionPayload                                        "json:\"createTeamDiscussion,omitempty\" graphql:\"createTeamDiscussion\""
-	CreateTeamDiscussionComment                                 *CreateTeamDiscussionCommentPayload                                 "json:\"createTeamDiscussionComment,omitempty\" graphql:\"createTeamDiscussionComment\""
-	DeclineTopicSuggestion                                      *DeclineTopicSuggestionPayload                                      "json:\"declineTopicSuggestion,omitempty\" graphql:\"declineTopicSuggestion\""
-	DeleteBranchProtectionRule                                  *DeleteBranchProtectionRulePayload                                  "json:\"deleteBranchProtectionRule,omitempty\" graphql:\"deleteBranchProtectionRule\""
-	DeleteDeployment                                            *DeleteDeploymentPayload                                            "json:\"deleteDeployment,omitempty\" graphql:\"deleteDeployment\""
-	DeleteDiscussion                                            *DeleteDiscussionPayload                                            "json:\"deleteDiscussion,omitempty\" graphql:\"deleteDiscussion\""
-	DeleteDiscussionComment                                     *DeleteDiscussionCommentPayload                                     "json:\"deleteDiscussionComment,omitempty\" graphql:\"deleteDiscussionComment\""
-	DeleteEnvironment                                           *DeleteEnvironmentPayload                                           "json:\"deleteEnvironment,omitempty\" graphql:\"deleteEnvironment\""
-	DeleteIPAllowListEntry                                      *DeleteIPAllowListEntryPayload                                      "json:\"deleteIpAllowListEntry,omitempty\" graphql:\"deleteIpAllowListEntry\""
-	DeleteIssue                                                 *DeleteIssuePayload                                                 "json:\"deleteIssue,omitempty\" graphql:\"deleteIssue\""
-	DeleteIssueComment                                          *DeleteIssueCommentPayload                                          "json:\"deleteIssueComment,omitempty\" graphql:\"deleteIssueComment\""
-	DeleteProject                                               *DeleteProjectPayload                                               "json:\"deleteProject,omitempty\" graphql:\"deleteProject\""
-	DeleteProjectCard                                           *DeleteProjectCardPayload                                           "json:\"deleteProjectCard,omitempty\" graphql:\"deleteProjectCard\""
-	DeleteProjectColumn                                         *DeleteProjectColumnPayload                                         "json:\"deleteProjectColumn,omitempty\" graphql:\"deleteProjectColumn\""
-	DeleteProjectNextItem                                       *DeleteProjectNextItemPayload                                       "json:\"deleteProjectNextItem,omitempty\" graphql:\"deleteProjectNextItem\""
-	DeletePullRequestReview                                     *DeletePullRequestReviewPayload                                     "json:\"deletePullRequestReview,omitempty\" graphql:\"deletePullRequestReview\""
-	DeletePullRequestReviewComment                              *DeletePullRequestReviewCommentPayload                              "json:\"deletePullRequestReviewComment,omitempty\" graphql:\"deletePullRequestReviewComment\""
-	DeleteRef                                                   *DeleteRefPayload                                                   "json:\"deleteRef,omitempty\" graphql:\"deleteRef\""
-	DeleteTeamDiscussion                                        *DeleteTeamDiscussionPayload                                        "json:\"deleteTeamDiscussion,omitempty\" graphql:\"deleteTeamDiscussion\""
-	DeleteTeamDiscussionComment                                 *DeleteTeamDiscussionCommentPayload                                 "json:\"deleteTeamDiscussionComment,omitempty\" graphql:\"deleteTeamDiscussionComment\""
-	DeleteVerifiableDomain                                      *DeleteVerifiableDomainPayload                                      "json:\"deleteVerifiableDomain,omitempty\" graphql:\"deleteVerifiableDomain\""
-	DisablePullRequestAutoMerge                                 *DisablePullRequestAutoMergePayload                                 "json:\"disablePullRequestAutoMerge,omitempty\" graphql:\"disablePullRequestAutoMerge\""
-	DismissPullRequestReview                                    *DismissPullRequestReviewPayload                                    "json:\"dismissPullRequestReview,omitempty\" graphql:\"dismissPullRequestReview\""
-	DismissRepositoryVulnerabilityAlert                         *DismissRepositoryVulnerabilityAlertPayload                         "json:\"dismissRepositoryVulnerabilityAlert,omitempty\" graphql:\"dismissRepositoryVulnerabilityAlert\""
-	EnablePullRequestAutoMerge                                  *EnablePullRequestAutoMergePayload                                  "json:\"enablePullRequestAutoMerge,omitempty\" graphql:\"enablePullRequestAutoMerge\""
-	FollowUser                                                  *FollowUserPayload                                                  "json:\"followUser,omitempty\" graphql:\"followUser\""
-	GrantEnterpriseOrganizationsMigratorRole                    *GrantEnterpriseOrganizationsMigratorRolePayload                    "json:\"grantEnterpriseOrganizationsMigratorRole,omitempty\" graphql:\"grantEnterpriseOrganizationsMigratorRole\""
-	GrantMigratorRole                                           *GrantMigratorRolePayload                                           "json:\"grantMigratorRole,omitempty\" graphql:\"grantMigratorRole\""
-	InviteEnterpriseAdmin                                       *InviteEnterpriseAdminPayload                                       "json:\"inviteEnterpriseAdmin,omitempty\" graphql:\"inviteEnterpriseAdmin\""
-	LinkRepositoryToProject                                     *LinkRepositoryToProjectPayload                                     "json:\"linkRepositoryToProject,omitempty\" graphql:\"linkRepositoryToProject\""
-	LockLockable                                                *LockLockablePayload                                                "json:\"lockLockable,omitempty\" graphql:\"lockLockable\""
-	MarkDiscussionCommentAsAnswer                               *MarkDiscussionCommentAsAnswerPayload                               "json:\"markDiscussionCommentAsAnswer,omitempty\" graphql:\"markDiscussionCommentAsAnswer\""
-	MarkFileAsViewed                                            *MarkFileAsViewedPayload                                            "json:\"markFileAsViewed,omitempty\" graphql:\"markFileAsViewed\""
-	MarkPullRequestReadyForReview                               *MarkPullRequestReadyForReviewPayload                               "json:\"markPullRequestReadyForReview,omitempty\" graphql:\"markPullRequestReadyForReview\""
-	MergeBranch                                                 *MergeBranchPayload                                                 "json:\"mergeBranch,omitempty\" graphql:\"mergeBranch\""
-	MergePullRequest                                            *MergePullRequestPayload                                            "json:\"mergePullRequest,omitempty\" graphql:\"mergePullRequest\""
-	MinimizeComment                                             *MinimizeCommentPayload                                             "json:\"minimizeComment,omitempty\" graphql:\"minimizeComment\""
-	MoveProjectCard                                             *MoveProjectCardPayload                                             "json:\"moveProjectCard,omitempty\" graphql:\"moveProjectCard\""
-	MoveProjectColumn                                           *MoveProjectColumnPayload                                           "json:\"moveProjectColumn,omitempty\" graphql:\"moveProjectColumn\""
-	PinIssue                                                    *PinIssuePayload                                                    "json:\"pinIssue,omitempty\" graphql:\"pinIssue\""
-	RegenerateEnterpriseIdentityProviderRecoveryCodes           *RegenerateEnterpriseIdentityProviderRecoveryCodesPayload           "json:\"regenerateEnterpriseIdentityProviderRecoveryCodes,omitempty\" graphql:\"regenerateEnterpriseIdentityProviderRecoveryCodes\""
-	RegenerateVerifiableDomainToken                             *RegenerateVerifiableDomainTokenPayload                             "json:\"regenerateVerifiableDomainToken,omitempty\" graphql:\"regenerateVerifiableDomainToken\""
-	RejectDeployments                                           *RejectDeploymentsPayload                                           "json:\"rejectDeployments,omitempty\" graphql:\"rejectDeployments\""
-	RemoveAssigneesFromAssignable                               *RemoveAssigneesFromAssignablePayload                               "json:\"removeAssigneesFromAssignable,omitempty\" graphql:\"removeAssigneesFromAssignable\""
-	RemoveEnterpriseAdmin                                       *RemoveEnterpriseAdminPayload                                       "json:\"removeEnterpriseAdmin,omitempty\" graphql:\"removeEnterpriseAdmin\""
-	RemoveEnterpriseIdentityProvider                            *RemoveEnterpriseIdentityProviderPayload                            "json:\"removeEnterpriseIdentityProvider,omitempty\" graphql:\"removeEnterpriseIdentityProvider\""
-	RemoveEnterpriseOrganization                                *RemoveEnterpriseOrganizationPayload                                "json:\"removeEnterpriseOrganization,omitempty\" graphql:\"removeEnterpriseOrganization\""
-	RemoveEnterpriseSupportEntitlement                          *RemoveEnterpriseSupportEntitlementPayload                          "json:\"removeEnterpriseSupportEntitlement,omitempty\" graphql:\"removeEnterpriseSupportEntitlement\""
-	RemoveLabelsFromLabelable                                   *RemoveLabelsFromLabelablePayload                                   "json:\"removeLabelsFromLabelable,omitempty\" graphql:\"removeLabelsFromLabelable\""
-	RemoveOutsideCollaborator                                   *RemoveOutsideCollaboratorPayload                                   "json:\"removeOutsideCollaborator,omitempty\" graphql:\"removeOutsideCollaborator\""
-	RemoveReaction                                              *RemoveReactionPayload                                              "json:\"removeReaction,omitempty\" graphql:\"removeReaction\""
-	RemoveStar                                                  *RemoveStarPayload                                                  "json:\"removeStar,omitempty\" graphql:\"removeStar\""
-	RemoveUpvote                                                *RemoveUpvotePayload                                                "json:\"removeUpvote,omitempty\" graphql:\"removeUpvote\""
-	ReopenIssue                                                 *ReopenIssuePayload                                                 "json:\"reopenIssue,omitempty\" graphql:\"reopenIssue\""
-	ReopenPullRequest                                           *ReopenPullRequestPayload                                           "json:\"reopenPullRequest,omitempty\" graphql:\"reopenPullRequest\""
-	RequestReviews                                              *RequestReviewsPayload                                              "json:\"requestReviews,omitempty\" graphql:\"requestReviews\""
-	RerequestCheckSuite                                         *RerequestCheckSuitePayload                                         "json:\"rerequestCheckSuite,omitempty\" graphql:\"rerequestCheckSuite\""
-	ResolveReviewThread                                         *ResolveReviewThreadPayload                                         "json:\"resolveReviewThread,omitempty\" graphql:\"resolveReviewThread\""
-	RevokeEnterpriseOrganizationsMigratorRole                   *RevokeEnterpriseOrganizationsMigratorRolePayload                   "json:\"revokeEnterpriseOrganizationsMigratorRole,omitempty\" graphql:\"revokeEnterpriseOrganizationsMigratorRole\""
-	RevokeMigratorRole                                          *RevokeMigratorRolePayload                                          "json:\"revokeMigratorRole,omitempty\" graphql:\"revokeMigratorRole\""
-	SetEnterpriseIdentityProvider                               *SetEnterpriseIdentityProviderPayload                               "json:\"setEnterpriseIdentityProvider,omitempty\" graphql:\"setEnterpriseIdentityProvider\""
-	SetOrganizationInteractionLimit                             *SetOrganizationInteractionLimitPayload                             "json:\"setOrganizationInteractionLimit,omitempty\" graphql:\"setOrganizationInteractionLimit\""
-	SetRepositoryInteractionLimit                               *SetRepositoryInteractionLimitPayload                               "json:\"setRepositoryInteractionLimit,omitempty\" graphql:\"setRepositoryInteractionLimit\""
-	SetUserInteractionLimit                                     *SetUserInteractionLimitPayload                                     "json:\"setUserInteractionLimit,omitempty\" graphql:\"setUserInteractionLimit\""
-	StartRepositoryMigration                                    *StartRepositoryMigrationPayload                                    "json:\"startRepositoryMigration,omitempty\" graphql:\"startRepositoryMigration\""
-	SubmitPullRequestReview                                     *SubmitPullRequestReviewPayload                                     "json:\"submitPullRequestReview,omitempty\" graphql:\"submitPullRequestReview\""
-	TransferIssue                                               *TransferIssuePayload                                               "json:\"transferIssue,omitempty\" graphql:\"transferIssue\""
-	UnarchiveRepository                                         *UnarchiveRepositoryPayload                                         "json:\"unarchiveRepository,omitempty\" graphql:\"unarchiveRepository\""
-	UnfollowUser                                                *UnfollowUserPayload                                                "json:\"unfollowUser,omitempty\" graphql:\"unfollowUser\""
-	UnlinkRepositoryFromProject                                 *UnlinkRepositoryFromProjectPayload                                 "json:\"unlinkRepositoryFromProject,omitempty\" graphql:\"unlinkRepositoryFromProject\""
-	UnlockLockable                                              *UnlockLockablePayload                                              "json:\"unlockLockable,omitempty\" graphql:\"unlockLockable\""
-	UnmarkDiscussionCommentAsAnswer                             *UnmarkDiscussionCommentAsAnswerPayload                             "json:\"unmarkDiscussionCommentAsAnswer,omitempty\" graphql:\"unmarkDiscussionCommentAsAnswer\""
-	UnmarkFileAsViewed                                          *UnmarkFileAsViewedPayload                                          "json:\"unmarkFileAsViewed,omitempty\" graphql:\"unmarkFileAsViewed\""
-	UnmarkIssueAsDuplicate                                      *UnmarkIssueAsDuplicatePayload                                      "json:\"unmarkIssueAsDuplicate,omitempty\" graphql:\"unmarkIssueAsDuplicate\""
-	UnminimizeComment                                           *UnminimizeCommentPayload                                           "json:\"unminimizeComment,omitempty\" graphql:\"unminimizeComment\""
-	UnpinIssue                                                  *UnpinIssuePayload                                                  "json:\"unpinIssue,omitempty\" graphql:\"unpinIssue\""
-	UnresolveReviewThread                                       *UnresolveReviewThreadPayload                                       "json:\"unresolveReviewThread,omitempty\" graphql:\"unresolveReviewThread\""
-	UpdateBranchProtectionRule                                  *UpdateBranchProtectionRulePayload                                  "json:\"updateBranchProtectionRule,omitempty\" graphql:\"updateBranchProtectionRule\""
-	UpdateCheckRun                                              *UpdateCheckRunPayload                                              "json:\"updateCheckRun,omitempty\" graphql:\"updateCheckRun\""
-	UpdateCheckSuitePreferences                                 *UpdateCheckSuitePreferencesPayload                                 "json:\"updateCheckSuitePreferences,omitempty\" graphql:\"updateCheckSuitePreferences\""
-	UpdateDiscussion                                            *UpdateDiscussionPayload                                            "json:\"updateDiscussion,omitempty\" graphql:\"updateDiscussion\""
-	UpdateDiscussionComment                                     *UpdateDiscussionCommentPayload                                     "json:\"updateDiscussionComment,omitempty\" graphql:\"updateDiscussionComment\""
-	UpdateEnterpriseAdministratorRole                           *UpdateEnterpriseAdministratorRolePayload                           "json:\"updateEnterpriseAdministratorRole,omitempty\" graphql:\"updateEnterpriseAdministratorRole\""
-	UpdateEnterpriseAllowPrivateRepositoryForkingSetting        *UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload        "json:\"updateEnterpriseAllowPrivateRepositoryForkingSetting,omitempty\" graphql:\"updateEnterpriseAllowPrivateRepositoryForkingSetting\""
-	UpdateEnterpriseDefaultRepositoryPermissionSetting          *UpdateEnterpriseDefaultRepositoryPermissionSettingPayload          "json:\"updateEnterpriseDefaultRepositoryPermissionSetting,omitempty\" graphql:\"updateEnterpriseDefaultRepositoryPermissionSetting\""
-	UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting *UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload "json:\"updateEnterpriseMembersCanChangeRepositoryVisibilitySetting,omitempty\" graphql:\"updateEnterpriseMembersCanChangeRepositoryVisibilitySetting\""
-	UpdateEnterpriseMembersCanCreateRepositoriesSetting         *UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload         "json:\"updateEnterpriseMembersCanCreateRepositoriesSetting,omitempty\" graphql:\"updateEnterpriseMembersCanCreateRepositoriesSetting\""
-	UpdateEnterpriseMembersCanDeleteIssuesSetting               *UpdateEnterpriseMembersCanDeleteIssuesSettingPayload               "json:\"updateEnterpriseMembersCanDeleteIssuesSetting,omitempty\" graphql:\"updateEnterpriseMembersCanDeleteIssuesSetting\""
-	UpdateEnterpriseMembersCanDeleteRepositoriesSetting         *UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload         "json:\"updateEnterpriseMembersCanDeleteRepositoriesSetting,omitempty\" graphql:\"updateEnterpriseMembersCanDeleteRepositoriesSetting\""
-	UpdateEnterpriseMembersCanInviteCollaboratorsSetting        *UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload        "json:\"updateEnterpriseMembersCanInviteCollaboratorsSetting,omitempty\" graphql:\"updateEnterpriseMembersCanInviteCollaboratorsSetting\""
-	UpdateEnterpriseMembersCanMakePurchasesSetting              *UpdateEnterpriseMembersCanMakePurchasesSettingPayload              "json:\"updateEnterpriseMembersCanMakePurchasesSetting,omitempty\" graphql:\"updateEnterpriseMembersCanMakePurchasesSetting\""
-	UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting    *UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload    "json:\"updateEnterpriseMembersCanUpdateProtectedBranchesSetting,omitempty\" graphql:\"updateEnterpriseMembersCanUpdateProtectedBranchesSetting\""
-	UpdateEnterpriseMembersCanViewDependencyInsightsSetting     *UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload     "json:\"updateEnterpriseMembersCanViewDependencyInsightsSetting,omitempty\" graphql:\"updateEnterpriseMembersCanViewDependencyInsightsSetting\""
-	UpdateEnterpriseOrganizationProjectsSetting                 *UpdateEnterpriseOrganizationProjectsSettingPayload                 "json:\"updateEnterpriseOrganizationProjectsSetting,omitempty\" graphql:\"updateEnterpriseOrganizationProjectsSetting\""
-	UpdateEnterpriseOwnerOrganizationRole                       *UpdateEnterpriseOwnerOrganizationRolePayload                       "json:\"updateEnterpriseOwnerOrganizationRole,omitempty\" graphql:\"updateEnterpriseOwnerOrganizationRole\""
-	UpdateEnterpriseProfile                                     *UpdateEnterpriseProfilePayload                                     "json:\"updateEnterpriseProfile,omitempty\" graphql:\"updateEnterpriseProfile\""
-	UpdateEnterpriseRepositoryProjectsSetting                   *UpdateEnterpriseRepositoryProjectsSettingPayload                   "json:\"updateEnterpriseRepositoryProjectsSetting,omitempty\" graphql:\"updateEnterpriseRepositoryProjectsSetting\""
-	UpdateEnterpriseTeamDiscussionsSetting                      *UpdateEnterpriseTeamDiscussionsSettingPayload                      "json:\"updateEnterpriseTeamDiscussionsSetting,omitempty\" graphql:\"updateEnterpriseTeamDiscussionsSetting\""
-	UpdateEnterpriseTwoFactorAuthenticationRequiredSetting      *UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload      "json:\"updateEnterpriseTwoFactorAuthenticationRequiredSetting,omitempty\" graphql:\"updateEnterpriseTwoFactorAuthenticationRequiredSetting\""
-	UpdateEnvironment                                           *UpdateEnvironmentPayload                                           "json:\"updateEnvironment,omitempty\" graphql:\"updateEnvironment\""
-	UpdateIPAllowListEnabledSetting                             *UpdateIPAllowListEnabledSettingPayload                             "json:\"updateIpAllowListEnabledSetting,omitempty\" graphql:\"updateIpAllowListEnabledSetting\""
-	UpdateIPAllowListEntry                                      *UpdateIPAllowListEntryPayload                                      "json:\"updateIpAllowListEntry,omitempty\" graphql:\"updateIpAllowListEntry\""
-	UpdateIPAllowListForInstalledAppsEnabledSetting             *UpdateIPAllowListForInstalledAppsEnabledSettingPayload             "json:\"updateIpAllowListForInstalledAppsEnabledSetting,omitempty\" graphql:\"updateIpAllowListForInstalledAppsEnabledSetting\""
-	UpdateIssue                                                 *UpdateIssuePayload                                                 "json:\"updateIssue,omitempty\" graphql:\"updateIssue\""
-	UpdateIssueComment                                          *UpdateIssueCommentPayload                                          "json:\"updateIssueComment,omitempty\" graphql:\"updateIssueComment\""
-	UpdateNotificationRestrictionSetting                        *UpdateNotificationRestrictionSettingPayload                        "json:\"updateNotificationRestrictionSetting,omitempty\" graphql:\"updateNotificationRestrictionSetting\""
-	UpdateOrganizationAllowPrivateRepositoryForkingSetting      *UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload      "json:\"updateOrganizationAllowPrivateRepositoryForkingSetting,omitempty\" graphql:\"updateOrganizationAllowPrivateRepositoryForkingSetting\""
-	UpdateProject                                               *UpdateProjectPayload                                               "json:\"updateProject,omitempty\" graphql:\"updateProject\""
-	UpdateProjectCard                                           *UpdateProjectCardPayload                                           "json:\"updateProjectCard,omitempty\" graphql:\"updateProjectCard\""
-	UpdateProjectColumn                                         *UpdateProjectColumnPayload                                         "json:\"updateProjectColumn,omitempty\" graphql:\"updateProjectColumn\""
-	UpdateProjectNext                                           *UpdateProjectNextPayload                                           "json:\"updateProjectNext,omitempty\" graphql:\"updateProjectNext\""
-	UpdateProjectNextItemField                                  *UpdateProjectNextItemFieldPayload                                  "json:\"updateProjectNextItemField,omitempty\" graphql:\"updateProjectNextItemField\""
-	UpdatePullRequest                                           *UpdatePullRequestPayload                                           "json:\"updatePullRequest,omitempty\" graphql:\"updatePullRequest\""
-	UpdatePullRequestBranch                                     *UpdatePullRequestBranchPayload                                     "json:\"updatePullRequestBranch,omitempty\" graphql:\"updatePullRequestBranch\""
-	UpdatePullRequestReview                                     *UpdatePullRequestReviewPayload                                     "json:\"updatePullRequestReview,omitempty\" graphql:\"updatePullRequestReview\""
-	UpdatePullRequestReviewComment                              *UpdatePullRequestReviewCommentPayload                              "json:\"updatePullRequestReviewComment,omitempty\" graphql:\"updatePullRequestReviewComment\""
-	UpdateRef                                                   *UpdateRefPayload                                                   "json:\"updateRef,omitempty\" graphql:\"updateRef\""
-	UpdateRepository                                            *UpdateRepositoryPayload                                            "json:\"updateRepository,omitempty\" graphql:\"updateRepository\""
-	UpdateSponsorshipPreferences                                *UpdateSponsorshipPreferencesPayload                                "json:\"updateSponsorshipPreferences,omitempty\" graphql:\"updateSponsorshipPreferences\""
-	UpdateSubscription                                          *UpdateSubscriptionPayload                                          "json:\"updateSubscription,omitempty\" graphql:\"updateSubscription\""
-	UpdateTeamDiscussion                                        *UpdateTeamDiscussionPayload                                        "json:\"updateTeamDiscussion,omitempty\" graphql:\"updateTeamDiscussion\""
-	UpdateTeamDiscussionComment                                 *UpdateTeamDiscussionCommentPayload                                 "json:\"updateTeamDiscussionComment,omitempty\" graphql:\"updateTeamDiscussionComment\""
-	UpdateTopics                                                *UpdateTopicsPayload                                                "json:\"updateTopics,omitempty\" graphql:\"updateTopics\""
-	VerifyVerifiableDomain                                      *VerifyVerifiableDomainPayload                                      "json:\"verifyVerifiableDomain,omitempty\" graphql:\"verifyVerifiableDomain\""
+	AcceptEnterpriseAdministratorInvitation                     *AcceptEnterpriseAdministratorInvitationPayload                     "json:\"acceptEnterpriseAdministratorInvitation\" graphql:\"acceptEnterpriseAdministratorInvitation\""
+	AcceptTopicSuggestion                                       *AcceptTopicSuggestionPayload                                       "json:\"acceptTopicSuggestion\" graphql:\"acceptTopicSuggestion\""
+	AddAssigneesToAssignable                                    *AddAssigneesToAssignablePayload                                    "json:\"addAssigneesToAssignable\" graphql:\"addAssigneesToAssignable\""
+	AddComment                                                  *AddCommentPayload                                                  "json:\"addComment\" graphql:\"addComment\""
+	AddEnterpriseSupportEntitlement                             *AddEnterpriseSupportEntitlementPayload                             "json:\"addEnterpriseSupportEntitlement\" graphql:\"addEnterpriseSupportEntitlement\""
+	AddLabelsToLabelable                                        *AddLabelsToLabelablePayload                                        "json:\"addLabelsToLabelable\" graphql:\"addLabelsToLabelable\""
+	AddProjectCard                                              *AddProjectCardPayload                                              "json:\"addProjectCard\" graphql:\"addProjectCard\""
+	AddProjectColumn                                            *AddProjectColumnPayload                                            "json:\"addProjectColumn\" graphql:\"addProjectColumn\""
+	AddPullRequestReview                                        *AddPullRequestReviewPayload                                        "json:\"addPullRequestReview\" graphql:\"addPullRequestReview\""
+	AddPullRequestReviewComment                                 *AddPullRequestReviewCommentPayload                                 "json:\"addPullRequestReviewComment\" graphql:\"addPullRequestReviewComment\""
+	AddPullRequestReviewThread                                  *AddPullRequestReviewThreadPayload                                  "json:\"addPullRequestReviewThread\" graphql:\"addPullRequestReviewThread\""
+	AddReaction                                                 *AddReactionPayload                                                 "json:\"addReaction\" graphql:\"addReaction\""
+	AddStar                                                     *AddStarPayload                                                     "json:\"addStar\" graphql:\"addStar\""
+	AddVerifiableDomain                                         *AddVerifiableDomainPayload                                         "json:\"addVerifiableDomain\" graphql:\"addVerifiableDomain\""
+	ApproveVerifiableDomain                                     *ApproveVerifiableDomainPayload                                     "json:\"approveVerifiableDomain\" graphql:\"approveVerifiableDomain\""
+	ArchiveRepository                                           *ArchiveRepositoryPayload                                           "json:\"archiveRepository\" graphql:\"archiveRepository\""
+	CancelEnterpriseAdminInvitation                             *CancelEnterpriseAdminInvitationPayload                             "json:\"cancelEnterpriseAdminInvitation\" graphql:\"cancelEnterpriseAdminInvitation\""
+	ChangeUserStatus                                            *ChangeUserStatusPayload                                            "json:\"changeUserStatus\" graphql:\"changeUserStatus\""
+	ClearLabelsFromLabelable                                    *ClearLabelsFromLabelablePayload                                    "json:\"clearLabelsFromLabelable\" graphql:\"clearLabelsFromLabelable\""
+	CloneProject                                                *CloneProjectPayload                                                "json:\"cloneProject\" graphql:\"cloneProject\""
+	CloneTemplateRepository                                     *CloneTemplateRepositoryPayload                                     "json:\"cloneTemplateRepository\" graphql:\"cloneTemplateRepository\""
+	CloseIssue                                                  *CloseIssuePayload                                                  "json:\"closeIssue\" graphql:\"closeIssue\""
+	ClosePullRequest                                            *ClosePullRequestPayload                                            "json:\"closePullRequest\" graphql:\"closePullRequest\""
+	ConvertProjectCardNoteToIssue                               *ConvertProjectCardNoteToIssuePayload                               "json:\"convertProjectCardNoteToIssue\" graphql:\"convertProjectCardNoteToIssue\""
+	ConvertPullRequestToDraft                                   *ConvertPullRequestToDraftPayload                                   "json:\"convertPullRequestToDraft\" graphql:\"convertPullRequestToDraft\""
+	CreateBranchProtectionRule                                  *CreateBranchProtectionRulePayload                                  "json:\"createBranchProtectionRule\" graphql:\"createBranchProtectionRule\""
+	CreateCheckRun                                              *CreateCheckRunPayload                                              "json:\"createCheckRun\" graphql:\"createCheckRun\""
+	CreateCheckSuite                                            *CreateCheckSuitePayload                                            "json:\"createCheckSuite\" graphql:\"createCheckSuite\""
+	CreateEnterpriseOrganization                                *CreateEnterpriseOrganizationPayload                                "json:\"createEnterpriseOrganization\" graphql:\"createEnterpriseOrganization\""
+	CreateIPAllowListEntry                                      *CreateIPAllowListEntryPayload                                      "json:\"createIpAllowListEntry\" graphql:\"createIpAllowListEntry\""
+	CreateIssue                                                 *CreateIssuePayload                                                 "json:\"createIssue\" graphql:\"createIssue\""
+	CreateProject                                               *CreateProjectPayload                                               "json:\"createProject\" graphql:\"createProject\""
+	CreatePullRequest                                           *CreatePullRequestPayload                                           "json:\"createPullRequest\" graphql:\"createPullRequest\""
+	CreateRef                                                   *CreateRefPayload                                                   "json:\"createRef\" graphql:\"createRef\""
+	CreateRepository                                            *CreateRepositoryPayload                                            "json:\"createRepository\" graphql:\"createRepository\""
+	CreateTeamDiscussion                                        *CreateTeamDiscussionPayload                                        "json:\"createTeamDiscussion\" graphql:\"createTeamDiscussion\""
+	CreateTeamDiscussionComment                                 *CreateTeamDiscussionCommentPayload                                 "json:\"createTeamDiscussionComment\" graphql:\"createTeamDiscussionComment\""
+	DeclineTopicSuggestion                                      *DeclineTopicSuggestionPayload                                      "json:\"declineTopicSuggestion\" graphql:\"declineTopicSuggestion\""
+	DeleteBranchProtectionRule                                  *DeleteBranchProtectionRulePayload                                  "json:\"deleteBranchProtectionRule\" graphql:\"deleteBranchProtectionRule\""
+	DeleteDeployment                                            *DeleteDeploymentPayload                                            "json:\"deleteDeployment\" graphql:\"deleteDeployment\""
+	DeleteIPAllowListEntry                                      *DeleteIPAllowListEntryPayload                                      "json:\"deleteIpAllowListEntry\" graphql:\"deleteIpAllowListEntry\""
+	DeleteIssue                                                 *DeleteIssuePayload                                                 "json:\"deleteIssue\" graphql:\"deleteIssue\""
+	DeleteIssueComment                                          *DeleteIssueCommentPayload                                          "json:\"deleteIssueComment\" graphql:\"deleteIssueComment\""
+	DeleteProject                                               *DeleteProjectPayload                                               "json:\"deleteProject\" graphql:\"deleteProject\""
+	DeleteProjectCard                                           *DeleteProjectCardPayload                                           "json:\"deleteProjectCard\" graphql:\"deleteProjectCard\""
+	DeleteProjectColumn                                         *DeleteProjectColumnPayload                                         "json:\"deleteProjectColumn\" graphql:\"deleteProjectColumn\""
+	DeletePullRequestReview                                     *DeletePullRequestReviewPayload                                     "json:\"deletePullRequestReview\" graphql:\"deletePullRequestReview\""
+	DeletePullRequestReviewComment                              *DeletePullRequestReviewCommentPayload                              "json:\"deletePullRequestReviewComment\" graphql:\"deletePullRequestReviewComment\""
+	DeleteRef                                                   *DeleteRefPayload                                                   "json:\"deleteRef\" graphql:\"deleteRef\""
+	DeleteTeamDiscussion                                        *DeleteTeamDiscussionPayload                                        "json:\"deleteTeamDiscussion\" graphql:\"deleteTeamDiscussion\""
+	DeleteTeamDiscussionComment                                 *DeleteTeamDiscussionCommentPayload                                 "json:\"deleteTeamDiscussionComment\" graphql:\"deleteTeamDiscussionComment\""
+	DeleteVerifiableDomain                                      *DeleteVerifiableDomainPayload                                      "json:\"deleteVerifiableDomain\" graphql:\"deleteVerifiableDomain\""
+	DisablePullRequestAutoMerge                                 *DisablePullRequestAutoMergePayload                                 "json:\"disablePullRequestAutoMerge\" graphql:\"disablePullRequestAutoMerge\""
+	DismissPullRequestReview                                    *DismissPullRequestReviewPayload                                    "json:\"dismissPullRequestReview\" graphql:\"dismissPullRequestReview\""
+	EnablePullRequestAutoMerge                                  *EnablePullRequestAutoMergePayload                                  "json:\"enablePullRequestAutoMerge\" graphql:\"enablePullRequestAutoMerge\""
+	FollowUser                                                  *FollowUserPayload                                                  "json:\"followUser\" graphql:\"followUser\""
+	InviteEnterpriseAdmin                                       *InviteEnterpriseAdminPayload                                       "json:\"inviteEnterpriseAdmin\" graphql:\"inviteEnterpriseAdmin\""
+	LinkRepositoryToProject                                     *LinkRepositoryToProjectPayload                                     "json:\"linkRepositoryToProject\" graphql:\"linkRepositoryToProject\""
+	LockLockable                                                *LockLockablePayload                                                "json:\"lockLockable\" graphql:\"lockLockable\""
+	MarkFileAsViewed                                            *MarkFileAsViewedPayload                                            "json:\"markFileAsViewed\" graphql:\"markFileAsViewed\""
+	MarkPullRequestReadyForReview                               *MarkPullRequestReadyForReviewPayload                               "json:\"markPullRequestReadyForReview\" graphql:\"markPullRequestReadyForReview\""
+	MergeBranch                                                 *MergeBranchPayload                                                 "json:\"mergeBranch\" graphql:\"mergeBranch\""
+	MergePullRequest                                            *MergePullRequestPayload                                            "json:\"mergePullRequest\" graphql:\"mergePullRequest\""
+	MinimizeComment                                             *MinimizeCommentPayload                                             "json:\"minimizeComment\" graphql:\"minimizeComment\""
+	MoveProjectCard                                             *MoveProjectCardPayload                                             "json:\"moveProjectCard\" graphql:\"moveProjectCard\""
+	MoveProjectColumn                                           *MoveProjectColumnPayload                                           "json:\"moveProjectColumn\" graphql:\"moveProjectColumn\""
+	PinIssue                                                    *PinIssuePayload                                                    "json:\"pinIssue\" graphql:\"pinIssue\""
+	RegenerateEnterpriseIdentityProviderRecoveryCodes           *RegenerateEnterpriseIdentityProviderRecoveryCodesPayload           "json:\"regenerateEnterpriseIdentityProviderRecoveryCodes\" graphql:\"regenerateEnterpriseIdentityProviderRecoveryCodes\""
+	RegenerateVerifiableDomainToken                             *RegenerateVerifiableDomainTokenPayload                             "json:\"regenerateVerifiableDomainToken\" graphql:\"regenerateVerifiableDomainToken\""
+	RemoveAssigneesFromAssignable                               *RemoveAssigneesFromAssignablePayload                               "json:\"removeAssigneesFromAssignable\" graphql:\"removeAssigneesFromAssignable\""
+	RemoveEnterpriseAdmin                                       *RemoveEnterpriseAdminPayload                                       "json:\"removeEnterpriseAdmin\" graphql:\"removeEnterpriseAdmin\""
+	RemoveEnterpriseIdentityProvider                            *RemoveEnterpriseIdentityProviderPayload                            "json:\"removeEnterpriseIdentityProvider\" graphql:\"removeEnterpriseIdentityProvider\""
+	RemoveEnterpriseOrganization                                *RemoveEnterpriseOrganizationPayload                                "json:\"removeEnterpriseOrganization\" graphql:\"removeEnterpriseOrganization\""
+	RemoveEnterpriseSupportEntitlement                          *RemoveEnterpriseSupportEntitlementPayload                          "json:\"removeEnterpriseSupportEntitlement\" graphql:\"removeEnterpriseSupportEntitlement\""
+	RemoveLabelsFromLabelable                                   *RemoveLabelsFromLabelablePayload                                   "json:\"removeLabelsFromLabelable\" graphql:\"removeLabelsFromLabelable\""
+	RemoveOutsideCollaborator                                   *RemoveOutsideCollaboratorPayload                                   "json:\"removeOutsideCollaborator\" graphql:\"removeOutsideCollaborator\""
+	RemoveReaction                                              *RemoveReactionPayload                                              "json:\"removeReaction\" graphql:\"removeReaction\""
+	RemoveStar                                                  *RemoveStarPayload                                                  "json:\"removeStar\" graphql:\"removeStar\""
+	ReopenIssue                                                 *ReopenIssuePayload                                                 "json:\"reopenIssue\" graphql:\"reopenIssue\""
+	ReopenPullRequest                                           *ReopenPullRequestPayload                                           "json:\"reopenPullRequest\" graphql:\"reopenPullRequest\""
+	RequestReviews                                              *RequestReviewsPayload                                              "json:\"requestReviews\" graphql:\"requestReviews\""
+	RerequestCheckSuite                                         *RerequestCheckSuitePayload                                         "json:\"rerequestCheckSuite\" graphql:\"rerequestCheckSuite\""
+	ResolveReviewThread                                         *ResolveReviewThreadPayload                                         "json:\"resolveReviewThread\" graphql:\"resolveReviewThread\""
+	SetEnterpriseIdentityProvider                               *SetEnterpriseIdentityProviderPayload                               "json:\"setEnterpriseIdentityProvider\" graphql:\"setEnterpriseIdentityProvider\""
+	SetOrganizationInteractionLimit                             *SetOrganizationInteractionLimitPayload                             "json:\"setOrganizationInteractionLimit\" graphql:\"setOrganizationInteractionLimit\""
+	SetRepositoryInteractionLimit                               *SetRepositoryInteractionLimitPayload                               "json:\"setRepositoryInteractionLimit\" graphql:\"setRepositoryInteractionLimit\""
+	SetUserInteractionLimit                                     *SetUserInteractionLimitPayload                                     "json:\"setUserInteractionLimit\" graphql:\"setUserInteractionLimit\""
+	SubmitPullRequestReview                                     *SubmitPullRequestReviewPayload                                     "json:\"submitPullRequestReview\" graphql:\"submitPullRequestReview\""
+	TransferIssue                                               *TransferIssuePayload                                               "json:\"transferIssue\" graphql:\"transferIssue\""
+	UnarchiveRepository                                         *UnarchiveRepositoryPayload                                         "json:\"unarchiveRepository\" graphql:\"unarchiveRepository\""
+	UnfollowUser                                                *UnfollowUserPayload                                                "json:\"unfollowUser\" graphql:\"unfollowUser\""
+	UnlinkRepositoryFromProject                                 *UnlinkRepositoryFromProjectPayload                                 "json:\"unlinkRepositoryFromProject\" graphql:\"unlinkRepositoryFromProject\""
+	UnlockLockable                                              *UnlockLockablePayload                                              "json:\"unlockLockable\" graphql:\"unlockLockable\""
+	UnmarkFileAsViewed                                          *UnmarkFileAsViewedPayload                                          "json:\"unmarkFileAsViewed\" graphql:\"unmarkFileAsViewed\""
+	UnmarkIssueAsDuplicate                                      *UnmarkIssueAsDuplicatePayload                                      "json:\"unmarkIssueAsDuplicate\" graphql:\"unmarkIssueAsDuplicate\""
+	UnminimizeComment                                           *UnminimizeCommentPayload                                           "json:\"unminimizeComment\" graphql:\"unminimizeComment\""
+	UnpinIssue                                                  *UnpinIssuePayload                                                  "json:\"unpinIssue\" graphql:\"unpinIssue\""
+	UnresolveReviewThread                                       *UnresolveReviewThreadPayload                                       "json:\"unresolveReviewThread\" graphql:\"unresolveReviewThread\""
+	UpdateBranchProtectionRule                                  *UpdateBranchProtectionRulePayload                                  "json:\"updateBranchProtectionRule\" graphql:\"updateBranchProtectionRule\""
+	UpdateCheckRun                                              *UpdateCheckRunPayload                                              "json:\"updateCheckRun\" graphql:\"updateCheckRun\""
+	UpdateCheckSuitePreferences                                 *UpdateCheckSuitePreferencesPayload                                 "json:\"updateCheckSuitePreferences\" graphql:\"updateCheckSuitePreferences\""
+	UpdateEnterpriseAdministratorRole                           *UpdateEnterpriseAdministratorRolePayload                           "json:\"updateEnterpriseAdministratorRole\" graphql:\"updateEnterpriseAdministratorRole\""
+	UpdateEnterpriseAllowPrivateRepositoryForkingSetting        *UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload        "json:\"updateEnterpriseAllowPrivateRepositoryForkingSetting\" graphql:\"updateEnterpriseAllowPrivateRepositoryForkingSetting\""
+	UpdateEnterpriseDefaultRepositoryPermissionSetting          *UpdateEnterpriseDefaultRepositoryPermissionSettingPayload          "json:\"updateEnterpriseDefaultRepositoryPermissionSetting\" graphql:\"updateEnterpriseDefaultRepositoryPermissionSetting\""
+	UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting *UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload "json:\"updateEnterpriseMembersCanChangeRepositoryVisibilitySetting\" graphql:\"updateEnterpriseMembersCanChangeRepositoryVisibilitySetting\""
+	UpdateEnterpriseMembersCanCreateRepositoriesSetting         *UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload         "json:\"updateEnterpriseMembersCanCreateRepositoriesSetting\" graphql:\"updateEnterpriseMembersCanCreateRepositoriesSetting\""
+	UpdateEnterpriseMembersCanDeleteIssuesSetting               *UpdateEnterpriseMembersCanDeleteIssuesSettingPayload               "json:\"updateEnterpriseMembersCanDeleteIssuesSetting\" graphql:\"updateEnterpriseMembersCanDeleteIssuesSetting\""
+	UpdateEnterpriseMembersCanDeleteRepositoriesSetting         *UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload         "json:\"updateEnterpriseMembersCanDeleteRepositoriesSetting\" graphql:\"updateEnterpriseMembersCanDeleteRepositoriesSetting\""
+	UpdateEnterpriseMembersCanInviteCollaboratorsSetting        *UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload        "json:\"updateEnterpriseMembersCanInviteCollaboratorsSetting\" graphql:\"updateEnterpriseMembersCanInviteCollaboratorsSetting\""
+	UpdateEnterpriseMembersCanMakePurchasesSetting              *UpdateEnterpriseMembersCanMakePurchasesSettingPayload              "json:\"updateEnterpriseMembersCanMakePurchasesSetting\" graphql:\"updateEnterpriseMembersCanMakePurchasesSetting\""
+	UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting    *UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload    "json:\"updateEnterpriseMembersCanUpdateProtectedBranchesSetting\" graphql:\"updateEnterpriseMembersCanUpdateProtectedBranchesSetting\""
+	UpdateEnterpriseMembersCanViewDependencyInsightsSetting     *UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload     "json:\"updateEnterpriseMembersCanViewDependencyInsightsSetting\" graphql:\"updateEnterpriseMembersCanViewDependencyInsightsSetting\""
+	UpdateEnterpriseOrganizationProjectsSetting                 *UpdateEnterpriseOrganizationProjectsSettingPayload                 "json:\"updateEnterpriseOrganizationProjectsSetting\" graphql:\"updateEnterpriseOrganizationProjectsSetting\""
+	UpdateEnterpriseProfile                                     *UpdateEnterpriseProfilePayload                                     "json:\"updateEnterpriseProfile\" graphql:\"updateEnterpriseProfile\""
+	UpdateEnterpriseRepositoryProjectsSetting                   *UpdateEnterpriseRepositoryProjectsSettingPayload                   "json:\"updateEnterpriseRepositoryProjectsSetting\" graphql:\"updateEnterpriseRepositoryProjectsSetting\""
+	UpdateEnterpriseTeamDiscussionsSetting                      *UpdateEnterpriseTeamDiscussionsSettingPayload                      "json:\"updateEnterpriseTeamDiscussionsSetting\" graphql:\"updateEnterpriseTeamDiscussionsSetting\""
+	UpdateEnterpriseTwoFactorAuthenticationRequiredSetting      *UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload      "json:\"updateEnterpriseTwoFactorAuthenticationRequiredSetting\" graphql:\"updateEnterpriseTwoFactorAuthenticationRequiredSetting\""
+	UpdateIPAllowListEnabledSetting                             *UpdateIPAllowListEnabledSettingPayload                             "json:\"updateIpAllowListEnabledSetting\" graphql:\"updateIpAllowListEnabledSetting\""
+	UpdateIPAllowListEntry                                      *UpdateIPAllowListEntryPayload                                      "json:\"updateIpAllowListEntry\" graphql:\"updateIpAllowListEntry\""
+	UpdateIssue                                                 *UpdateIssuePayload                                                 "json:\"updateIssue\" graphql:\"updateIssue\""
+	UpdateIssueComment                                          *UpdateIssueCommentPayload                                          "json:\"updateIssueComment\" graphql:\"updateIssueComment\""
+	UpdateNotificationRestrictionSetting                        *UpdateNotificationRestrictionSettingPayload                        "json:\"updateNotificationRestrictionSetting\" graphql:\"updateNotificationRestrictionSetting\""
+	UpdateProject                                               *UpdateProjectPayload                                               "json:\"updateProject\" graphql:\"updateProject\""
+	UpdateProjectCard                                           *UpdateProjectCardPayload                                           "json:\"updateProjectCard\" graphql:\"updateProjectCard\""
+	UpdateProjectColumn                                         *UpdateProjectColumnPayload                                         "json:\"updateProjectColumn\" graphql:\"updateProjectColumn\""
+	UpdatePullRequest                                           *UpdatePullRequestPayload                                           "json:\"updatePullRequest\" graphql:\"updatePullRequest\""
+	UpdatePullRequestReview                                     *UpdatePullRequestReviewPayload                                     "json:\"updatePullRequestReview\" graphql:\"updatePullRequestReview\""
+	UpdatePullRequestReviewComment                              *UpdatePullRequestReviewCommentPayload                              "json:\"updatePullRequestReviewComment\" graphql:\"updatePullRequestReviewComment\""
+	UpdateRef                                                   *UpdateRefPayload                                                   "json:\"updateRef\" graphql:\"updateRef\""
+	UpdateRepository                                            *UpdateRepositoryPayload                                            "json:\"updateRepository\" graphql:\"updateRepository\""
+	UpdateSubscription                                          *UpdateSubscriptionPayload                                          "json:\"updateSubscription\" graphql:\"updateSubscription\""
+	UpdateTeamDiscussion                                        *UpdateTeamDiscussionPayload                                        "json:\"updateTeamDiscussion\" graphql:\"updateTeamDiscussion\""
+	UpdateTeamDiscussionComment                                 *UpdateTeamDiscussionCommentPayload                                 "json:\"updateTeamDiscussionComment\" graphql:\"updateTeamDiscussionComment\""
+	UpdateTopics                                                *UpdateTopicsPayload                                                "json:\"updateTopics\" graphql:\"updateTopics\""
+	VerifyVerifiableDomain                                      *VerifyVerifiableDomainPayload                                      "json:\"verifyVerifiableDomain\" graphql:\"verifyVerifiableDomain\""
 }
 
 type LanguageFragment struct {
@@ -233,80 +192,20 @@ type LanguageFragment struct {
 	Name string "json:\"name\" graphql:\"name\""
 }
 
-type RepositoryFragment struct {
-	ID   string "json:\"id\" graphql:\"id\""
-	Name string "json:\"name\" graphql:\"name\""
-}
-
-type GetUser_Viewer_Repositories_Nodes_Languages struct {
-	Nodes []*LanguageFragment "json:\"nodes\" graphql:\"nodes\""
-}
-
-type GetUser_Viewer_Repositories_Nodes struct {
-	ID        string                                       "json:\"id\" graphql:\"id\""
-	Name      string                                       "json:\"name\" graphql:\"name\""
-	Languages *GetUser_Viewer_Repositories_Nodes_Languages "json:\"languages\" graphql:\"languages\""
-}
-
-type GetUser_Viewer_Repositories struct {
-	Nodes []*GetUser_Viewer_Repositories_Nodes "json:\"nodes\" graphql:\"nodes\""
-}
-
-type GetUser_Viewer struct {
-	ID           string                      "json:\"id\" graphql:\"id\""
-	Name         *string                     "json:\"name\" graphql:\"name\""
-	Repositories GetUser_Viewer_Repositories "json:\"repositories\" graphql:\"repositories\""
-}
-
-type GetNode_Node_Reaction_User struct {
-	ID string "json:\"id\" graphql:\"id\""
-}
-
-type GetNode_Node_Reaction struct {
-	ID   string                      "json:\"id\" graphql:\"id\""
-	User *GetNode_Node_Reaction_User "json:\"user\" graphql:\"user\""
-}
-
-type GetNode_Node struct {
-	ID         string                "json:\"id\" graphql:\"id\""
-	Repository RepositoryFragment    "graphql:\"... on Repository\""
-	Reaction   GetNode_Node_Reaction "graphql:\"... on Reaction\""
-}
-
-type AddStar_AddStar_Starrable_Repository struct {
-	ID   string "json:\"id\" graphql:\"id\""
-	Name string "json:\"name\" graphql:\"name\""
-}
-
-type AddStar_AddStar_Starrable struct {
-	ID               string                               "json:\"id\" graphql:\"id\""
-	ViewerHasStarred bool                                 "json:\"viewerHasStarred\" graphql:\"viewerHasStarred\""
-	Repository       AddStar_AddStar_Starrable_Repository "graphql:\"... on Repository\""
-}
-
-type AddStar_AddStar struct {
-	Starrable *AddStar_AddStar_Starrable "json:\"starrable\" graphql:\"starrable\""
-}
-
-type GetNode2_Node_Release struct {
-	ID   string  "json:\"id\" graphql:\"id\""
-	Name *string "json:\"name\" graphql:\"name\""
-}
-
 type GetUser struct {
-	Viewer GetUser_Viewer "json:\"viewer\" graphql:\"viewer\""
-}
-
-type GetNode struct {
-	Node *GetNode_Node "json:\"node\" graphql:\"node\""
-}
-
-type AddStar struct {
-	AddStar *AddStar_AddStar "json:\"addStar\" graphql:\"addStar\""
-}
-
-type GetNode2 struct {
-	Node *GetNode2_Node_Release "json:\"node\" graphql:\"node\""
+	Viewer struct {
+		ID           string  "json:\"id\" graphql:\"id\""
+		Name         *string "json:\"name\" graphql:\"name\""
+		Repositories struct {
+			Nodes []*struct {
+				ID        string "json:\"id\" graphql:\"id\""
+				Name      string "json:\"name\" graphql:\"name\""
+				Languages *struct {
+					Nodes []*LanguageFragment "json:\"nodes\" graphql:\"nodes\""
+				} "json:\"languages\" graphql:\"languages\""
+			} "json:\"nodes\" graphql:\"nodes\""
+		} "json:\"repositories\" graphql:\"repositories\""
+	} "json:\"viewer\" graphql:\"viewer\""
 }
 
 const GetUserDocument = `query GetUser ($repositoryFirst: Int!, $languageFirst: Int!) {
@@ -332,97 +231,14 @@ fragment LanguageFragment on Language {
 }
 `
 
-func (c *Client) GetUser(ctx context.Context, repositoryFirst int, languageFirst int, interceptors ...clientv2.RequestInterceptor) (*GetUser, error) {
+func (c *Client) GetUser(ctx context.Context, repositoryFirst int, languageFirst int, httpRequestOptions ...client.HTTPRequestOption) (*GetUser, error) {
 	vars := map[string]interface{}{
 		"repositoryFirst": repositoryFirst,
 		"languageFirst":   languageFirst,
 	}
 
 	var res GetUser
-	if err := c.Client.Post(ctx, "GetUser", GetUserDocument, &res, vars, interceptors...); err != nil {
-		return nil, err
-	}
-
-	return &res, nil
-}
-
-const GetNodeDocument = `query GetNode ($id: ID!) {
-	node(id: $id) {
-		id
-		... on Repository {
-			... RepositoryFragment
-		}
-		... on Reaction {
-			id
-			user {
-				id
-			}
-		}
-	}
-}
-fragment RepositoryFragment on Repository {
-	id
-	name
-}
-`
-
-func (c *Client) GetNode(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetNode, error) {
-	vars := map[string]interface{}{
-		"id": id,
-	}
-
-	var res GetNode
-	if err := c.Client.Post(ctx, "GetNode", GetNodeDocument, &res, vars, interceptors...); err != nil {
-		return nil, err
-	}
-
-	return &res, nil
-}
-
-const AddStarDocument = `mutation AddStar ($input: AddStarInput!) {
-	addStar(input: $input) {
-		starrable {
-			id
-			viewerHasStarred
-			... on Repository {
-				id
-				name
-			}
-		}
-	}
-}
-`
-
-func (c *Client) AddStar(ctx context.Context, input AddStarInput, interceptors ...clientv2.RequestInterceptor) (*AddStar, error) {
-	vars := map[string]interface{}{
-		"input": input,
-	}
-
-	var res AddStar
-	if err := c.Client.Post(ctx, "AddStar", AddStarDocument, &res, vars, interceptors...); err != nil {
-		return nil, err
-	}
-
-	return &res, nil
-}
-
-const GetNode2Document = `query GetNode2 ($id: ID!) {
-	node(id: $id) {
-		... on Release {
-			id
-			name
-		}
-	}
-}
-`
-
-func (c *Client) GetNode2(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetNode2, error) {
-	vars := map[string]interface{}{
-		"id": id,
-	}
-
-	var res GetNode2
-	if err := c.Client.Post(ctx, "GetNode2", GetNode2Document, &res, vars, interceptors...); err != nil {
+	if err := c.Client.Post(ctx, "GetUser", GetUserDocument, &res, vars, httpRequestOptions...); err != nil {
 		return nil, err
 	}
 
diff --git a/example/github/gen/models_gen.go b/example/github/gen/models_gen.go
index 25b27d9..0511534 100644
--- a/example/github/gen/models_gen.go
+++ b/example/github/gen/models_gen.go
@@ -34,11 +34,6 @@ type AuditEntryActor interface {
 	IsAuditEntryActor()
 }
 
-// Types which can be actors for `BranchActorAllowance` objects.
-type BranchActorAllowanceActor interface {
-	IsBranchActorAllowanceActor()
-}
-
 // An object that can be closed
 type Closable interface {
 	IsClosable()
@@ -79,11 +74,6 @@ type Deletable interface {
 	IsDeletable()
 }
 
-// Users and teams.
-type DeploymentReviewer interface {
-	IsDeploymentReviewer()
-}
-
 // Metadata for an audit entry containing enterprise account information.
 type EnterpriseAuditEntryData interface {
 	IsEnterpriseAuditEntryData()
@@ -144,11 +134,6 @@ type MemberStatusable interface {
 	IsMemberStatusable()
 }
 
-// Represents an Octoshift migration.
-type Migration interface {
-	IsMigration()
-}
-
 // Types that can be inside a Milestone.
 type MilestoneItem interface {
 	IsMilestoneItem()
@@ -209,21 +194,6 @@ type ProjectCardItem interface {
 	IsProjectCardItem()
 }
 
-// Common fields across different field types
-type ProjectNextFieldCommon interface {
-	IsProjectNextFieldCommon()
-}
-
-// Types that can be inside Project Items.
-type ProjectNextItemContent interface {
-	IsProjectNextItemContent()
-}
-
-// Represents an owner of a project (beta).
-type ProjectNextOwner interface {
-	IsProjectNextOwner()
-}
-
 // Represents an owner of a Project.
 type ProjectOwner interface {
 	IsProjectOwner()
@@ -249,11 +219,6 @@ type Reactable interface {
 	IsReactable()
 }
 
-// Types that can be assigned to reactions.
-type Reactor interface {
-	IsReactor()
-}
-
 // Any referencable object
 type ReferencedSubject interface {
 	IsReferencedSubject()
@@ -269,16 +234,6 @@ type RepositoryAuditEntryData interface {
 	IsRepositoryAuditEntryData()
 }
 
-// Represents an author of discussions in repositories.
-type RepositoryDiscussionAuthor interface {
-	IsRepositoryDiscussionAuthor()
-}
-
-// Represents an author of discussion comments in repositories.
-type RepositoryDiscussionCommentAuthor interface {
-	IsRepositoryDiscussionCommentAuthor()
-}
-
 // A subset of repository info.
 type RepositoryInfo interface {
 	IsRepositoryInfo()
@@ -374,43 +329,22 @@ type VerifiableDomainOwner interface {
 	IsVerifiableDomainOwner()
 }
 
-// A subject that may be upvoted.
-type Votable interface {
-	IsVotable()
-}
-
-// Autogenerated input type of AbortQueuedMigrations
-type AbortQueuedMigrationsInput struct {
-	// The ID of the organization that is running the migrations.
-	OwnerID string `json:"ownerId"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of AbortQueuedMigrations
-type AbortQueuedMigrationsPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// Did the operation succeed?
-	Success *bool `json:"success,omitempty"`
-}
-
 // Autogenerated input type of AcceptEnterpriseAdministratorInvitation
 type AcceptEnterpriseAdministratorInvitationInput struct {
 	// The id of the invitation being accepted
 	InvitationID string `json:"invitationId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of AcceptEnterpriseAdministratorInvitation
 type AcceptEnterpriseAdministratorInvitationPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The invitation that was accepted.
-	Invitation *EnterpriseAdministratorInvitation `json:"invitation,omitempty"`
+	Invitation *EnterpriseAdministratorInvitation `json:"invitation"`
 	// A message confirming the result of accepting an administrator invitation.
-	Message *string `json:"message,omitempty"`
+	Message *string `json:"message"`
 }
 
 // Autogenerated input type of AcceptTopicSuggestion
@@ -420,29 +354,29 @@ type AcceptTopicSuggestionInput struct {
 	// The name of the suggested topic.
 	Name string `json:"name"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of AcceptTopicSuggestion
 type AcceptTopicSuggestionPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The accepted topic.
-	Topic *Topic `json:"topic,omitempty"`
+	Topic *Topic `json:"topic"`
 }
 
 // Location information for an actor
 type ActorLocation struct {
 	// City
-	City *string `json:"city,omitempty"`
+	City *string `json:"city"`
 	// Country name
-	Country *string `json:"country,omitempty"`
+	Country *string `json:"country"`
 	// Country code
-	CountryCode *string `json:"countryCode,omitempty"`
+	CountryCode *string `json:"countryCode"`
 	// Region name
-	Region *string `json:"region,omitempty"`
+	Region *string `json:"region"`
 	// Region or state code
-	RegionCode *string `json:"regionCode,omitempty"`
+	RegionCode *string `json:"regionCode"`
 }
 
 // Autogenerated input type of AddAssigneesToAssignable
@@ -450,17 +384,17 @@ type AddAssigneesToAssignableInput struct {
 	// The id of the assignable object to add assignees to.
 	AssignableID string `json:"assignableId"`
 	// The id of users to add as assignees.
-	AssigneeIds []string `json:"assigneeIds,omitempty"`
+	AssigneeIds []string `json:"assigneeIds"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of AddAssigneesToAssignable
 type AddAssigneesToAssignablePayload struct {
 	// The item that was assigned.
-	Assignable Assignable `json:"assignable,omitempty"`
+	Assignable Assignable `json:"assignable"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated input type of AddComment
@@ -470,39 +404,19 @@ type AddCommentInput struct {
 	// The contents of the comment.
 	Body string `json:"body"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of AddComment
 type AddCommentPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The edge from the subject's comment connection.
-	CommentEdge *IssueCommentEdge `json:"commentEdge,omitempty"`
+	CommentEdge *IssueCommentEdge `json:"commentEdge"`
 	// The subject
-	Subject Node `json:"subject,omitempty"`
+	Subject Node `json:"subject"`
 	// The edge from the subject's timeline connection.
-	TimelineEdge *IssueTimelineItemEdge `json:"timelineEdge,omitempty"`
-}
-
-// Autogenerated input type of AddDiscussionComment
-type AddDiscussionCommentInput struct {
-	// The Node ID of the discussion to comment on.
-	DiscussionID string `json:"discussionId"`
-	// The Node ID of the discussion comment within this discussion to reply to.
-	ReplyToID *string `json:"replyToId,omitempty"`
-	// The contents of the comment.
-	Body string `json:"body"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of AddDiscussionComment
-type AddDiscussionCommentPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The newly created discussion comment.
-	Comment *DiscussionComment `json:"comment,omitempty"`
+	TimelineEdge *IssueTimelineItemEdge `json:"timelineEdge"`
 }
 
 // Autogenerated input type of AddEnterpriseSupportEntitlement
@@ -512,15 +426,15 @@ type AddEnterpriseSupportEntitlementInput struct {
 	// The login of a member who will receive the support entitlement.
 	Login string `json:"login"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of AddEnterpriseSupportEntitlement
 type AddEnterpriseSupportEntitlementPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// A message confirming the result of adding the support entitlement.
-	Message *string `json:"message,omitempty"`
+	Message *string `json:"message"`
 }
 
 // Autogenerated input type of AddLabelsToLabelable
@@ -528,17 +442,17 @@ type AddLabelsToLabelableInput struct {
 	// The id of the labelable object to add labels to.
 	LabelableID string `json:"labelableId"`
 	// The ids of the labels to add.
-	LabelIds []string `json:"labelIds,omitempty"`
+	LabelIds []string `json:"labelIds"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of AddLabelsToLabelable
 type AddLabelsToLabelablePayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The item that was labeled.
-	Labelable Labelable `json:"labelable,omitempty"`
+	Labelable Labelable `json:"labelable"`
 }
 
 // Autogenerated input type of AddProjectCard
@@ -546,21 +460,21 @@ type AddProjectCardInput struct {
 	// The Node ID of the ProjectColumn.
 	ProjectColumnID string `json:"projectColumnId"`
 	// The content of the card. Must be a member of the ProjectCardItem union
-	ContentID *string `json:"contentId,omitempty"`
+	ContentID *string `json:"contentId"`
 	// The note on the card.
-	Note *string `json:"note,omitempty"`
+	Note *string `json:"note"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of AddProjectCard
 type AddProjectCardPayload struct {
 	// The edge from the ProjectColumn's card connection.
-	CardEdge *ProjectCardEdge `json:"cardEdge,omitempty"`
+	CardEdge *ProjectCardEdge `json:"cardEdge"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The ProjectColumn
-	ProjectColumn *ProjectColumn `json:"projectColumn,omitempty"`
+	ProjectColumn *ProjectColumn `json:"projectColumn"`
 }
 
 // Autogenerated input type of AddProjectColumn
@@ -570,65 +484,47 @@ type AddProjectColumnInput struct {
 	// The name of the column.
 	Name string `json:"name"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of AddProjectColumn
 type AddProjectColumnPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The edge from the project's column connection.
-	ColumnEdge *ProjectColumnEdge `json:"columnEdge,omitempty"`
+	ColumnEdge *ProjectColumnEdge `json:"columnEdge"`
 	// The project
-	Project *Project `json:"project,omitempty"`
-}
-
-// Autogenerated input type of AddProjectNextItem
-type AddProjectNextItemInput struct {
-	// The ID of the Project to add the item to.
-	ProjectID string `json:"projectId"`
-	// The content id of the item (Issue or PullRequest).
-	ContentID string `json:"contentId"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of AddProjectNextItem
-type AddProjectNextItemPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The item added to the project.
-	ProjectNextItem *ProjectNextItem `json:"projectNextItem,omitempty"`
+	Project *Project `json:"project"`
 }
 
 // Autogenerated input type of AddPullRequestReviewComment
 type AddPullRequestReviewCommentInput struct {
 	// The node ID of the pull request reviewing
-	PullRequestID *string `json:"pullRequestId,omitempty"`
+	PullRequestID *string `json:"pullRequestId"`
 	// The Node ID of the review to modify.
-	PullRequestReviewID *string `json:"pullRequestReviewId,omitempty"`
+	PullRequestReviewID *string `json:"pullRequestReviewId"`
 	// The SHA of the commit to comment on.
-	CommitOid *string `json:"commitOID,omitempty"`
+	CommitOid *string `json:"commitOID"`
 	// The text of the comment.
 	Body string `json:"body"`
 	// The relative path of the file to comment on.
-	Path *string `json:"path,omitempty"`
+	Path *string `json:"path"`
 	// The line index in the diff to comment on.
-	Position *int `json:"position,omitempty"`
+	Position *int `json:"position"`
 	// The comment id to reply to.
-	InReplyTo *string `json:"inReplyTo,omitempty"`
+	InReplyTo *string `json:"inReplyTo"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of AddPullRequestReviewComment
 type AddPullRequestReviewCommentPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The newly created comment.
-	Comment *PullRequestReviewComment `json:"comment,omitempty"`
+	Comment *PullRequestReviewComment `json:"comment"`
 	// The edge from the review's comment connection.
-	CommentEdge *PullRequestReviewCommentEdge `json:"commentEdge,omitempty"`
+	CommentEdge *PullRequestReviewCommentEdge `json:"commentEdge"`
 }
 
 // Autogenerated input type of AddPullRequestReview
@@ -636,27 +532,27 @@ type AddPullRequestReviewInput struct {
 	// The Node ID of the pull request to modify.
 	PullRequestID string `json:"pullRequestId"`
 	// The commit OID the review pertains to.
-	CommitOid *string `json:"commitOID,omitempty"`
+	CommitOid *string `json:"commitOID"`
 	// The contents of the review body comment.
-	Body *string `json:"body,omitempty"`
+	Body *string `json:"body"`
 	// The event to perform on the pull request review.
-	Event *PullRequestReviewEvent `json:"event,omitempty"`
+	Event *PullRequestReviewEvent `json:"event"`
 	// The review line comments.
-	Comments []*DraftPullRequestReviewComment `json:"comments,omitempty"`
+	Comments []*DraftPullRequestReviewComment `json:"comments"`
 	// The review line comment threads.
-	Threads []*DraftPullRequestReviewThread `json:"threads,omitempty"`
+	Threads []*DraftPullRequestReviewThread `json:"threads"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of AddPullRequestReview
 type AddPullRequestReviewPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The newly created pull request review.
-	PullRequestReview *PullRequestReview `json:"pullRequestReview,omitempty"`
+	PullRequestReview *PullRequestReview `json:"pullRequestReview"`
 	// The edge from the pull request's review connection.
-	ReviewEdge *PullRequestReviewEdge `json:"reviewEdge,omitempty"`
+	ReviewEdge *PullRequestReviewEdge `json:"reviewEdge"`
 }
 
 // Autogenerated input type of AddPullRequestReviewThread
@@ -666,27 +562,27 @@ type AddPullRequestReviewThreadInput struct {
 	// Body of the thread's first comment.
 	Body string `json:"body"`
 	// The node ID of the pull request reviewing
-	PullRequestID *string `json:"pullRequestId,omitempty"`
+	PullRequestID *string `json:"pullRequestId"`
 	// The Node ID of the review to modify.
-	PullRequestReviewID *string `json:"pullRequestReviewId,omitempty"`
+	PullRequestReviewID *string `json:"pullRequestReviewId"`
 	// The line of the blob to which the thread refers. The end of the line range for multi-line comments.
 	Line int `json:"line"`
 	// The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
-	Side *DiffSide `json:"side,omitempty"`
+	Side *DiffSide `json:"side"`
 	// The first line of the range to which the comment refers.
-	StartLine *int `json:"startLine,omitempty"`
+	StartLine *int `json:"startLine"`
 	// The side of the diff on which the start line resides.
-	StartSide *DiffSide `json:"startSide,omitempty"`
+	StartSide *DiffSide `json:"startSide"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of AddPullRequestReviewThread
 type AddPullRequestReviewThreadPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The newly created thread.
-	Thread *PullRequestReviewThread `json:"thread,omitempty"`
+	Thread *PullRequestReviewThread `json:"thread"`
 }
 
 // Autogenerated input type of AddReaction
@@ -696,17 +592,17 @@ type AddReactionInput struct {
 	// The name of the emoji to react with.
 	Content ReactionContent `json:"content"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of AddReaction
 type AddReactionPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The reaction object.
-	Reaction *Reaction `json:"reaction,omitempty"`
+	Reaction *Reaction `json:"reaction"`
 	// The reactable subject.
-	Subject Reactable `json:"subject,omitempty"`
+	Subject Reactable `json:"subject"`
 }
 
 // Autogenerated input type of AddStar
@@ -714,31 +610,15 @@ type AddStarInput struct {
 	// The Starrable ID to star.
 	StarrableID string `json:"starrableId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of AddStar
 type AddStarPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The starrable.
-	Starrable Starrable `json:"starrable,omitempty"`
-}
-
-// Autogenerated input type of AddUpvote
-type AddUpvoteInput struct {
-	// The Node ID of the discussion or comment to upvote.
-	SubjectID string `json:"subjectId"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of AddUpvote
-type AddUpvotePayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The votable subject.
-	Subject Votable `json:"subject,omitempty"`
+	Starrable Starrable `json:"starrable"`
 }
 
 // Autogenerated input type of AddVerifiableDomain
@@ -748,43 +628,41 @@ type AddVerifiableDomainInput struct {
 	// The URL of the domain
 	Domain string `json:"domain"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of AddVerifiableDomain
 type AddVerifiableDomainPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The verifiable domain that was added.
-	Domain *VerifiableDomain `json:"domain,omitempty"`
+	Domain *VerifiableDomain `json:"domain"`
 }
 
 // Represents a 'added_to_project' event on a given issue or pull request.
 type AddedToProjectEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the primary key from the database.
-	DatabaseID *int   `json:"databaseId,omitempty"`
+	DatabaseID *int   `json:"databaseId"`
 	ID         string `json:"id"`
 }
 
+func (AddedToProjectEvent) IsPullRequestTimelineItems() {}
 func (AddedToProjectEvent) IsIssueTimelineItems()       {}
 func (AddedToProjectEvent) IsNode()                     {}
-func (AddedToProjectEvent) IsPullRequestTimelineItems() {}
 
 // A GitHub App.
 type App struct {
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
+	DatabaseID *int `json:"databaseId"`
 	// The description of the app.
-	Description *string `json:"description,omitempty"`
+	Description *string `json:"description"`
 	ID          string  `json:"id"`
-	// The IP addresses of the app.
-	IPAllowListEntries *IPAllowListEntryConnection `json:"ipAllowListEntries,omitempty"`
 	// The hex color code, without the leading '#', for the logo background.
 	LogoBackgroundColor string `json:"logoBackgroundColor"`
 	// A URL pointing to the app's logo.
@@ -799,45 +677,24 @@ type App struct {
 	URL string `json:"url"`
 }
 
-func (App) IsIPAllowListOwner()   {}
+func (App) IsPushAllowanceActor() {}
 func (App) IsSearchResultItem()   {}
 func (App) IsNode()               {}
-func (App) IsPushAllowanceActor() {}
-
-// Autogenerated input type of ApproveDeployments
-type ApproveDeploymentsInput struct {
-	// The node ID of the workflow run containing the pending deployments.
-	WorkflowRunID string `json:"workflowRunId"`
-	// The ids of environments to reject deployments
-	EnvironmentIds []string `json:"environmentIds,omitempty"`
-	// Optional comment for approving deployments
-	Comment *string `json:"comment,omitempty"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of ApproveDeployments
-type ApproveDeploymentsPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The affected deployments.
-	Deployments []*Deployment `json:"deployments,omitempty"`
-}
 
 // Autogenerated input type of ApproveVerifiableDomain
 type ApproveVerifiableDomainInput struct {
 	// The ID of the verifiable domain to approve.
 	ID string `json:"id"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of ApproveVerifiableDomain
 type ApproveVerifiableDomainPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The verifiable domain that was approved.
-	Domain *VerifiableDomain `json:"domain,omitempty"`
+	Domain *VerifiableDomain `json:"domain"`
 }
 
 // Autogenerated input type of ArchiveRepository
@@ -845,111 +702,111 @@ type ArchiveRepositoryInput struct {
 	// The ID of the repository to mark as archived.
 	RepositoryID string `json:"repositoryId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of ArchiveRepository
 type ArchiveRepositoryPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The repository that was marked as archived.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 }
 
 // Represents an 'assigned' event on any assignable object.
 type AssignedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the assignable associated with the event.
-	Assignable Assignable `json:"assignable,omitempty"`
+	Assignable Assignable `json:"assignable"`
 	// Identifies the user or mannequin that was assigned.
-	Assignee Assignee `json:"assignee,omitempty"`
+	Assignee Assignee `json:"assignee"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
 	// Identifies the user who was assigned.
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 }
 
-func (AssignedEvent) IsIssueTimelineItems()       {}
+func (AssignedEvent) IsNode()                     {}
 func (AssignedEvent) IsPullRequestTimelineItems() {}
-func (AssignedEvent) IsPullRequestTimelineItem()  {}
+func (AssignedEvent) IsIssueTimelineItems()       {}
 func (AssignedEvent) IsIssueTimelineItem()        {}
-func (AssignedEvent) IsNode()                     {}
+func (AssignedEvent) IsPullRequestTimelineItem()  {}
 
 // Ordering options for Audit Log connections.
 type AuditLogOrder struct {
 	// The field to order Audit Logs by.
-	Field *AuditLogOrderField `json:"field,omitempty"`
+	Field *AuditLogOrderField `json:"field"`
 	// The ordering direction.
-	Direction *OrderDirection `json:"direction,omitempty"`
+	Direction *OrderDirection `json:"direction"`
 }
 
 // Represents a 'auto_merge_disabled' event on a given pull request.
 type AutoMergeDisabledEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// The user who disabled auto-merge for this Pull Request
-	Disabler *User  `json:"disabler,omitempty"`
+	Disabler *User  `json:"disabler"`
 	ID       string `json:"id"`
 	// PullRequest referenced by event
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 	// The reason auto-merge was disabled
-	Reason *string `json:"reason,omitempty"`
+	Reason *string `json:"reason"`
 	// The reason_code relating to why auto-merge was disabled
-	ReasonCode *string `json:"reasonCode,omitempty"`
+	ReasonCode *string `json:"reasonCode"`
 }
 
-func (AutoMergeDisabledEvent) IsPullRequestTimelineItems() {}
 func (AutoMergeDisabledEvent) IsNode()                     {}
+func (AutoMergeDisabledEvent) IsPullRequestTimelineItems() {}
 
 // Represents a 'auto_merge_enabled' event on a given pull request.
 type AutoMergeEnabledEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// The user who enabled auto-merge for this Pull Request
-	Enabler *User  `json:"enabler,omitempty"`
+	Enabler *User  `json:"enabler"`
 	ID      string `json:"id"`
 	// PullRequest referenced by event.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 }
 
-func (AutoMergeEnabledEvent) IsPullRequestTimelineItems() {}
 func (AutoMergeEnabledEvent) IsNode()                     {}
+func (AutoMergeEnabledEvent) IsPullRequestTimelineItems() {}
 
 // Represents an auto-merge request for a pull request
 type AutoMergeRequest struct {
 	// The email address of the author of this auto-merge request.
-	AuthorEmail *string `json:"authorEmail,omitempty"`
+	AuthorEmail *string `json:"authorEmail"`
 	// The commit message of the auto-merge request.
-	CommitBody *string `json:"commitBody,omitempty"`
+	CommitBody *string `json:"commitBody"`
 	// The commit title of the auto-merge request.
-	CommitHeadline *string `json:"commitHeadline,omitempty"`
+	CommitHeadline *string `json:"commitHeadline"`
 	// When was this auto-merge request was enabled.
-	EnabledAt *time.Time `json:"enabledAt,omitempty"`
+	EnabledAt *time.Time `json:"enabledAt"`
 	// The actor who created the auto-merge request.
-	EnabledBy Actor `json:"enabledBy,omitempty"`
+	EnabledBy Actor `json:"enabledBy"`
 	// The merge method of the auto-merge request.
 	MergeMethod PullRequestMergeMethod `json:"mergeMethod"`
 	// The pull request that this auto-merge request is set against.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 }
 
 // Represents a 'auto_rebase_enabled' event on a given pull request.
 type AutoRebaseEnabledEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// The user who enabled auto-merge (rebase) for this Pull Request
-	Enabler *User  `json:"enabler,omitempty"`
+	Enabler *User  `json:"enabler"`
 	ID      string `json:"id"`
 	// PullRequest referenced by event.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 }
 
 func (AutoRebaseEnabledEvent) IsPullRequestTimelineItems() {}
@@ -958,14 +815,14 @@ func (AutoRebaseEnabledEvent) IsNode()                     {}
 // Represents a 'auto_squash_enabled' event on a given pull request.
 type AutoSquashEnabledEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// The user who enabled auto-merge (squash) for this Pull Request
-	Enabler *User  `json:"enabler,omitempty"`
+	Enabler *User  `json:"enabler"`
 	ID      string `json:"id"`
 	// PullRequest referenced by event.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 }
 
 func (AutoSquashEnabledEvent) IsPullRequestTimelineItems() {}
@@ -974,7 +831,7 @@ func (AutoSquashEnabledEvent) IsNode()                     {}
 // Represents a 'automatic_base_change_failed' event on a given pull request.
 type AutomaticBaseChangeFailedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
@@ -983,16 +840,16 @@ type AutomaticBaseChangeFailedEvent struct {
 	// The old base for this PR
 	OldBase string `json:"oldBase"`
 	// PullRequest referenced by event.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 }
 
-func (AutomaticBaseChangeFailedEvent) IsPullRequestTimelineItems() {}
 func (AutomaticBaseChangeFailedEvent) IsNode()                     {}
+func (AutomaticBaseChangeFailedEvent) IsPullRequestTimelineItems() {}
 
 // Represents a 'automatic_base_change_succeeded' event on a given pull request.
 type AutomaticBaseChangeSucceededEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
@@ -1001,7 +858,7 @@ type AutomaticBaseChangeSucceededEvent struct {
 	// The old base for this PR
 	OldBase string `json:"oldBase"`
 	// PullRequest referenced by event.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 }
 
 func (AutomaticBaseChangeSucceededEvent) IsPullRequestTimelineItems() {}
@@ -1010,18 +867,18 @@ func (AutomaticBaseChangeSucceededEvent) IsNode()                     {}
 // Represents a 'base_ref_changed' event on a given issue or pull request.
 type BaseRefChangedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the name of the base ref for the pull request after it was changed.
 	CurrentRefName string `json:"currentRefName"`
 	// Identifies the primary key from the database.
-	DatabaseID *int   `json:"databaseId,omitempty"`
+	DatabaseID *int   `json:"databaseId"`
 	ID         string `json:"id"`
 	// Identifies the name of the base ref for the pull request before it was changed.
 	PreviousRefName string `json:"previousRefName"`
 	// PullRequest referenced by event.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 }
 
 func (BaseRefChangedEvent) IsPullRequestTimelineItems() {}
@@ -1030,45 +887,45 @@ func (BaseRefChangedEvent) IsNode()                     {}
 // Represents a 'base_ref_deleted' event on a given pull request.
 type BaseRefDeletedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the name of the Ref associated with the `base_ref_deleted` event.
-	BaseRefName *string `json:"baseRefName,omitempty"`
+	BaseRefName *string `json:"baseRefName"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
 	// PullRequest referenced by event.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 }
 
+func (BaseRefDeletedEvent) IsNode()                     {}
 func (BaseRefDeletedEvent) IsPullRequestTimelineItems() {}
 func (BaseRefDeletedEvent) IsPullRequestTimelineItem()  {}
-func (BaseRefDeletedEvent) IsNode()                     {}
 
 // Represents a 'base_ref_force_pushed' event on a given pull request.
 type BaseRefForcePushedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the after commit SHA for the 'base_ref_force_pushed' event.
-	AfterCommit *Commit `json:"afterCommit,omitempty"`
+	AfterCommit *Commit `json:"afterCommit"`
 	// Identifies the before commit SHA for the 'base_ref_force_pushed' event.
-	BeforeCommit *Commit `json:"beforeCommit,omitempty"`
+	BeforeCommit *Commit `json:"beforeCommit"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
 	// PullRequest referenced by event.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 	// Identifies the fully qualified ref name for the 'base_ref_force_pushed' event.
-	Ref *Ref `json:"ref,omitempty"`
+	Ref *Ref `json:"ref"`
 }
 
+func (BaseRefForcePushedEvent) IsNode()                     {}
 func (BaseRefForcePushedEvent) IsPullRequestTimelineItems() {}
 func (BaseRefForcePushedEvent) IsPullRequestTimelineItem()  {}
-func (BaseRefForcePushedEvent) IsNode()                     {}
 
 // Represents a Git blame.
 type Blame struct {
 	// The list of ranges from a Git blame.
-	Ranges []*BlameRange `json:"ranges,omitempty"`
+	Ranges []*BlameRange `json:"ranges"`
 }
 
 // Represents a range of information from a Git blame.
@@ -1076,7 +933,7 @@ type BlameRange struct {
 	// Identifies the recency of the change, from 1 (new) to 10 (old). This is calculated as a 2-quantile and determines the length of distance between the median age of all the changes in the file and the recency of the current range's change.
 	Age int `json:"age"`
 	// Identifies the line author
-	Commit *Commit `json:"commit,omitempty"`
+	Commit *Commit `json:"commit"`
 	// The ending line for the range
 	EndingLine int `json:"endingLine"`
 	// The starting line for the range
@@ -1095,19 +952,19 @@ type Blob struct {
 	CommitURL string `json:"commitUrl"`
 	ID        string `json:"id"`
 	// Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding.
-	IsBinary *bool `json:"isBinary,omitempty"`
+	IsBinary *bool `json:"isBinary"`
 	// Indicates whether the contents is truncated
 	IsTruncated bool `json:"isTruncated"`
 	// The Git object ID
 	Oid string `json:"oid"`
 	// The Repository the Git object belongs to
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// UTF8 text data or null if the Blob is binary
-	Text *string `json:"text,omitempty"`
+	Text *string `json:"text"`
 }
 
-func (Blob) IsGitObject() {}
 func (Blob) IsNode()      {}
+func (Blob) IsGitObject() {}
 
 // A special type of user which takes actions on behalf of GitHub Apps.
 type Bot struct {
@@ -1116,7 +973,7 @@ type Bot struct {
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the primary key from the database.
-	DatabaseID *int   `json:"databaseId,omitempty"`
+	DatabaseID *int   `json:"databaseId"`
 	ID         string `json:"id"`
 	// The username of the actor.
 	Login string `json:"login"`
@@ -1128,12 +985,11 @@ type Bot struct {
 	URL string `json:"url"`
 }
 
-func (Bot) IsAuditEntryActor()          {}
 func (Bot) IsNode()                     {}
 func (Bot) IsActor()                    {}
 func (Bot) IsUniformResourceLocatable() {}
+func (Bot) IsAuditEntryActor()          {}
 func (Bot) IsAssignee()                 {}
-func (Bot) IsReactor()                  {}
 
 // A branch protection rule.
 type BranchProtectionRule struct {
@@ -1142,42 +998,34 @@ type BranchProtectionRule struct {
 	// Are force pushes allowed on this branch.
 	AllowsForcePushes bool `json:"allowsForcePushes"`
 	// A list of conflicts matching branches protection rule and other branch protection rules
-	BranchProtectionRuleConflicts *BranchProtectionRuleConflictConnection `json:"branchProtectionRuleConflicts,omitempty"`
-	// A list of actors able to force push for this branch protection rule.
-	BypassForcePushAllowances *BypassForcePushAllowanceConnection `json:"bypassForcePushAllowances,omitempty"`
-	// A list of actors able to bypass PRs for this branch protection rule.
-	BypassPullRequestAllowances *BypassPullRequestAllowanceConnection `json:"bypassPullRequestAllowances,omitempty"`
+	BranchProtectionRuleConflicts *BranchProtectionRuleConflictConnection `json:"branchProtectionRuleConflicts"`
 	// The actor who created this branch protection rule.
-	Creator Actor `json:"creator,omitempty"`
+	Creator Actor `json:"creator"`
 	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
+	DatabaseID *int `json:"databaseId"`
 	// Will new commits pushed to matching branches dismiss pull request review approvals.
 	DismissesStaleReviews bool   `json:"dismissesStaleReviews"`
 	ID                    string `json:"id"`
 	// Can admins overwrite branch protection.
 	IsAdminEnforced bool `json:"isAdminEnforced"`
 	// Repository refs that are protected by this rule
-	MatchingRefs *RefConnection `json:"matchingRefs,omitempty"`
+	MatchingRefs *RefConnection `json:"matchingRefs"`
 	// Identifies the protection rule pattern.
 	Pattern string `json:"pattern"`
 	// A list push allowances for this branch protection rule.
-	PushAllowances *PushAllowanceConnection `json:"pushAllowances,omitempty"`
+	PushAllowances *PushAllowanceConnection `json:"pushAllowances"`
 	// The repository associated with this branch protection rule.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// Number of approving reviews required to update matching branches.
-	RequiredApprovingReviewCount *int `json:"requiredApprovingReviewCount,omitempty"`
+	RequiredApprovingReviewCount *int `json:"requiredApprovingReviewCount"`
 	// List of required status check contexts that must pass for commits to be accepted to matching branches.
-	RequiredStatusCheckContexts []*string `json:"requiredStatusCheckContexts,omitempty"`
-	// List of required status checks that must pass for commits to be accepted to matching branches.
-	RequiredStatusChecks []*RequiredStatusCheckDescription `json:"requiredStatusChecks,omitempty"`
+	RequiredStatusCheckContexts []*string `json:"requiredStatusCheckContexts"`
 	// Are approving reviews required to update matching branches.
 	RequiresApprovingReviews bool `json:"requiresApprovingReviews"`
 	// Are reviews from code owners required to update matching branches.
 	RequiresCodeOwnerReviews bool `json:"requiresCodeOwnerReviews"`
 	// Are commits required to be signed.
 	RequiresCommitSignatures bool `json:"requiresCommitSignatures"`
-	// Are conversations required to be resolved before merging.
-	RequiresConversationResolution bool `json:"requiresConversationResolution"`
 	// Are merge commits prohibited from being pushed to this branch.
 	RequiresLinearHistory bool `json:"requiresLinearHistory"`
 	// Are status checks required to update matching branches.
@@ -1189,7 +1037,7 @@ type BranchProtectionRule struct {
 	// Is dismissal of pull request reviews restricted.
 	RestrictsReviewDismissals bool `json:"restrictsReviewDismissals"`
 	// A list review dismissal allowances for this branch protection rule.
-	ReviewDismissalAllowances *ReviewDismissalAllowanceConnection `json:"reviewDismissalAllowances,omitempty"`
+	ReviewDismissalAllowances *ReviewDismissalAllowanceConnection `json:"reviewDismissalAllowances"`
 }
 
 func (BranchProtectionRule) IsNode() {}
@@ -1197,21 +1045,21 @@ func (BranchProtectionRule) IsNode() {}
 // A conflict between two branch protection rules.
 type BranchProtectionRuleConflict struct {
 	// Identifies the branch protection rule.
-	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule,omitempty"`
+	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule"`
 	// Identifies the conflicting branch protection rule.
-	ConflictingBranchProtectionRule *BranchProtectionRule `json:"conflictingBranchProtectionRule,omitempty"`
+	ConflictingBranchProtectionRule *BranchProtectionRule `json:"conflictingBranchProtectionRule"`
 	// Identifies the branch ref that has conflicting rules
-	Ref *Ref `json:"ref,omitempty"`
+	Ref *Ref `json:"ref"`
 }
 
 // The connection type for BranchProtectionRuleConflict.
 type BranchProtectionRuleConflictConnection struct {
 	// A list of edges.
-	Edges []*BranchProtectionRuleConflictEdge `json:"edges,omitempty"`
+	Edges []*BranchProtectionRuleConflictEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*BranchProtectionRuleConflict `json:"nodes,omitempty"`
+	Nodes []*BranchProtectionRuleConflict `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -1221,17 +1069,17 @@ type BranchProtectionRuleConflictEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *BranchProtectionRuleConflict `json:"node,omitempty"`
+	Node *BranchProtectionRuleConflict `json:"node"`
 }
 
 // The connection type for BranchProtectionRule.
 type BranchProtectionRuleConnection struct {
 	// A list of edges.
-	Edges []*BranchProtectionRuleEdge `json:"edges,omitempty"`
+	Edges []*BranchProtectionRuleEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*BranchProtectionRule `json:"nodes,omitempty"`
+	Nodes []*BranchProtectionRule `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -1241,69 +1089,7 @@ type BranchProtectionRuleEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *BranchProtectionRule `json:"node,omitempty"`
-}
-
-// A team or user who has the ability to bypass a force push requirement on a protected branch.
-type BypassForcePushAllowance struct {
-	// The actor that can dismiss.
-	Actor BranchActorAllowanceActor `json:"actor,omitempty"`
-	// Identifies the branch protection rule associated with the allowed user or team.
-	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule,omitempty"`
-	ID                   string                `json:"id"`
-}
-
-func (BypassForcePushAllowance) IsNode() {}
-
-// The connection type for BypassForcePushAllowance.
-type BypassForcePushAllowanceConnection struct {
-	// A list of edges.
-	Edges []*BypassForcePushAllowanceEdge `json:"edges,omitempty"`
-	// A list of nodes.
-	Nodes []*BypassForcePushAllowance `json:"nodes,omitempty"`
-	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
-	// Identifies the total count of items in the connection.
-	TotalCount int `json:"totalCount"`
-}
-
-// An edge in a connection.
-type BypassForcePushAllowanceEdge struct {
-	// A cursor for use in pagination.
-	Cursor string `json:"cursor"`
-	// The item at the end of the edge.
-	Node *BypassForcePushAllowance `json:"node,omitempty"`
-}
-
-// A team or user who has the ability to bypass a pull request requirement on a protected branch.
-type BypassPullRequestAllowance struct {
-	// The actor that can dismiss.
-	Actor BranchActorAllowanceActor `json:"actor,omitempty"`
-	// Identifies the branch protection rule associated with the allowed user or team.
-	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule,omitempty"`
-	ID                   string                `json:"id"`
-}
-
-func (BypassPullRequestAllowance) IsNode() {}
-
-// The connection type for BypassPullRequestAllowance.
-type BypassPullRequestAllowanceConnection struct {
-	// A list of edges.
-	Edges []*BypassPullRequestAllowanceEdge `json:"edges,omitempty"`
-	// A list of nodes.
-	Nodes []*BypassPullRequestAllowance `json:"nodes,omitempty"`
-	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
-	// Identifies the total count of items in the connection.
-	TotalCount int `json:"totalCount"`
-}
-
-// An edge in a connection.
-type BypassPullRequestAllowanceEdge struct {
-	// A cursor for use in pagination.
-	Cursor string `json:"cursor"`
-	// The item at the end of the edge.
-	Node *BypassPullRequestAllowance `json:"node,omitempty"`
+	Node *BranchProtectionRule `json:"node"`
 }
 
 // The Common Vulnerability Scoring System
@@ -1311,7 +1097,7 @@ type Cvss struct {
 	// The CVSS score associated with this advisory
 	Score float64 `json:"score"`
 	// The CVSS vector string associated with this advisory
-	VectorString *string `json:"vectorString,omitempty"`
+	VectorString *string `json:"vectorString"`
 }
 
 // A common weakness enumeration
@@ -1320,7 +1106,8 @@ type Cwe struct {
 	CweID string `json:"cweId"`
 	// A detailed description of this CWE
 	Description string `json:"description"`
-	ID          string `json:"id"`
+	// ID of the object.
+	ID string `json:"id"`
 	// The name of this CWE
 	Name string `json:"name"`
 }
@@ -1330,11 +1117,11 @@ func (Cwe) IsNode() {}
 // The connection type for CWE.
 type CWEConnection struct {
 	// A list of edges.
-	Edges []*CWEEdge `json:"edges,omitempty"`
+	Edges []*CWEEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*Cwe `json:"nodes,omitempty"`
+	Nodes []*Cwe `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -1344,7 +1131,7 @@ type CWEEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *Cwe `json:"node,omitempty"`
+	Node *Cwe `json:"node"`
 }
 
 // Autogenerated input type of CancelEnterpriseAdminInvitation
@@ -1352,93 +1139,71 @@ type CancelEnterpriseAdminInvitationInput struct {
 	// The Node ID of the pending enterprise administrator invitation.
 	InvitationID string `json:"invitationId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of CancelEnterpriseAdminInvitation
 type CancelEnterpriseAdminInvitationPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The invitation that was canceled.
-	Invitation *EnterpriseAdministratorInvitation `json:"invitation,omitempty"`
+	Invitation *EnterpriseAdministratorInvitation `json:"invitation"`
 	// A message confirming the result of canceling an administrator invitation.
-	Message *string `json:"message,omitempty"`
-}
-
-// Autogenerated input type of CancelSponsorship
-type CancelSponsorshipInput struct {
-	// The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given.
-	SponsorID *string `json:"sponsorId,omitempty"`
-	// The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given.
-	SponsorLogin *string `json:"sponsorLogin,omitempty"`
-	// The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
-	SponsorableID *string `json:"sponsorableId,omitempty"`
-	// The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
-	SponsorableLogin *string `json:"sponsorableLogin,omitempty"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of CancelSponsorship
-type CancelSponsorshipPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The tier that was being used at the time of cancellation.
-	SponsorsTier *SponsorsTier `json:"sponsorsTier,omitempty"`
+	Message *string `json:"message"`
 }
 
 // Autogenerated input type of ChangeUserStatus
 type ChangeUserStatusInput struct {
 	// The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:.
-	Emoji *string `json:"emoji,omitempty"`
+	Emoji *string `json:"emoji"`
 	// A short description of your current status.
-	Message *string `json:"message,omitempty"`
+	Message *string `json:"message"`
 	// The ID of the organization whose members will be allowed to see the status. If omitted, the status will be publicly visible.
-	OrganizationID *string `json:"organizationId,omitempty"`
+	OrganizationID *string `json:"organizationId"`
 	// Whether this status should indicate you are not fully available on GitHub, e.g., you are away.
-	LimitedAvailability *bool `json:"limitedAvailability,omitempty"`
+	LimitedAvailability *bool `json:"limitedAvailability"`
 	// If set, the user status will not be shown after this date.
-	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
+	ExpiresAt *time.Time `json:"expiresAt"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of ChangeUserStatus
 type ChangeUserStatusPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// Your updated status.
-	Status *UserStatus `json:"status,omitempty"`
+	Status *UserStatus `json:"status"`
 }
 
 // A single check annotation.
 type CheckAnnotation struct {
 	// The annotation's severity level.
-	AnnotationLevel *CheckAnnotationLevel `json:"annotationLevel,omitempty"`
+	AnnotationLevel *CheckAnnotationLevel `json:"annotationLevel"`
 	// The path to the file that this annotation was made on.
 	BlobURL string `json:"blobUrl"`
 	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
+	DatabaseID *int `json:"databaseId"`
 	// The position of this annotation.
-	Location *CheckAnnotationSpan `json:"location,omitempty"`
+	Location *CheckAnnotationSpan `json:"location"`
 	// The annotation's message.
 	Message string `json:"message"`
 	// The path that this annotation was made on.
 	Path string `json:"path"`
 	// Additional information about the annotation.
-	RawDetails *string `json:"rawDetails,omitempty"`
+	RawDetails *string `json:"rawDetails"`
 	// The annotation's title
-	Title *string `json:"title,omitempty"`
+	Title *string `json:"title"`
 }
 
 // The connection type for CheckAnnotation.
 type CheckAnnotationConnection struct {
 	// A list of edges.
-	Edges []*CheckAnnotationEdge `json:"edges,omitempty"`
+	Edges []*CheckAnnotationEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*CheckAnnotation `json:"nodes,omitempty"`
+	Nodes []*CheckAnnotation `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -1448,15 +1213,15 @@ type CheckAnnotationData struct {
 	// The path of the file to add an annotation to.
 	Path string `json:"path"`
 	// The location of the annotation
-	Location *CheckAnnotationRange `json:"location,omitempty"`
+	Location *CheckAnnotationRange `json:"location"`
 	// Represents an annotation's information level
 	AnnotationLevel CheckAnnotationLevel `json:"annotationLevel"`
 	// A short description of the feedback for these lines of code.
 	Message string `json:"message"`
 	// The title that represents the annotation.
-	Title *string `json:"title,omitempty"`
+	Title *string `json:"title"`
 	// Details about this annotation.
-	RawDetails *string `json:"rawDetails,omitempty"`
+	RawDetails *string `json:"rawDetails"`
 }
 
 // An edge in a connection.
@@ -1464,13 +1229,13 @@ type CheckAnnotationEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *CheckAnnotation `json:"node,omitempty"`
+	Node *CheckAnnotation `json:"node"`
 }
 
 // A character position in a check annotation.
 type CheckAnnotationPosition struct {
 	// Column number (1 indexed).
-	Column *int `json:"column,omitempty"`
+	Column *int `json:"column"`
 	// Line number (1 indexed).
 	Line int `json:"line"`
 }
@@ -1480,72 +1245,66 @@ type CheckAnnotationRange struct {
 	// The starting line of the range.
 	StartLine int `json:"startLine"`
 	// The starting column of the range.
-	StartColumn *int `json:"startColumn,omitempty"`
+	StartColumn *int `json:"startColumn"`
 	// The ending line of the range.
 	EndLine int `json:"endLine"`
 	// The ending column of the range.
-	EndColumn *int `json:"endColumn,omitempty"`
+	EndColumn *int `json:"endColumn"`
 }
 
 // An inclusive pair of positions for a check annotation.
 type CheckAnnotationSpan struct {
 	// End position (inclusive).
-	End *CheckAnnotationPosition `json:"end,omitempty"`
+	End *CheckAnnotationPosition `json:"end"`
 	// Start position (inclusive).
-	Start *CheckAnnotationPosition `json:"start,omitempty"`
+	Start *CheckAnnotationPosition `json:"start"`
 }
 
 // A check run.
 type CheckRun struct {
 	// The check run's annotations
-	Annotations *CheckAnnotationConnection `json:"annotations,omitempty"`
+	Annotations *CheckAnnotationConnection `json:"annotations"`
 	// The check suite that this run is a part of.
-	CheckSuite *CheckSuite `json:"checkSuite,omitempty"`
+	CheckSuite *CheckSuite `json:"checkSuite"`
 	// Identifies the date and time when the check run was completed.
-	CompletedAt *time.Time `json:"completedAt,omitempty"`
+	CompletedAt *time.Time `json:"completedAt"`
 	// The conclusion of the check run.
-	Conclusion *CheckConclusionState `json:"conclusion,omitempty"`
+	Conclusion *CheckConclusionState `json:"conclusion"`
 	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
-	// The corresponding deployment for this job, if any
-	Deployment *Deployment `json:"deployment,omitempty"`
+	DatabaseID *int `json:"databaseId"`
 	// The URL from which to find full details of the check run on the integrator's site.
-	DetailsURL *string `json:"detailsUrl,omitempty"`
+	DetailsURL *string `json:"detailsUrl"`
 	// A reference for the check run on the integrator's system.
-	ExternalID *string `json:"externalId,omitempty"`
+	ExternalID *string `json:"externalId"`
 	ID         string  `json:"id"`
 	// Whether this is required to pass before merging for a specific pull request.
 	IsRequired bool `json:"isRequired"`
 	// The name of the check for this check run.
 	Name string `json:"name"`
-	// Information about a pending deployment, if any, in this check run
-	PendingDeploymentRequest *DeploymentRequest `json:"pendingDeploymentRequest,omitempty"`
 	// The permalink to the check run summary.
 	Permalink string `json:"permalink"`
 	// The repository associated with this check run.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The HTTP path for this check run.
 	ResourcePath string `json:"resourcePath"`
 	// Identifies the date and time when the check run was started.
-	StartedAt *time.Time `json:"startedAt,omitempty"`
+	StartedAt *time.Time `json:"startedAt"`
 	// The current status of the check run.
 	Status CheckStatusState `json:"status"`
-	// The check run's steps
-	Steps *CheckStepConnection `json:"steps,omitempty"`
 	// A string representing the check run's summary
-	Summary *string `json:"summary,omitempty"`
+	Summary *string `json:"summary"`
 	// A string representing the check run's text
-	Text *string `json:"text,omitempty"`
+	Text *string `json:"text"`
 	// A string representing the check run
-	Title *string `json:"title,omitempty"`
+	Title *string `json:"title"`
 	// The HTTP URL for this check run.
 	URL string `json:"url"`
 }
 
-func (CheckRun) IsStatusCheckRollupContext() {}
 func (CheckRun) IsNode()                     {}
 func (CheckRun) IsUniformResourceLocatable() {}
 func (CheckRun) IsRequirableByPullRequest()  {}
+func (CheckRun) IsStatusCheckRollupContext() {}
 
 // Possible further actions the integrator can perform.
 type CheckRunAction struct {
@@ -1560,11 +1319,11 @@ type CheckRunAction struct {
 // The connection type for CheckRun.
 type CheckRunConnection struct {
 	// A list of edges.
-	Edges []*CheckRunEdge `json:"edges,omitempty"`
+	Edges []*CheckRunEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*CheckRun `json:"nodes,omitempty"`
+	Nodes []*CheckRun `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -1574,19 +1333,19 @@ type CheckRunEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *CheckRun `json:"node,omitempty"`
+	Node *CheckRun `json:"node"`
 }
 
 // The filters that are available when fetching check runs.
 type CheckRunFilter struct {
 	// Filters the check runs by this type.
-	CheckType *CheckRunType `json:"checkType,omitempty"`
+	CheckType *CheckRunType `json:"checkType"`
 	// Filters the check runs created by this application ID.
-	AppID *int `json:"appId,omitempty"`
+	AppID *int `json:"appId"`
 	// Filters the check runs by this name.
-	CheckName *string `json:"checkName,omitempty"`
+	CheckName *string `json:"checkName"`
 	// Filters the check runs by this status.
-	Status *CheckStatusState `json:"status,omitempty"`
+	Status *CheckStatusState `json:"status"`
 }
 
 // Descriptive details about the check run.
@@ -1596,11 +1355,11 @@ type CheckRunOutput struct {
 	// The summary of the check run (supports Commonmark).
 	Summary string `json:"summary"`
 	// The details of the check run (supports Commonmark).
-	Text *string `json:"text,omitempty"`
+	Text *string `json:"text"`
 	// The annotations that are made as part of the check run.
-	Annotations []*CheckAnnotationData `json:"annotations,omitempty"`
+	Annotations []*CheckAnnotationData `json:"annotations"`
 	// Images attached to the check run output displayed in the GitHub pull request UI.
-	Images []*CheckRunOutputImage `json:"images,omitempty"`
+	Images []*CheckRunOutputImage `json:"images"`
 }
 
 // Images attached to the check run output displayed in the GitHub pull request UI.
@@ -1610,74 +1369,32 @@ type CheckRunOutputImage struct {
 	// The full URL of the image.
 	ImageURL string `json:"imageUrl"`
 	// A short image description.
-	Caption *string `json:"caption,omitempty"`
-}
-
-// A single check step.
-type CheckStep struct {
-	// Identifies the date and time when the check step was completed.
-	CompletedAt *time.Time `json:"completedAt,omitempty"`
-	// The conclusion of the check step.
-	Conclusion *CheckConclusionState `json:"conclusion,omitempty"`
-	// A reference for the check step on the integrator's system.
-	ExternalID *string `json:"externalId,omitempty"`
-	// The step's name.
-	Name string `json:"name"`
-	// The index of the step in the list of steps of the parent check run.
-	Number int `json:"number"`
-	// Number of seconds to completion.
-	SecondsToCompletion *int `json:"secondsToCompletion,omitempty"`
-	// Identifies the date and time when the check step was started.
-	StartedAt *time.Time `json:"startedAt,omitempty"`
-	// The current status of the check step.
-	Status CheckStatusState `json:"status"`
-}
-
-// The connection type for CheckStep.
-type CheckStepConnection struct {
-	// A list of edges.
-	Edges []*CheckStepEdge `json:"edges,omitempty"`
-	// A list of nodes.
-	Nodes []*CheckStep `json:"nodes,omitempty"`
-	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
-	// Identifies the total count of items in the connection.
-	TotalCount int `json:"totalCount"`
-}
-
-// An edge in a connection.
-type CheckStepEdge struct {
-	// A cursor for use in pagination.
-	Cursor string `json:"cursor"`
-	// The item at the end of the edge.
-	Node *CheckStep `json:"node,omitempty"`
+	Caption *string `json:"caption"`
 }
 
 // A check suite.
 type CheckSuite struct {
 	// The GitHub App which created this check suite.
-	App *App `json:"app,omitempty"`
+	App *App `json:"app"`
 	// The name of the branch for this check suite.
-	Branch *Ref `json:"branch,omitempty"`
+	Branch *Ref `json:"branch"`
 	// The check runs associated with a check suite.
-	CheckRuns *CheckRunConnection `json:"checkRuns,omitempty"`
+	CheckRuns *CheckRunConnection `json:"checkRuns"`
 	// The commit for this check suite
-	Commit *Commit `json:"commit,omitempty"`
+	Commit *Commit `json:"commit"`
 	// The conclusion of this check suite.
-	Conclusion *CheckConclusionState `json:"conclusion,omitempty"`
+	Conclusion *CheckConclusionState `json:"conclusion"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
-	// The user who triggered the check suite.
-	Creator *User `json:"creator,omitempty"`
 	// Identifies the primary key from the database.
-	DatabaseID *int   `json:"databaseId,omitempty"`
+	DatabaseID *int   `json:"databaseId"`
 	ID         string `json:"id"`
 	// A list of open pull requests matching the check suite.
-	MatchingPullRequests *PullRequestConnection `json:"matchingPullRequests,omitempty"`
+	MatchingPullRequests *PullRequestConnection `json:"matchingPullRequests"`
 	// The push that triggered this check suite.
-	Push *Push `json:"push,omitempty"`
+	Push *Push `json:"push"`
 	// The repository associated with this check suite.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The HTTP path for this check suite
 	ResourcePath string `json:"resourcePath"`
 	// The status of this check suite.
@@ -1686,8 +1403,6 @@ type CheckSuite struct {
 	UpdatedAt time.Time `json:"updatedAt"`
 	// The HTTP URL for this check suite
 	URL string `json:"url"`
-	// The workflow run associated with this check suite.
-	WorkflowRun *WorkflowRun `json:"workflowRun,omitempty"`
 }
 
 func (CheckSuite) IsNode() {}
@@ -1703,11 +1418,11 @@ type CheckSuiteAutoTriggerPreference struct {
 // The connection type for CheckSuite.
 type CheckSuiteConnection struct {
 	// A list of edges.
-	Edges []*CheckSuiteEdge `json:"edges,omitempty"`
+	Edges []*CheckSuiteEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*CheckSuite `json:"nodes,omitempty"`
+	Nodes []*CheckSuite `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -1717,15 +1432,15 @@ type CheckSuiteEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *CheckSuite `json:"node,omitempty"`
+	Node *CheckSuite `json:"node"`
 }
 
 // The filters that are available when fetching check suites.
 type CheckSuiteFilter struct {
 	// Filters the check suites created by this application ID.
-	AppID *int `json:"appId,omitempty"`
+	AppID *int `json:"appId"`
 	// Filters the check suites by this name.
-	CheckName *string `json:"checkName,omitempty"`
+	CheckName *string `json:"checkName"`
 }
 
 // Autogenerated input type of ClearLabelsFromLabelable
@@ -1733,15 +1448,15 @@ type ClearLabelsFromLabelableInput struct {
 	// The id of the labelable object to clear the labels from.
 	LabelableID string `json:"labelableId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of ClearLabelsFromLabelable
 type ClearLabelsFromLabelablePayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The item that was unlabeled.
-	Labelable Labelable `json:"labelable,omitempty"`
+	Labelable Labelable `json:"labelable"`
 }
 
 // Autogenerated input type of CloneProject
@@ -1755,21 +1470,21 @@ type CloneProjectInput struct {
 	// The name of the project.
 	Name string `json:"name"`
 	// The description of the project.
-	Body *string `json:"body,omitempty"`
+	Body *string `json:"body"`
 	// The visibility of the project, defaults to false (private).
-	Public *bool `json:"public,omitempty"`
+	Public *bool `json:"public"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of CloneProject
 type CloneProjectPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The id of the JobStatus for populating cloned fields.
-	JobStatusID *string `json:"jobStatusId,omitempty"`
+	JobStatusID *string `json:"jobStatusId"`
 	// The new cloned project.
-	Project *Project `json:"project,omitempty"`
+	Project *Project `json:"project"`
 }
 
 // Autogenerated input type of CloneTemplateRepository
@@ -1781,21 +1496,21 @@ type CloneTemplateRepositoryInput struct {
 	// The ID of the owner for the new repository.
 	OwnerID string `json:"ownerId"`
 	// A short description of the new repository.
-	Description *string `json:"description,omitempty"`
+	Description *string `json:"description"`
 	// Indicates the repository's visibility level.
 	Visibility RepositoryVisibility `json:"visibility"`
 	// Whether to copy all branches from the template to the new repository. Defaults to copying only the default branch of the template.
-	IncludeAllBranches *bool `json:"includeAllBranches,omitempty"`
+	IncludeAllBranches *bool `json:"includeAllBranches"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of CloneTemplateRepository
 type CloneTemplateRepositoryPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The new repository.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 }
 
 // Autogenerated input type of CloseIssue
@@ -1803,15 +1518,15 @@ type CloseIssueInput struct {
 	// ID of the issue to be closed.
 	IssueID string `json:"issueId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of CloseIssue
 type CloseIssuePayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The issue that was closed.
-	Issue *Issue `json:"issue,omitempty"`
+	Issue *Issue `json:"issue"`
 }
 
 // Autogenerated input type of ClosePullRequest
@@ -1819,25 +1534,25 @@ type ClosePullRequestInput struct {
 	// ID of the pull request to be closed.
 	PullRequestID string `json:"pullRequestId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of ClosePullRequest
 type ClosePullRequestPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The pull request that was closed.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 }
 
 // Represents a 'closed' event on any `Closable`.
 type ClosedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Object that was closed.
-	Closable Closable `json:"closable,omitempty"`
+	Closable Closable `json:"closable"`
 	// Object which triggered the creation of this event.
-	Closer Closer `json:"closer,omitempty"`
+	Closer Closer `json:"closer"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
@@ -1847,26 +1562,26 @@ type ClosedEvent struct {
 	URL string `json:"url"`
 }
 
-func (ClosedEvent) IsIssueTimelineItems()       {}
-func (ClosedEvent) IsPullRequestTimelineItems() {}
-func (ClosedEvent) IsPullRequestTimelineItem()  {}
-func (ClosedEvent) IsIssueTimelineItem()        {}
 func (ClosedEvent) IsNode()                     {}
 func (ClosedEvent) IsUniformResourceLocatable() {}
+func (ClosedEvent) IsPullRequestTimelineItems() {}
+func (ClosedEvent) IsIssueTimelineItems()       {}
+func (ClosedEvent) IsIssueTimelineItem()        {}
+func (ClosedEvent) IsPullRequestTimelineItem()  {}
 
 // The Code of Conduct for a repository
 type CodeOfConduct struct {
 	// The body of the Code of Conduct
-	Body *string `json:"body,omitempty"`
+	Body *string `json:"body"`
 	ID   string  `json:"id"`
 	// The key for the Code of Conduct
 	Key string `json:"key"`
 	// The formal name of the Code of Conduct
 	Name string `json:"name"`
 	// The HTTP path for this Code of Conduct
-	ResourcePath *string `json:"resourcePath,omitempty"`
+	ResourcePath *string `json:"resourcePath"`
 	// The HTTP URL for this Code of Conduct
-	URL *string `json:"url,omitempty"`
+	URL *string `json:"url"`
 }
 
 func (CodeOfConduct) IsNode() {}
@@ -1874,19 +1589,19 @@ func (CodeOfConduct) IsNode() {}
 // Represents a 'comment_deleted' event on a given issue or pull request.
 type CommentDeletedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
+	DatabaseID *int `json:"databaseId"`
 	// The user who authored the deleted comment.
-	DeletedCommentAuthor Actor  `json:"deletedCommentAuthor,omitempty"`
+	DeletedCommentAuthor Actor  `json:"deletedCommentAuthor"`
 	ID                   string `json:"id"`
 }
 
-func (CommentDeletedEvent) IsIssueTimelineItems()       {}
 func (CommentDeletedEvent) IsNode()                     {}
 func (CommentDeletedEvent) IsPullRequestTimelineItems() {}
+func (CommentDeletedEvent) IsIssueTimelineItems()       {}
 
 // Represents a Git commit.
 type Commit struct {
@@ -1895,9 +1610,9 @@ type Commit struct {
 	// The number of additions in this commit.
 	Additions int `json:"additions"`
 	// The merged Pull Request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open Pull Requests associated with the commit
-	AssociatedPullRequests *PullRequestConnection `json:"associatedPullRequests,omitempty"`
+	AssociatedPullRequests *PullRequestConnection `json:"associatedPullRequests"`
 	// Authorship details of the commit.
-	Author *GitActor `json:"author,omitempty"`
+	Author *GitActor `json:"author"`
 	// Check if the committer and the author match.
 	AuthoredByCommitter bool `json:"authoredByCommitter"`
 	// The datetime when this commit was authored.
@@ -1905,15 +1620,15 @@ type Commit struct {
 	// The list of authors for this commit based on the git author and the Co-authored-by
 	// message trailer. The git author will always be first.
 	//
-	Authors *GitActorConnection `json:"authors,omitempty"`
+	Authors *GitActorConnection `json:"authors"`
 	// Fetches `git blame` information.
-	Blame *Blame `json:"blame,omitempty"`
+	Blame *Blame `json:"blame"`
 	// The number of changed files in this commit.
 	ChangedFiles int `json:"changedFiles"`
 	// The check suites associated with a commit.
-	CheckSuites *CheckSuiteConnection `json:"checkSuites,omitempty"`
+	CheckSuites *CheckSuiteConnection `json:"checkSuites"`
 	// Comments made on the commit.
-	Comments *CommitCommentConnection `json:"comments,omitempty"`
+	Comments *CommitCommentConnection `json:"comments"`
 	// The HTTP path for this Git object
 	CommitResourcePath string `json:"commitResourcePath"`
 	// The HTTP URL for this Git object
@@ -1923,15 +1638,15 @@ type Commit struct {
 	// Check if committed via GitHub web UI.
 	CommittedViaWeb bool `json:"committedViaWeb"`
 	// Committer details of the commit.
-	Committer *GitActor `json:"committer,omitempty"`
+	Committer *GitActor `json:"committer"`
 	// The number of deletions in this commit.
 	Deletions int `json:"deletions"`
 	// The deployments associated with a commit.
-	Deployments *DeploymentConnection `json:"deployments,omitempty"`
+	Deployments *DeploymentConnection `json:"deployments"`
 	// The tree entry representing the file located at the given path.
-	File *TreeEntry `json:"file,omitempty"`
+	File *TreeEntry `json:"file"`
 	// The linear commit history starting from (and including) this commit, in the same order as `git log`.
-	History *CommitHistoryConnection `json:"history,omitempty"`
+	History *CommitHistoryConnection `json:"history"`
 	ID      string                   `json:"id"`
 	// The Git commit message
 	Message string `json:"message"`
@@ -1946,28 +1661,28 @@ type Commit struct {
 	// The Git object ID
 	Oid string `json:"oid"`
 	// The organization this commit was made on behalf of.
-	OnBehalfOf *Organization `json:"onBehalfOf,omitempty"`
+	OnBehalfOf *Organization `json:"onBehalfOf"`
 	// The parents of a commit.
-	Parents *CommitConnection `json:"parents,omitempty"`
+	Parents *CommitConnection `json:"parents"`
 	// The datetime when this commit was pushed.
-	PushedDate *time.Time `json:"pushedDate,omitempty"`
+	PushedDate *time.Time `json:"pushedDate"`
 	// The Repository this commit belongs to
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The HTTP path for this commit
 	ResourcePath string `json:"resourcePath"`
 	// Commit signing information, if present.
-	Signature GitSignature `json:"signature,omitempty"`
+	Signature GitSignature `json:"signature"`
 	// Status information for this commit
-	Status *Status `json:"status,omitempty"`
+	Status *Status `json:"status"`
 	// Check and Status rollup information for this commit.
-	StatusCheckRollup *StatusCheckRollup `json:"statusCheckRollup,omitempty"`
+	StatusCheckRollup *StatusCheckRollup `json:"statusCheckRollup"`
 	// Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file.
-	Submodules *SubmoduleConnection `json:"submodules,omitempty"`
+	Submodules *SubmoduleConnection `json:"submodules"`
 	// Returns a URL to download a tarball archive for a repository.
 	// Note: For private repositories, these links are temporary and expire after five minutes.
 	TarballURL string `json:"tarballUrl"`
 	// Commit's root Tree
-	Tree *Tree `json:"tree,omitempty"`
+	Tree *Tree `json:"tree"`
 	// The HTTP path for the tree of this commit
 	TreeResourcePath string `json:"treeResourcePath"`
 	// The HTTP URL for the tree of this commit
@@ -1977,32 +1692,32 @@ type Commit struct {
 	// Check if the viewer is able to change their subscription status for the repository.
 	ViewerCanSubscribe bool `json:"viewerCanSubscribe"`
 	// Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
-	ViewerSubscription *SubscriptionState `json:"viewerSubscription,omitempty"`
+	ViewerSubscription *SubscriptionState `json:"viewerSubscription"`
 	// Returns a URL to download a zipball archive for a repository.
 	// Note: For private repositories, these links are temporary and expire after five minutes.
 	ZipballURL string `json:"zipballUrl"`
 }
 
 func (Commit) IsCloser()                   {}
-func (Commit) IsPullRequestTimelineItem()  {}
-func (Commit) IsIssueTimelineItem()        {}
 func (Commit) IsNode()                     {}
 func (Commit) IsGitObject()                {}
 func (Commit) IsSubscribable()             {}
 func (Commit) IsUniformResourceLocatable() {}
+func (Commit) IsIssueTimelineItem()        {}
+func (Commit) IsPullRequestTimelineItem()  {}
 
 // Specifies an author for filtering Git commits.
 type CommitAuthor struct {
 	// ID of a User to filter by. If non-null, only commits authored by this user will be returned. This field takes precedence over emails.
-	ID *string `json:"id,omitempty"`
+	ID *string `json:"id"`
 	// Email addresses to filter by. Commits authored by any of the specified email addresses will be returned.
-	Emails []string `json:"emails,omitempty"`
+	Emails []string `json:"emails"`
 }
 
 // Represents a comment on a given Commit.
 type CommitComment struct {
 	// The actor who authored the comment.
-	Author Actor `json:"author,omitempty"`
+	Author Actor `json:"author"`
 	// Author's association with the subject of the comment.
 	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation"`
 	// Identifies the comment body.
@@ -2012,36 +1727,36 @@ type CommitComment struct {
 	// The body rendered to text.
 	BodyText string `json:"bodyText"`
 	// Identifies the commit associated with the comment, if the commit exists.
-	Commit *Commit `json:"commit,omitempty"`
+	Commit *Commit `json:"commit"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Check if this comment was created via an email reply.
 	CreatedViaEmail bool `json:"createdViaEmail"`
 	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
+	DatabaseID *int `json:"databaseId"`
 	// The actor who edited the comment.
-	Editor Actor  `json:"editor,omitempty"`
+	Editor Actor  `json:"editor"`
 	ID     string `json:"id"`
 	// Check if this comment was edited and includes an edit with the creation data
 	IncludesCreatedEdit bool `json:"includesCreatedEdit"`
 	// Returns whether or not a comment has been minimized.
 	IsMinimized bool `json:"isMinimized"`
 	// The moment the editor made the last edit
-	LastEditedAt *time.Time `json:"lastEditedAt,omitempty"`
+	LastEditedAt *time.Time `json:"lastEditedAt"`
 	// Returns why the comment was minimized.
-	MinimizedReason *string `json:"minimizedReason,omitempty"`
+	MinimizedReason *string `json:"minimizedReason"`
 	// Identifies the file path associated with the comment.
-	Path *string `json:"path,omitempty"`
+	Path *string `json:"path"`
 	// Identifies the line position associated with the comment.
-	Position *int `json:"position,omitempty"`
+	Position *int `json:"position"`
 	// Identifies when the comment was published at.
-	PublishedAt *time.Time `json:"publishedAt,omitempty"`
+	PublishedAt *time.Time `json:"publishedAt"`
 	// A list of reactions grouped by content left on the subject.
-	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`
+	ReactionGroups []*ReactionGroup `json:"reactionGroups"`
 	// A list of Reactions left on the Issue.
-	Reactions *ReactionConnection `json:"reactions,omitempty"`
+	Reactions *ReactionConnection `json:"reactions"`
 	// The repository associated with this node.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The HTTP path permalink for this commit comment.
 	ResourcePath string `json:"resourcePath"`
 	// Identifies the date and time when the object was last updated.
@@ -2049,7 +1764,7 @@ type CommitComment struct {
 	// The HTTP URL permalink for this commit comment.
 	URL string `json:"url"`
 	// A list of edits to this content.
-	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`
+	UserContentEdits *UserContentEditConnection `json:"userContentEdits"`
 	// Check if the current viewer can delete this object.
 	ViewerCanDelete bool `json:"viewerCanDelete"`
 	// Check if the current viewer can minimize this object.
@@ -2059,7 +1774,7 @@ type CommitComment struct {
 	// Check if the current viewer can update this object.
 	ViewerCanUpdate bool `json:"viewerCanUpdate"`
 	// Reasons why the current viewer can not update this comment.
-	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons,omitempty"`
+	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons"`
 	// Did the viewer author this comment.
 	ViewerDidAuthor bool `json:"viewerDidAuthor"`
 }
@@ -2076,11 +1791,11 @@ func (CommitComment) IsRepositoryNode()   {}
 // The connection type for CommitComment.
 type CommitCommentConnection struct {
 	// A list of edges.
-	Edges []*CommitCommentEdge `json:"edges,omitempty"`
+	Edges []*CommitCommentEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*CommitComment `json:"nodes,omitempty"`
+	Nodes []*CommitComment `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -2090,36 +1805,36 @@ type CommitCommentEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *CommitComment `json:"node,omitempty"`
+	Node *CommitComment `json:"node"`
 }
 
 // A thread of comments on a commit.
 type CommitCommentThread struct {
 	// The comments that exist in this thread.
-	Comments *CommitCommentConnection `json:"comments,omitempty"`
+	Comments *CommitCommentConnection `json:"comments"`
 	// The commit the comments were made on.
-	Commit *Commit `json:"commit,omitempty"`
+	Commit *Commit `json:"commit"`
 	ID     string  `json:"id"`
 	// The file the comments were made on.
-	Path *string `json:"path,omitempty"`
+	Path *string `json:"path"`
 	// The position in the diff for the commit that the comment was made on.
-	Position *int `json:"position,omitempty"`
+	Position *int `json:"position"`
 	// The repository associated with this node.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 }
 
-func (CommitCommentThread) IsPullRequestTimelineItem() {}
 func (CommitCommentThread) IsNode()                    {}
 func (CommitCommentThread) IsRepositoryNode()          {}
+func (CommitCommentThread) IsPullRequestTimelineItem() {}
 
 // The connection type for Commit.
 type CommitConnection struct {
 	// A list of edges.
-	Edges []*CommitEdge `json:"edges,omitempty"`
+	Edges []*CommitEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*Commit `json:"nodes,omitempty"`
+	Nodes []*Commit `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -2135,9 +1850,9 @@ type CommitContributionOrder struct {
 // This aggregates commits made by a user within one repository.
 type CommitContributionsByRepository struct {
 	// The commit contributions, each representing a day.
-	Contributions *CreatedCommitContributionConnection `json:"contributions,omitempty"`
+	Contributions *CreatedCommitContributionConnection `json:"contributions"`
 	// The repository in which the commits were made.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The HTTP path for the user's commits to the repository in this time range.
 	ResourcePath string `json:"resourcePath"`
 	// The HTTP URL for the user's commits to the repository in this time range.
@@ -2149,92 +1864,52 @@ type CommitEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *Commit `json:"node,omitempty"`
+	Node *Commit `json:"node"`
 }
 
 // The connection type for Commit.
 type CommitHistoryConnection struct {
 	// A list of edges.
-	Edges []*CommitEdge `json:"edges,omitempty"`
+	Edges []*CommitEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*Commit `json:"nodes,omitempty"`
+	Nodes []*Commit `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
 
-// A message to include with a new commit
-type CommitMessage struct {
-	// The headline of the message.
-	Headline string `json:"headline"`
-	// The body of the message.
-	Body *string `json:"body,omitempty"`
-}
-
-// A git ref for a commit to be appended to.
-//
-// The ref must be a branch, i.e. its fully qualified name must start
-// with `refs/heads/` (although the input is not required to be fully
-// qualified).
-//
-// The Ref may be specified by its global node ID or by the
-// repository nameWithOwner and branch name.
-//
-// ### Examples
-//
-// Specify a branch using a global node ID:
-//
-//     { "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }
-//
-// Specify a branch using nameWithOwner and branch name:
-//
-//     {
-//       "nameWithOwner": "github/graphql-client",
-//       "branchName": "main"
-//     }
-//
-//
-type CommittableBranch struct {
-	// The Node ID of the Ref to be updated.
-	ID *string `json:"id,omitempty"`
-	// The nameWithOwner of the repository to commit to.
-	RepositoryNameWithOwner *string `json:"repositoryNameWithOwner,omitempty"`
-	// The unqualified name of the branch to append the commit to.
-	BranchName *string `json:"branchName,omitempty"`
-}
-
 // Represents a 'connected' event on a given issue or pull request.
 type ConnectedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
 	// Reference originated in a different repository.
 	IsCrossRepository bool `json:"isCrossRepository"`
 	// Issue or pull request that made the reference.
-	Source ReferencedSubject `json:"source,omitempty"`
+	Source ReferencedSubject `json:"source"`
 	// Issue or pull request which was connected.
-	Subject ReferencedSubject `json:"subject,omitempty"`
+	Subject ReferencedSubject `json:"subject"`
 }
 
-func (ConnectedEvent) IsIssueTimelineItems()       {}
-func (ConnectedEvent) IsPullRequestTimelineItems() {}
 func (ConnectedEvent) IsNode()                     {}
+func (ConnectedEvent) IsPullRequestTimelineItems() {}
+func (ConnectedEvent) IsIssueTimelineItems()       {}
 
 // A calendar of contributions made on GitHub by a user.
 type ContributionCalendar struct {
 	// A list of hex color codes used in this calendar. The darker the color, the more contributions it represents.
-	Colors []string `json:"colors,omitempty"`
+	Colors []string `json:"colors"`
 	// Determine if the color set was chosen because it's currently Halloween.
 	IsHalloween bool `json:"isHalloween"`
 	// A list of the months of contributions in this calendar.
-	Months []*ContributionCalendarMonth `json:"months,omitempty"`
+	Months []*ContributionCalendarMonth `json:"months"`
 	// The count of total contributions in the calendar.
 	TotalContributions int `json:"totalContributions"`
 	// A list of the weeks of contributions in this calendar.
-	Weeks []*ContributionCalendarWeek `json:"weeks,omitempty"`
+	Weeks []*ContributionCalendarWeek `json:"weeks"`
 }
 
 // Represents a single day of contributions on GitHub by a user.
@@ -2266,7 +1941,7 @@ type ContributionCalendarMonth struct {
 // A week of contributions in a user's contribution graph.
 type ContributionCalendarWeek struct {
 	// The days of contributions in this week.
-	ContributionDays []*ContributionCalendarDay `json:"contributionDays,omitempty"`
+	ContributionDays []*ContributionCalendarDay `json:"contributionDays"`
 	// The date of the earliest square in this week.
 	FirstDay string `json:"firstDay"`
 }
@@ -2280,24 +1955,24 @@ type ContributionOrder struct {
 // A contributions collection aggregates contributions such as opened issues and commits created by a user.
 type ContributionsCollection struct {
 	// Commit contributions made by the user, grouped by repository.
-	CommitContributionsByRepository []*CommitContributionsByRepository `json:"commitContributionsByRepository,omitempty"`
+	CommitContributionsByRepository []*CommitContributionsByRepository `json:"commitContributionsByRepository"`
 	// A calendar of this user's contributions on GitHub.
-	ContributionCalendar *ContributionCalendar `json:"contributionCalendar,omitempty"`
+	ContributionCalendar *ContributionCalendar `json:"contributionCalendar"`
 	// The years the user has been making contributions with the most recent year first.
-	ContributionYears []int `json:"contributionYears,omitempty"`
+	ContributionYears []int `json:"contributionYears"`
 	// Determine if this collection's time span ends in the current month.
 	//
 	DoesEndInCurrentMonth bool `json:"doesEndInCurrentMonth"`
 	// The date of the first restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts.
-	EarliestRestrictedContributionDate *string `json:"earliestRestrictedContributionDate,omitempty"`
+	EarliestRestrictedContributionDate *string `json:"earliestRestrictedContributionDate"`
 	// The ending date and time of this collection.
 	EndedAt time.Time `json:"endedAt"`
 	// The first issue the user opened on GitHub. This will be null if that issue was opened outside the collection's time range and ignoreTimeRange is false. If the issue is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned.
-	FirstIssueContribution CreatedIssueOrRestrictedContribution `json:"firstIssueContribution,omitempty"`
+	FirstIssueContribution CreatedIssueOrRestrictedContribution `json:"firstIssueContribution"`
 	// The first pull request the user opened on GitHub. This will be null if that pull request was opened outside the collection's time range and ignoreTimeRange is not true. If the pull request is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned.
-	FirstPullRequestContribution CreatedPullRequestOrRestrictedContribution `json:"firstPullRequestContribution,omitempty"`
+	FirstPullRequestContribution CreatedPullRequestOrRestrictedContribution `json:"firstPullRequestContribution"`
 	// The first repository the user created on GitHub. This will be null if that first repository was created outside the collection's time range and ignoreTimeRange is false. If the repository is not visible, then a RestrictedContribution is returned.
-	FirstRepositoryContribution CreatedRepositoryOrRestrictedContribution `json:"firstRepositoryContribution,omitempty"`
+	FirstRepositoryContribution CreatedRepositoryOrRestrictedContribution `json:"firstRepositoryContribution"`
 	// Does the user have any more activity in the timeline that occurred prior to the collection's time range?
 	HasActivityInThePast bool `json:"hasActivityInThePast"`
 	// Determine if there are any contributions in this collection.
@@ -2307,39 +1982,39 @@ type ContributionsCollection struct {
 	// Whether or not the collector's time span is all within the same day.
 	IsSingleDay bool `json:"isSingleDay"`
 	// A list of issues the user opened.
-	IssueContributions *CreatedIssueContributionConnection `json:"issueContributions,omitempty"`
+	IssueContributions *CreatedIssueContributionConnection `json:"issueContributions"`
 	// Issue contributions made by the user, grouped by repository.
-	IssueContributionsByRepository []*IssueContributionsByRepository `json:"issueContributionsByRepository,omitempty"`
+	IssueContributionsByRepository []*IssueContributionsByRepository `json:"issueContributionsByRepository"`
 	// When the user signed up for GitHub. This will be null if that sign up date falls outside the collection's time range and ignoreTimeRange is false.
-	JoinedGitHubContribution *JoinedGitHubContribution `json:"joinedGitHubContribution,omitempty"`
+	JoinedGitHubContribution *JoinedGitHubContribution `json:"joinedGitHubContribution"`
 	// The date of the most recent restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts.
-	LatestRestrictedContributionDate *string `json:"latestRestrictedContributionDate,omitempty"`
+	LatestRestrictedContributionDate *string `json:"latestRestrictedContributionDate"`
 	// When this collection's time range does not include any activity from the user, use this
 	// to get a different collection from an earlier time range that does have activity.
 	//
-	MostRecentCollectionWithActivity *ContributionsCollection `json:"mostRecentCollectionWithActivity,omitempty"`
+	MostRecentCollectionWithActivity *ContributionsCollection `json:"mostRecentCollectionWithActivity"`
 	// Returns a different contributions collection from an earlier time range than this one
 	// that does not have any contributions.
 	//
-	MostRecentCollectionWithoutActivity *ContributionsCollection `json:"mostRecentCollectionWithoutActivity,omitempty"`
+	MostRecentCollectionWithoutActivity *ContributionsCollection `json:"mostRecentCollectionWithoutActivity"`
 	// The issue the user opened on GitHub that received the most comments in the specified
 	// time frame.
 	//
-	PopularIssueContribution *CreatedIssueContribution `json:"popularIssueContribution,omitempty"`
+	PopularIssueContribution *CreatedIssueContribution `json:"popularIssueContribution"`
 	// The pull request the user opened on GitHub that received the most comments in the
 	// specified time frame.
 	//
-	PopularPullRequestContribution *CreatedPullRequestContribution `json:"popularPullRequestContribution,omitempty"`
+	PopularPullRequestContribution *CreatedPullRequestContribution `json:"popularPullRequestContribution"`
 	// Pull request contributions made by the user.
-	PullRequestContributions *CreatedPullRequestContributionConnection `json:"pullRequestContributions,omitempty"`
+	PullRequestContributions *CreatedPullRequestContributionConnection `json:"pullRequestContributions"`
 	// Pull request contributions made by the user, grouped by repository.
-	PullRequestContributionsByRepository []*PullRequestContributionsByRepository `json:"pullRequestContributionsByRepository,omitempty"`
+	PullRequestContributionsByRepository []*PullRequestContributionsByRepository `json:"pullRequestContributionsByRepository"`
 	// Pull request review contributions made by the user.
-	PullRequestReviewContributions *CreatedPullRequestReviewContributionConnection `json:"pullRequestReviewContributions,omitempty"`
+	PullRequestReviewContributions *CreatedPullRequestReviewContributionConnection `json:"pullRequestReviewContributions"`
 	// Pull request review contributions made by the user, grouped by repository.
-	PullRequestReviewContributionsByRepository []*PullRequestReviewContributionsByRepository `json:"pullRequestReviewContributionsByRepository,omitempty"`
+	PullRequestReviewContributionsByRepository []*PullRequestReviewContributionsByRepository `json:"pullRequestReviewContributionsByRepository"`
 	// A list of repositories owned by the user that the user created in this time range.
-	RepositoryContributions *CreatedRepositoryContributionConnection `json:"repositoryContributions,omitempty"`
+	RepositoryContributions *CreatedRepositoryContributionConnection `json:"repositoryContributions"`
 	// A count of contributions made by the user that the viewer cannot access. Only non-zero when the user has chosen to share their private contribution counts.
 	RestrictedContributionsCount int `json:"restrictedContributionsCount"`
 	// The beginning date and time of this collection.
@@ -2363,7 +2038,7 @@ type ContributionsCollection struct {
 	// How many repositories the user created.
 	TotalRepositoryContributions int `json:"totalRepositoryContributions"`
 	// The user who made the contributions in this collection.
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 }
 
 // Autogenerated input type of ConvertProjectCardNoteToIssue
@@ -2373,19 +2048,19 @@ type ConvertProjectCardNoteToIssueInput struct {
 	// The ID of the repository to create the issue in.
 	RepositoryID string `json:"repositoryId"`
 	// The title of the newly created issue. Defaults to the card's note text.
-	Title *string `json:"title,omitempty"`
+	Title *string `json:"title"`
 	// The body of the newly created issue.
-	Body *string `json:"body,omitempty"`
+	Body *string `json:"body"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of ConvertProjectCardNoteToIssue
 type ConvertProjectCardNoteToIssuePayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The updated ProjectCard.
-	ProjectCard *ProjectCard `json:"projectCard,omitempty"`
+	ProjectCard *ProjectCard `json:"projectCard"`
 }
 
 // Autogenerated input type of ConvertPullRequestToDraft
@@ -2393,26 +2068,26 @@ type ConvertPullRequestToDraftInput struct {
 	// ID of the pull request to convert to draft
 	PullRequestID string `json:"pullRequestId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of ConvertPullRequestToDraft
 type ConvertPullRequestToDraftPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The pull request that is now a draft.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 }
 
 // Represents a 'convert_to_draft' event on a given pull request.
 type ConvertToDraftEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
 	// PullRequest referenced by event.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 	// The HTTP path for this convert to draft event.
 	ResourcePath string `json:"resourcePath"`
 	// The HTTP URL for this convert to draft event.
@@ -2426,33 +2101,18 @@ func (ConvertToDraftEvent) IsUniformResourceLocatable() {}
 // Represents a 'converted_note_to_issue' event on a given issue or pull request.
 type ConvertedNoteToIssueEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the primary key from the database.
-	DatabaseID *int   `json:"databaseId,omitempty"`
+	DatabaseID *int   `json:"databaseId"`
 	ID         string `json:"id"`
 }
 
-func (ConvertedNoteToIssueEvent) IsIssueTimelineItems()       {}
 func (ConvertedNoteToIssueEvent) IsPullRequestTimelineItems() {}
+func (ConvertedNoteToIssueEvent) IsIssueTimelineItems()       {}
 func (ConvertedNoteToIssueEvent) IsNode()                     {}
 
-// Represents a 'converted_to_discussion' event on a given issue.
-type ConvertedToDiscussionEvent struct {
-	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
-	// Identifies the date and time when the object was created.
-	CreatedAt time.Time `json:"createdAt"`
-	// The discussion that the issue was converted into.
-	Discussion *Discussion `json:"discussion,omitempty"`
-	ID         string      `json:"id"`
-}
-
-func (ConvertedToDiscussionEvent) IsIssueTimelineItems()       {}
-func (ConvertedToDiscussionEvent) IsPullRequestTimelineItems() {}
-func (ConvertedToDiscussionEvent) IsNode()                     {}
-
 // Autogenerated input type of CreateBranchProtectionRule
 type CreateBranchProtectionRuleInput struct {
 	// The global relay id of the repository in which a new branch protection rule should be created in.
@@ -2460,55 +2120,47 @@ type CreateBranchProtectionRuleInput struct {
 	// The glob-like pattern used to determine matching branches.
 	Pattern string `json:"pattern"`
 	// Are approving reviews required to update matching branches.
-	RequiresApprovingReviews *bool `json:"requiresApprovingReviews,omitempty"`
+	RequiresApprovingReviews *bool `json:"requiresApprovingReviews"`
 	// Number of approving reviews required to update matching branches.
-	RequiredApprovingReviewCount *int `json:"requiredApprovingReviewCount,omitempty"`
+	RequiredApprovingReviewCount *int `json:"requiredApprovingReviewCount"`
 	// Are commits required to be signed.
-	RequiresCommitSignatures *bool `json:"requiresCommitSignatures,omitempty"`
+	RequiresCommitSignatures *bool `json:"requiresCommitSignatures"`
 	// Are merge commits prohibited from being pushed to this branch.
-	RequiresLinearHistory *bool `json:"requiresLinearHistory,omitempty"`
+	RequiresLinearHistory *bool `json:"requiresLinearHistory"`
 	// Are force pushes allowed on this branch.
-	AllowsForcePushes *bool `json:"allowsForcePushes,omitempty"`
+	AllowsForcePushes *bool `json:"allowsForcePushes"`
 	// Can this branch be deleted.
-	AllowsDeletions *bool `json:"allowsDeletions,omitempty"`
+	AllowsDeletions *bool `json:"allowsDeletions"`
 	// Can admins overwrite branch protection.
-	IsAdminEnforced *bool `json:"isAdminEnforced,omitempty"`
+	IsAdminEnforced *bool `json:"isAdminEnforced"`
 	// Are status checks required to update matching branches.
-	RequiresStatusChecks *bool `json:"requiresStatusChecks,omitempty"`
+	RequiresStatusChecks *bool `json:"requiresStatusChecks"`
 	// Are branches required to be up to date before merging.
-	RequiresStrictStatusChecks *bool `json:"requiresStrictStatusChecks,omitempty"`
+	RequiresStrictStatusChecks *bool `json:"requiresStrictStatusChecks"`
 	// Are reviews from code owners required to update matching branches.
-	RequiresCodeOwnerReviews *bool `json:"requiresCodeOwnerReviews,omitempty"`
+	RequiresCodeOwnerReviews *bool `json:"requiresCodeOwnerReviews"`
 	// Will new commits pushed to matching branches dismiss pull request review approvals.
-	DismissesStaleReviews *bool `json:"dismissesStaleReviews,omitempty"`
+	DismissesStaleReviews *bool `json:"dismissesStaleReviews"`
 	// Is dismissal of pull request reviews restricted.
-	RestrictsReviewDismissals *bool `json:"restrictsReviewDismissals,omitempty"`
+	RestrictsReviewDismissals *bool `json:"restrictsReviewDismissals"`
 	// A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches.
-	ReviewDismissalActorIds []string `json:"reviewDismissalActorIds,omitempty"`
-	// A list of User or Team IDs allowed to bypass pull requests targeting matching branches.
-	BypassPullRequestActorIds []string `json:"bypassPullRequestActorIds,omitempty"`
-	// A list of User or Team IDs allowed to bypass force push targeting matching branches.
-	BypassForcePushActorIds []string `json:"bypassForcePushActorIds,omitempty"`
+	ReviewDismissalActorIds []string `json:"reviewDismissalActorIds"`
 	// Is pushing to matching branches restricted.
-	RestrictsPushes *bool `json:"restrictsPushes,omitempty"`
+	RestrictsPushes *bool `json:"restrictsPushes"`
 	// A list of User, Team or App IDs allowed to push to matching branches.
-	PushActorIds []string `json:"pushActorIds,omitempty"`
+	PushActorIds []string `json:"pushActorIds"`
 	// List of required status check contexts that must pass for commits to be accepted to matching branches.
-	RequiredStatusCheckContexts []string `json:"requiredStatusCheckContexts,omitempty"`
-	// The list of required status checks
-	RequiredStatusChecks []*RequiredStatusCheckInput `json:"requiredStatusChecks,omitempty"`
-	// Are conversations required to be resolved before merging.
-	RequiresConversationResolution *bool `json:"requiresConversationResolution,omitempty"`
+	RequiredStatusCheckContexts []string `json:"requiredStatusCheckContexts"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of CreateBranchProtectionRule
 type CreateBranchProtectionRulePayload struct {
 	// The newly created BranchProtectionRule.
-	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule,omitempty"`
+	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated input type of CreateCheckRun
@@ -2520,31 +2172,31 @@ type CreateCheckRunInput struct {
 	// The SHA of the head commit.
 	HeadSha string `json:"headSha"`
 	// The URL of the integrator's site that has the full details of the check.
-	DetailsURL *string `json:"detailsUrl,omitempty"`
+	DetailsURL *string `json:"detailsUrl"`
 	// A reference for the run on the integrator's system.
-	ExternalID *string `json:"externalId,omitempty"`
+	ExternalID *string `json:"externalId"`
 	// The current status.
-	Status *RequestableCheckStatusState `json:"status,omitempty"`
+	Status *RequestableCheckStatusState `json:"status"`
 	// The time that the check run began.
-	StartedAt *time.Time `json:"startedAt,omitempty"`
+	StartedAt *time.Time `json:"startedAt"`
 	// The final conclusion of the check.
-	Conclusion *CheckConclusionState `json:"conclusion,omitempty"`
+	Conclusion *CheckConclusionState `json:"conclusion"`
 	// The time that the check run finished.
-	CompletedAt *time.Time `json:"completedAt,omitempty"`
+	CompletedAt *time.Time `json:"completedAt"`
 	// Descriptive details about the run.
-	Output *CheckRunOutput `json:"output,omitempty"`
+	Output *CheckRunOutput `json:"output"`
 	// Possible further actions the integrator can perform, which a user may trigger.
-	Actions []*CheckRunAction `json:"actions,omitempty"`
+	Actions []*CheckRunAction `json:"actions"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of CreateCheckRun
 type CreateCheckRunPayload struct {
 	// The newly created check run.
-	CheckRun *CheckRun `json:"checkRun,omitempty"`
+	CheckRun *CheckRun `json:"checkRun"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated input type of CreateCheckSuite
@@ -2554,61 +2206,15 @@ type CreateCheckSuiteInput struct {
 	// The SHA of the head commit.
 	HeadSha string `json:"headSha"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of CreateCheckSuite
 type CreateCheckSuitePayload struct {
 	// The newly created check suite.
-	CheckSuite *CheckSuite `json:"checkSuite,omitempty"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated input type of CreateCommitOnBranch
-type CreateCommitOnBranchInput struct {
-	// The Ref to be updated.  Must be a branch.
-	Branch *CommittableBranch `json:"branch,omitempty"`
-	// A description of changes to files in this commit.
-	FileChanges *FileChanges `json:"fileChanges,omitempty"`
-	// The commit message the be included with the commit.
-	Message *CommitMessage `json:"message,omitempty"`
-	// The git commit oid expected at the head of the branch prior to the commit
-	ExpectedHeadOid string `json:"expectedHeadOid"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of CreateCommitOnBranch
-type CreateCommitOnBranchPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The new commit.
-	Commit *Commit `json:"commit,omitempty"`
-	// The ref which has been updated to point to the new commit.
-	Ref *Ref `json:"ref,omitempty"`
-}
-
-// Autogenerated input type of CreateDiscussion
-type CreateDiscussionInput struct {
-	// The id of the repository on which to create the discussion.
-	RepositoryID string `json:"repositoryId"`
-	// The title of the discussion.
-	Title string `json:"title"`
-	// The body of the discussion.
-	Body string `json:"body"`
-	// The id of the discussion category to associate with this discussion.
-	CategoryID string `json:"categoryId"`
+	CheckSuite *CheckSuite `json:"checkSuite"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of CreateDiscussion
-type CreateDiscussionPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The discussion that was just created.
-	Discussion *Discussion `json:"discussion,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated input type of CreateEnterpriseOrganization
@@ -2622,37 +2228,19 @@ type CreateEnterpriseOrganizationInput struct {
 	// The email used for sending billing receipts.
 	BillingEmail string `json:"billingEmail"`
 	// The logins for the administrators of the new organization.
-	AdminLogins []string `json:"adminLogins,omitempty"`
+	AdminLogins []string `json:"adminLogins"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of CreateEnterpriseOrganization
 type CreateEnterpriseOrganizationPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The enterprise that owns the created organization.
-	Enterprise *Enterprise `json:"enterprise,omitempty"`
+	Enterprise *Enterprise `json:"enterprise"`
 	// The organization that was created.
-	Organization *Organization `json:"organization,omitempty"`
-}
-
-// Autogenerated input type of CreateEnvironment
-type CreateEnvironmentInput struct {
-	// The node ID of the repository.
-	RepositoryID string `json:"repositoryId"`
-	// The name of the environment.
-	Name string `json:"name"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of CreateEnvironment
-type CreateEnvironmentPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The new or existing environment.
-	Environment *Environment `json:"environment,omitempty"`
+	Organization *Organization `json:"organization"`
 }
 
 // Autogenerated input type of CreateIpAllowListEntry
@@ -2662,19 +2250,19 @@ type CreateIPAllowListEntryInput struct {
 	// An IP address or range of addresses in CIDR notation.
 	AllowListValue string `json:"allowListValue"`
 	// An optional name for the IP allow list entry.
-	Name *string `json:"name,omitempty"`
+	Name *string `json:"name"`
 	// Whether the IP allow list entry is active when an IP allow list is enabled.
 	IsActive bool `json:"isActive"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of CreateIpAllowListEntry
 type CreateIPAllowListEntryPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The IP allow list entry that was created.
-	IPAllowListEntry *IPAllowListEntry `json:"ipAllowListEntry,omitempty"`
+	IPAllowListEntry *IPAllowListEntry `json:"ipAllowListEntry"`
 }
 
 // Autogenerated input type of CreateIssue
@@ -2684,53 +2272,27 @@ type CreateIssueInput struct {
 	// The title for the issue.
 	Title string `json:"title"`
 	// The body for the issue description.
-	Body *string `json:"body,omitempty"`
+	Body *string `json:"body"`
 	// The Node ID for the user assignee for this issue.
-	AssigneeIds []string `json:"assigneeIds,omitempty"`
+	AssigneeIds []string `json:"assigneeIds"`
 	// The Node ID of the milestone for this issue.
-	MilestoneID *string `json:"milestoneId,omitempty"`
+	MilestoneID *string `json:"milestoneId"`
 	// An array of Node IDs of labels for this issue.
-	LabelIds []string `json:"labelIds,omitempty"`
+	LabelIds []string `json:"labelIds"`
 	// An array of Node IDs for projects associated with this issue.
-	ProjectIds []string `json:"projectIds,omitempty"`
+	ProjectIds []string `json:"projectIds"`
 	// The name of an issue template in the repository, assigns labels and assignees from the template to the issue
-	IssueTemplate *string `json:"issueTemplate,omitempty"`
+	IssueTemplate *string `json:"issueTemplate"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of CreateIssue
 type CreateIssuePayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The new issue.
-	Issue *Issue `json:"issue,omitempty"`
-}
-
-// Autogenerated input type of CreateMigrationSource
-type CreateMigrationSourceInput struct {
-	// The Octoshift migration source name.
-	Name string `json:"name"`
-	// The Octoshift migration source URL.
-	URL string `json:"url"`
-	// The Octoshift migration source access token.
-	AccessToken string `json:"accessToken"`
-	// The Octoshift migration source type.
-	Type MigrationSourceType `json:"type"`
-	// The ID of the organization that will own the Octoshift migration source.
-	OwnerID string `json:"ownerId"`
-	// The GitHub personal access token of the user importing to the target repository.
-	GithubPat *string `json:"githubPat,omitempty"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of CreateMigrationSource
-type CreateMigrationSourcePayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The created Octoshift migration source.
-	MigrationSource *MigrationSource `json:"migrationSource,omitempty"`
+	Issue *Issue `json:"issue"`
 }
 
 // Autogenerated input type of CreateProject
@@ -2740,21 +2302,21 @@ type CreateProjectInput struct {
 	// The name of project.
 	Name string `json:"name"`
 	// The description of project.
-	Body *string `json:"body,omitempty"`
+	Body *string `json:"body"`
 	// The name of the GitHub-provided template.
-	Template *ProjectTemplate `json:"template,omitempty"`
+	Template *ProjectTemplate `json:"template"`
 	// A list of repository IDs to create as linked repositories for the project
-	RepositoryIds []string `json:"repositoryIds,omitempty"`
+	RepositoryIds []string `json:"repositoryIds"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of CreateProject
 type CreateProjectPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The new project.
-	Project *Project `json:"project,omitempty"`
+	Project *Project `json:"project"`
 }
 
 // Autogenerated input type of CreatePullRequest
@@ -2773,21 +2335,21 @@ type CreatePullRequestInput struct {
 	// The title of the pull request.
 	Title string `json:"title"`
 	// The contents of the pull request.
-	Body *string `json:"body,omitempty"`
+	Body *string `json:"body"`
 	// Indicates whether maintainers can modify the pull request.
-	MaintainerCanModify *bool `json:"maintainerCanModify,omitempty"`
+	MaintainerCanModify *bool `json:"maintainerCanModify"`
 	// Indicates whether this pull request should be a draft.
-	Draft *bool `json:"draft,omitempty"`
+	Draft *bool `json:"draft"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of CreatePullRequest
 type CreatePullRequestPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The new pull request.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 }
 
 // Autogenerated input type of CreateRef
@@ -2799,15 +2361,15 @@ type CreateRefInput struct {
 	// The GitObjectID that the new Ref shall target. Must point to a commit.
 	Oid string `json:"oid"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of CreateRef
 type CreateRefPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The newly created ref.
-	Ref *Ref `json:"ref,omitempty"`
+	Ref *Ref `json:"ref"`
 }
 
 // Autogenerated input type of CreateRepository
@@ -2815,63 +2377,31 @@ type CreateRepositoryInput struct {
 	// The name of the new repository.
 	Name string `json:"name"`
 	// The ID of the owner for the new repository.
-	OwnerID *string `json:"ownerId,omitempty"`
+	OwnerID *string `json:"ownerId"`
 	// A short description of the new repository.
-	Description *string `json:"description,omitempty"`
+	Description *string `json:"description"`
 	// Indicates the repository's visibility level.
 	Visibility RepositoryVisibility `json:"visibility"`
 	// Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure.
-	Template *bool `json:"template,omitempty"`
+	Template *bool `json:"template"`
 	// The URL for a web page about this repository.
-	HomepageURL *string `json:"homepageUrl,omitempty"`
+	HomepageURL *string `json:"homepageUrl"`
 	// Indicates if the repository should have the wiki feature enabled.
-	HasWikiEnabled *bool `json:"hasWikiEnabled,omitempty"`
+	HasWikiEnabled *bool `json:"hasWikiEnabled"`
 	// Indicates if the repository should have the issues feature enabled.
-	HasIssuesEnabled *bool `json:"hasIssuesEnabled,omitempty"`
+	HasIssuesEnabled *bool `json:"hasIssuesEnabled"`
 	// When an organization is specified as the owner, this ID identifies the team that should be granted access to the new repository.
-	TeamID *string `json:"teamId,omitempty"`
+	TeamID *string `json:"teamId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of CreateRepository
 type CreateRepositoryPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The new repository.
-	Repository *Repository `json:"repository,omitempty"`
-}
-
-// Autogenerated input type of CreateSponsorship
-type CreateSponsorshipInput struct {
-	// The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given.
-	SponsorID *string `json:"sponsorId,omitempty"`
-	// The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given.
-	SponsorLogin *string `json:"sponsorLogin,omitempty"`
-	// The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
-	SponsorableID *string `json:"sponsorableId,omitempty"`
-	// The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
-	SponsorableLogin *string `json:"sponsorableLogin,omitempty"`
-	// The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified.
-	TierID *string `json:"tierId,omitempty"`
-	// The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000.
-	Amount *int `json:"amount,omitempty"`
-	// Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified.
-	IsRecurring *bool `json:"isRecurring,omitempty"`
-	// Whether the sponsor should receive email updates from the sponsorable.
-	ReceiveEmails *bool `json:"receiveEmails,omitempty"`
-	// Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used.
-	PrivacyLevel *SponsorshipPrivacy `json:"privacyLevel,omitempty"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of CreateSponsorship
-type CreateSponsorshipPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The sponsorship that was started.
-	Sponsorship *Sponsorship `json:"sponsorship,omitempty"`
+	Repository *Repository `json:"repository"`
 }
 
 // Autogenerated input type of CreateTeamDiscussionComment
@@ -2881,15 +2411,15 @@ type CreateTeamDiscussionCommentInput struct {
 	// The content of the comment.
 	Body string `json:"body"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of CreateTeamDiscussionComment
 type CreateTeamDiscussionCommentPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The new comment.
-	TeamDiscussionComment *TeamDiscussionComment `json:"teamDiscussionComment,omitempty"`
+	TeamDiscussionComment *TeamDiscussionComment `json:"teamDiscussionComment"`
 }
 
 // Autogenerated input type of CreateTeamDiscussion
@@ -2901,17 +2431,17 @@ type CreateTeamDiscussionInput struct {
 	// The content of the discussion.
 	Body string `json:"body"`
 	// If true, restricts the visibility of this discussion to team members and organization admins. If false or not specified, allows any organization member to view this discussion.
-	Private *bool `json:"private,omitempty"`
+	Private *bool `json:"private"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of CreateTeamDiscussion
 type CreateTeamDiscussionPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The new discussion.
-	TeamDiscussion *TeamDiscussion `json:"teamDiscussion,omitempty"`
+	TeamDiscussion *TeamDiscussion `json:"teamDiscussion"`
 }
 
 // Represents the contribution a user made by committing to a repository.
@@ -2926,14 +2456,14 @@ type CreatedCommitContribution struct {
 	// When this contribution was made.
 	OccurredAt time.Time `json:"occurredAt"`
 	// The repository the user made a commit in.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The HTTP path for this contribution.
 	ResourcePath string `json:"resourcePath"`
 	// The HTTP URL for this contribution.
 	URL string `json:"url"`
 	// The user who made this contribution.
 	//
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 }
 
 func (CreatedCommitContribution) IsContribution() {}
@@ -2941,11 +2471,11 @@ func (CreatedCommitContribution) IsContribution() {}
 // The connection type for CreatedCommitContribution.
 type CreatedCommitContributionConnection struct {
 	// A list of edges.
-	Edges []*CreatedCommitContributionEdge `json:"edges,omitempty"`
+	Edges []*CreatedCommitContributionEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*CreatedCommitContribution `json:"nodes,omitempty"`
+	Nodes []*CreatedCommitContribution `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of commits across days and repositories in the connection.
 	//
 	TotalCount int `json:"totalCount"`
@@ -2956,7 +2486,7 @@ type CreatedCommitContributionEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *CreatedCommitContribution `json:"node,omitempty"`
+	Node *CreatedCommitContribution `json:"node"`
 }
 
 // Represents the contribution a user made on GitHub by opening an issue.
@@ -2967,7 +2497,7 @@ type CreatedIssueContribution struct {
 	//
 	IsRestricted bool `json:"isRestricted"`
 	// The issue that was opened.
-	Issue *Issue `json:"issue,omitempty"`
+	Issue *Issue `json:"issue"`
 	// When this contribution was made.
 	OccurredAt time.Time `json:"occurredAt"`
 	// The HTTP path for this contribution.
@@ -2976,20 +2506,20 @@ type CreatedIssueContribution struct {
 	URL string `json:"url"`
 	// The user who made this contribution.
 	//
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 }
 
-func (CreatedIssueContribution) IsCreatedIssueOrRestrictedContribution() {}
 func (CreatedIssueContribution) IsContribution()                         {}
+func (CreatedIssueContribution) IsCreatedIssueOrRestrictedContribution() {}
 
 // The connection type for CreatedIssueContribution.
 type CreatedIssueContributionConnection struct {
 	// A list of edges.
-	Edges []*CreatedIssueContributionEdge `json:"edges,omitempty"`
+	Edges []*CreatedIssueContributionEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*CreatedIssueContribution `json:"nodes,omitempty"`
+	Nodes []*CreatedIssueContribution `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -2999,7 +2529,7 @@ type CreatedIssueContributionEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *CreatedIssueContribution `json:"node,omitempty"`
+	Node *CreatedIssueContribution `json:"node"`
 }
 
 // Represents the contribution a user made on GitHub by opening a pull request.
@@ -3012,27 +2542,27 @@ type CreatedPullRequestContribution struct {
 	// When this contribution was made.
 	OccurredAt time.Time `json:"occurredAt"`
 	// The pull request that was opened.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 	// The HTTP path for this contribution.
 	ResourcePath string `json:"resourcePath"`
 	// The HTTP URL for this contribution.
 	URL string `json:"url"`
 	// The user who made this contribution.
 	//
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 }
 
-func (CreatedPullRequestContribution) IsContribution()                               {}
 func (CreatedPullRequestContribution) IsCreatedPullRequestOrRestrictedContribution() {}
+func (CreatedPullRequestContribution) IsContribution()                               {}
 
 // The connection type for CreatedPullRequestContribution.
 type CreatedPullRequestContributionConnection struct {
 	// A list of edges.
-	Edges []*CreatedPullRequestContributionEdge `json:"edges,omitempty"`
+	Edges []*CreatedPullRequestContributionEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*CreatedPullRequestContribution `json:"nodes,omitempty"`
+	Nodes []*CreatedPullRequestContribution `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -3042,7 +2572,7 @@ type CreatedPullRequestContributionEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *CreatedPullRequestContribution `json:"node,omitempty"`
+	Node *CreatedPullRequestContribution `json:"node"`
 }
 
 // Represents the contribution a user made by leaving a review on a pull request.
@@ -3055,18 +2585,18 @@ type CreatedPullRequestReviewContribution struct {
 	// When this contribution was made.
 	OccurredAt time.Time `json:"occurredAt"`
 	// The pull request the user reviewed.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 	// The review the user left on the pull request.
-	PullRequestReview *PullRequestReview `json:"pullRequestReview,omitempty"`
+	PullRequestReview *PullRequestReview `json:"pullRequestReview"`
 	// The repository containing the pull request that the user reviewed.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The HTTP path for this contribution.
 	ResourcePath string `json:"resourcePath"`
 	// The HTTP URL for this contribution.
 	URL string `json:"url"`
 	// The user who made this contribution.
 	//
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 }
 
 func (CreatedPullRequestReviewContribution) IsContribution() {}
@@ -3074,11 +2604,11 @@ func (CreatedPullRequestReviewContribution) IsContribution() {}
 // The connection type for CreatedPullRequestReviewContribution.
 type CreatedPullRequestReviewContributionConnection struct {
 	// A list of edges.
-	Edges []*CreatedPullRequestReviewContributionEdge `json:"edges,omitempty"`
+	Edges []*CreatedPullRequestReviewContributionEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*CreatedPullRequestReviewContribution `json:"nodes,omitempty"`
+	Nodes []*CreatedPullRequestReviewContribution `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -3088,7 +2618,7 @@ type CreatedPullRequestReviewContributionEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *CreatedPullRequestReviewContribution `json:"node,omitempty"`
+	Node *CreatedPullRequestReviewContribution `json:"node"`
 }
 
 // Represents the contribution a user made on GitHub by creating a repository.
@@ -3101,14 +2631,14 @@ type CreatedRepositoryContribution struct {
 	// When this contribution was made.
 	OccurredAt time.Time `json:"occurredAt"`
 	// The repository that was created.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The HTTP path for this contribution.
 	ResourcePath string `json:"resourcePath"`
 	// The HTTP URL for this contribution.
 	URL string `json:"url"`
 	// The user who made this contribution.
 	//
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 }
 
 func (CreatedRepositoryContribution) IsCreatedRepositoryOrRestrictedContribution() {}
@@ -3117,11 +2647,11 @@ func (CreatedRepositoryContribution) IsContribution()
 // The connection type for CreatedRepositoryContribution.
 type CreatedRepositoryContributionConnection struct {
 	// A list of edges.
-	Edges []*CreatedRepositoryContributionEdge `json:"edges,omitempty"`
+	Edges []*CreatedRepositoryContributionEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*CreatedRepositoryContribution `json:"nodes,omitempty"`
+	Nodes []*CreatedRepositoryContribution `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -3131,13 +2661,13 @@ type CreatedRepositoryContributionEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *CreatedRepositoryContribution `json:"node,omitempty"`
+	Node *CreatedRepositoryContribution `json:"node"`
 }
 
 // Represents a mention made by one issue or pull request to another.
 type CrossReferencedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
@@ -3148,21 +2678,21 @@ type CrossReferencedEvent struct {
 	// The HTTP path for this pull request.
 	ResourcePath string `json:"resourcePath"`
 	// Issue or pull request that made the reference.
-	Source ReferencedSubject `json:"source,omitempty"`
+	Source ReferencedSubject `json:"source"`
 	// Issue or pull request to which the reference was made.
-	Target ReferencedSubject `json:"target,omitempty"`
+	Target ReferencedSubject `json:"target"`
 	// The HTTP URL for this pull request.
 	URL string `json:"url"`
 	// Checks if the target will be closed when the source is merged.
 	WillCloseTarget bool `json:"willCloseTarget"`
 }
 
-func (CrossReferencedEvent) IsUniformResourceLocatable() {}
-func (CrossReferencedEvent) IsNode()                     {}
-func (CrossReferencedEvent) IsIssueTimelineItems()       {}
 func (CrossReferencedEvent) IsPullRequestTimelineItems() {}
-func (CrossReferencedEvent) IsPullRequestTimelineItem()  {}
+func (CrossReferencedEvent) IsIssueTimelineItems()       {}
 func (CrossReferencedEvent) IsIssueTimelineItem()        {}
+func (CrossReferencedEvent) IsNode()                     {}
+func (CrossReferencedEvent) IsUniformResourceLocatable() {}
+func (CrossReferencedEvent) IsPullRequestTimelineItem()  {}
 
 // Autogenerated input type of DeclineTopicSuggestion
 type DeclineTopicSuggestionInput struct {
@@ -3173,15 +2703,15 @@ type DeclineTopicSuggestionInput struct {
 	// The reason why the suggested topic is declined.
 	Reason TopicSuggestionDeclineReason `json:"reason"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of DeclineTopicSuggestion
 type DeclineTopicSuggestionPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The declined topic.
-	Topic *Topic `json:"topic,omitempty"`
+	Topic *Topic `json:"topic"`
 }
 
 // Autogenerated input type of DeleteBranchProtectionRule
@@ -3189,13 +2719,13 @@ type DeleteBranchProtectionRuleInput struct {
 	// The global relay id of the branch protection rule to be deleted.
 	BranchProtectionRuleID string `json:"branchProtectionRuleId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of DeleteBranchProtectionRule
 type DeleteBranchProtectionRulePayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated input type of DeleteDeployment
@@ -3203,89 +2733,43 @@ type DeleteDeploymentInput struct {
 	// The Node ID of the deployment to be deleted.
 	ID string `json:"id"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of DeleteDeployment
 type DeleteDeploymentPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
-// Autogenerated input type of DeleteDiscussionComment
-type DeleteDiscussionCommentInput struct {
-	// The Node id of the discussion comment to delete.
-	ID string `json:"id"`
+// Autogenerated input type of DeleteIpAllowListEntry
+type DeleteIPAllowListEntryInput struct {
+	// The ID of the IP allow list entry to delete.
+	IPAllowListEntryID string `json:"ipAllowListEntryId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
-// Autogenerated return type of DeleteDiscussionComment
-type DeleteDiscussionCommentPayload struct {
+// Autogenerated return type of DeleteIpAllowListEntry
+type DeleteIPAllowListEntryPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The discussion comment that was just deleted.
-	Comment *DiscussionComment `json:"comment,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
+	// The IP allow list entry that was deleted.
+	IPAllowListEntry *IPAllowListEntry `json:"ipAllowListEntry"`
 }
 
-// Autogenerated input type of DeleteDiscussion
-type DeleteDiscussionInput struct {
-	// The id of the discussion to delete.
+// Autogenerated input type of DeleteIssueComment
+type DeleteIssueCommentInput struct {
+	// The ID of the comment to delete.
 	ID string `json:"id"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of DeleteDiscussion
-type DeleteDiscussionPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The discussion that was just deleted.
-	Discussion *Discussion `json:"discussion,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
-// Autogenerated input type of DeleteEnvironment
-type DeleteEnvironmentInput struct {
-	// The Node ID of the environment to be deleted.
-	ID string `json:"id"`
+// Autogenerated return type of DeleteIssueComment
+type DeleteIssueCommentPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of DeleteEnvironment
-type DeleteEnvironmentPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated input type of DeleteIpAllowListEntry
-type DeleteIPAllowListEntryInput struct {
-	// The ID of the IP allow list entry to delete.
-	IPAllowListEntryID string `json:"ipAllowListEntryId"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of DeleteIpAllowListEntry
-type DeleteIPAllowListEntryPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The IP allow list entry that was deleted.
-	IPAllowListEntry *IPAllowListEntry `json:"ipAllowListEntry,omitempty"`
-}
-
-// Autogenerated input type of DeleteIssueComment
-type DeleteIssueCommentInput struct {
-	// The ID of the comment to delete.
-	ID string `json:"id"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of DeleteIssueComment
-type DeleteIssueCommentPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated input type of DeleteIssue
@@ -3293,15 +2777,15 @@ type DeleteIssueInput struct {
 	// The ID of the issue to delete.
 	IssueID string `json:"issueId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of DeleteIssue
 type DeleteIssuePayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The repository the issue belonged to
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 }
 
 // Autogenerated input type of DeleteProjectCard
@@ -3309,17 +2793,17 @@ type DeleteProjectCardInput struct {
 	// The id of the card to delete.
 	CardID string `json:"cardId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of DeleteProjectCard
 type DeleteProjectCardPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The column the deleted card was in.
-	Column *ProjectColumn `json:"column,omitempty"`
+	Column *ProjectColumn `json:"column"`
 	// The deleted card ID.
-	DeletedCardID *string `json:"deletedCardId,omitempty"`
+	DeletedCardID *string `json:"deletedCardId"`
 }
 
 // Autogenerated input type of DeleteProjectColumn
@@ -3327,17 +2811,17 @@ type DeleteProjectColumnInput struct {
 	// The id of the column to delete.
 	ColumnID string `json:"columnId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of DeleteProjectColumn
 type DeleteProjectColumnPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The deleted column ID.
-	DeletedColumnID *string `json:"deletedColumnId,omitempty"`
+	DeletedColumnID *string `json:"deletedColumnId"`
 	// The project the deleted column was in.
-	Project *Project `json:"project,omitempty"`
+	Project *Project `json:"project"`
 }
 
 // Autogenerated input type of DeleteProject
@@ -3345,33 +2829,15 @@ type DeleteProjectInput struct {
 	// The Project ID to update.
 	ProjectID string `json:"projectId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated input type of DeleteProjectNextItem
-type DeleteProjectNextItemInput struct {
-	// The ID of the Project from which the item should be removed.
-	ProjectID string `json:"projectId"`
-	// The ID of the item to be removed.
-	ItemID string `json:"itemId"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of DeleteProjectNextItem
-type DeleteProjectNextItemPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The ID of the deleted item.
-	DeletedItemID *string `json:"deletedItemId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of DeleteProject
 type DeleteProjectPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The repository or organization the project was removed from.
-	Owner ProjectOwner `json:"owner,omitempty"`
+	Owner ProjectOwner `json:"owner"`
 }
 
 // Autogenerated input type of DeletePullRequestReviewComment
@@ -3379,15 +2845,15 @@ type DeletePullRequestReviewCommentInput struct {
 	// The ID of the comment to delete.
 	ID string `json:"id"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of DeletePullRequestReviewComment
 type DeletePullRequestReviewCommentPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The pull request review the deleted comment belonged to.
-	PullRequestReview *PullRequestReview `json:"pullRequestReview,omitempty"`
+	PullRequestReview *PullRequestReview `json:"pullRequestReview"`
 }
 
 // Autogenerated input type of DeletePullRequestReview
@@ -3395,15 +2861,15 @@ type DeletePullRequestReviewInput struct {
 	// The Node ID of the pull request review to delete.
 	PullRequestReviewID string `json:"pullRequestReviewId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of DeletePullRequestReview
 type DeletePullRequestReviewPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The deleted pull request review.
-	PullRequestReview *PullRequestReview `json:"pullRequestReview,omitempty"`
+	PullRequestReview *PullRequestReview `json:"pullRequestReview"`
 }
 
 // Autogenerated input type of DeleteRef
@@ -3411,13 +2877,13 @@ type DeleteRefInput struct {
 	// The Node ID of the Ref to be deleted.
 	RefID string `json:"refId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of DeleteRef
 type DeleteRefPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated input type of DeleteTeamDiscussionComment
@@ -3425,13 +2891,13 @@ type DeleteTeamDiscussionCommentInput struct {
 	// The ID of the comment to delete.
 	ID string `json:"id"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of DeleteTeamDiscussionComment
 type DeleteTeamDiscussionCommentPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated input type of DeleteTeamDiscussion
@@ -3439,13 +2905,13 @@ type DeleteTeamDiscussionInput struct {
 	// The discussion ID to delete.
 	ID string `json:"id"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of DeleteTeamDiscussion
 type DeleteTeamDiscussionPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated input type of DeleteVerifiableDomain
@@ -3453,35 +2919,35 @@ type DeleteVerifiableDomainInput struct {
 	// The ID of the verifiable domain to delete.
 	ID string `json:"id"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of DeleteVerifiableDomain
 type DeleteVerifiableDomainPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The owning account from which the domain was deleted.
-	Owner VerifiableDomainOwner `json:"owner,omitempty"`
+	Owner VerifiableDomainOwner `json:"owner"`
 }
 
 // Represents a 'demilestoned' event on a given issue or pull request.
 type DemilestonedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
 	// Identifies the milestone title associated with the 'demilestoned' event.
 	MilestoneTitle string `json:"milestoneTitle"`
 	// Object referenced by event.
-	Subject MilestoneItem `json:"subject,omitempty"`
+	Subject MilestoneItem `json:"subject"`
 }
 
-func (DemilestonedEvent) IsIssueTimelineItems()       {}
 func (DemilestonedEvent) IsPullRequestTimelineItems() {}
-func (DemilestonedEvent) IsPullRequestTimelineItem()  {}
-func (DemilestonedEvent) IsNode()                     {}
+func (DemilestonedEvent) IsIssueTimelineItems()       {}
 func (DemilestonedEvent) IsIssueTimelineItem()        {}
+func (DemilestonedEvent) IsNode()                     {}
+func (DemilestonedEvent) IsPullRequestTimelineItem()  {}
 
 // A repository deploy key.
 type DeployKey struct {
@@ -3503,11 +2969,11 @@ func (DeployKey) IsNode() {}
 // The connection type for DeployKey.
 type DeployKeyConnection struct {
 	// A list of edges.
-	Edges []*DeployKeyEdge `json:"edges,omitempty"`
+	Edges []*DeployKeyEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*DeployKey `json:"nodes,omitempty"`
+	Nodes []*DeployKey `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -3517,24 +2983,24 @@ type DeployKeyEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *DeployKey `json:"node,omitempty"`
+	Node *DeployKey `json:"node"`
 }
 
 // Represents a 'deployed' event on a given pull request.
 type DeployedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
+	DatabaseID *int `json:"databaseId"`
 	// The deployment associated with the 'deployed' event.
-	Deployment *Deployment `json:"deployment,omitempty"`
+	Deployment *Deployment `json:"deployment"`
 	ID         string      `json:"id"`
 	// PullRequest referenced by event.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 	// The ref associated with the 'deployed' event.
-	Ref *Ref `json:"ref,omitempty"`
+	Ref *Ref `json:"ref"`
 }
 
 func (DeployedEvent) IsPullRequestTimelineItems() {}
@@ -3544,38 +3010,38 @@ func (DeployedEvent) IsNode()                     {}
 // Represents triggered deployment instance.
 type Deployment struct {
 	// Identifies the commit sha of the deployment.
-	Commit *Commit `json:"commit,omitempty"`
+	Commit *Commit `json:"commit"`
 	// Identifies the oid of the deployment commit, even if the commit has been deleted.
 	CommitOid string `json:"commitOid"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the actor who triggered the deployment.
-	Creator Actor `json:"creator,omitempty"`
+	Creator Actor `json:"creator"`
 	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
+	DatabaseID *int `json:"databaseId"`
 	// The deployment description.
-	Description *string `json:"description,omitempty"`
+	Description *string `json:"description"`
 	// The latest environment to which this deployment was made.
-	Environment *string `json:"environment,omitempty"`
+	Environment *string `json:"environment"`
 	ID          string  `json:"id"`
 	// The latest environment to which this deployment was made.
-	LatestEnvironment *string `json:"latestEnvironment,omitempty"`
+	LatestEnvironment *string `json:"latestEnvironment"`
 	// The latest status of this deployment.
-	LatestStatus *DeploymentStatus `json:"latestStatus,omitempty"`
+	LatestStatus *DeploymentStatus `json:"latestStatus"`
 	// The original environment to which this deployment was made.
-	OriginalEnvironment *string `json:"originalEnvironment,omitempty"`
+	OriginalEnvironment *string `json:"originalEnvironment"`
 	// Extra information that a deployment system might need.
-	Payload *string `json:"payload,omitempty"`
+	Payload *string `json:"payload"`
 	// Identifies the Ref of the deployment, if the deployment was created by ref.
-	Ref *Ref `json:"ref,omitempty"`
+	Ref *Ref `json:"ref"`
 	// Identifies the repository associated with the deployment.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The current state of the deployment.
-	State *DeploymentState `json:"state,omitempty"`
+	State *DeploymentState `json:"state"`
 	// A list of statuses associated with the deployment.
-	Statuses *DeploymentStatusConnection `json:"statuses,omitempty"`
+	Statuses *DeploymentStatusConnection `json:"statuses"`
 	// The deployment task.
-	Task *string `json:"task,omitempty"`
+	Task *string `json:"task"`
 	// Identifies the date and time when the object was last updated.
 	UpdatedAt time.Time `json:"updatedAt"`
 }
@@ -3585,11 +3051,11 @@ func (Deployment) IsNode() {}
 // The connection type for Deployment.
 type DeploymentConnection struct {
 	// A list of edges.
-	Edges []*DeploymentEdge `json:"edges,omitempty"`
+	Edges []*DeploymentEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*Deployment `json:"nodes,omitempty"`
+	Nodes []*Deployment `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -3599,20 +3065,20 @@ type DeploymentEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *Deployment `json:"node,omitempty"`
+	Node *Deployment `json:"node"`
 }
 
 // Represents a 'deployment_environment_changed' event on a given pull request.
 type DeploymentEnvironmentChangedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// The deployment status that updated the deployment environment.
-	DeploymentStatus *DeploymentStatus `json:"deploymentStatus,omitempty"`
+	DeploymentStatus *DeploymentStatus `json:"deploymentStatus"`
 	ID               string            `json:"id"`
 	// PullRequest referenced by event.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 }
 
 func (DeploymentEnvironmentChangedEvent) IsPullRequestTimelineItems() {}
@@ -3627,144 +3093,21 @@ type DeploymentOrder struct {
 	Direction OrderDirection `json:"direction"`
 }
 
-// A protection rule.
-type DeploymentProtectionRule struct {
-	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
-	// The teams or users that can review the deployment
-	Reviewers *DeploymentReviewerConnection `json:"reviewers,omitempty"`
-	// The timeout in minutes for this protection rule.
-	Timeout int `json:"timeout"`
-	// The type of protection rule.
-	Type DeploymentProtectionRuleType `json:"type"`
-}
-
-// The connection type for DeploymentProtectionRule.
-type DeploymentProtectionRuleConnection struct {
-	// A list of edges.
-	Edges []*DeploymentProtectionRuleEdge `json:"edges,omitempty"`
-	// A list of nodes.
-	Nodes []*DeploymentProtectionRule `json:"nodes,omitempty"`
-	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
-	// Identifies the total count of items in the connection.
-	TotalCount int `json:"totalCount"`
-}
-
-// An edge in a connection.
-type DeploymentProtectionRuleEdge struct {
-	// A cursor for use in pagination.
-	Cursor string `json:"cursor"`
-	// The item at the end of the edge.
-	Node *DeploymentProtectionRule `json:"node,omitempty"`
-}
-
-// A request to deploy a workflow run to an environment.
-type DeploymentRequest struct {
-	// Whether or not the current user can approve the deployment
-	CurrentUserCanApprove bool `json:"currentUserCanApprove"`
-	// The target environment of the deployment
-	Environment *Environment `json:"environment,omitempty"`
-	// The teams or users that can review the deployment
-	Reviewers *DeploymentReviewerConnection `json:"reviewers,omitempty"`
-	// The wait timer in minutes configured in the environment
-	WaitTimer int `json:"waitTimer"`
-	// The wait timer in minutes configured in the environment
-	WaitTimerStartedAt *time.Time `json:"waitTimerStartedAt,omitempty"`
-}
-
-// The connection type for DeploymentRequest.
-type DeploymentRequestConnection struct {
-	// A list of edges.
-	Edges []*DeploymentRequestEdge `json:"edges,omitempty"`
-	// A list of nodes.
-	Nodes []*DeploymentRequest `json:"nodes,omitempty"`
-	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
-	// Identifies the total count of items in the connection.
-	TotalCount int `json:"totalCount"`
-}
-
-// An edge in a connection.
-type DeploymentRequestEdge struct {
-	// A cursor for use in pagination.
-	Cursor string `json:"cursor"`
-	// The item at the end of the edge.
-	Node *DeploymentRequest `json:"node,omitempty"`
-}
-
-// A deployment review.
-type DeploymentReview struct {
-	// The comment the user left.
-	Comment string `json:"comment"`
-	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
-	// The environments approved or rejected
-	Environments *EnvironmentConnection `json:"environments,omitempty"`
-	ID           string                 `json:"id"`
-	// The decision of the user.
-	State DeploymentReviewState `json:"state"`
-	// The user that reviewed the deployment.
-	User *User `json:"user,omitempty"`
-}
-
-func (DeploymentReview) IsNode() {}
-
-// The connection type for DeploymentReview.
-type DeploymentReviewConnection struct {
-	// A list of edges.
-	Edges []*DeploymentReviewEdge `json:"edges,omitempty"`
-	// A list of nodes.
-	Nodes []*DeploymentReview `json:"nodes,omitempty"`
-	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
-	// Identifies the total count of items in the connection.
-	TotalCount int `json:"totalCount"`
-}
-
-// An edge in a connection.
-type DeploymentReviewEdge struct {
-	// A cursor for use in pagination.
-	Cursor string `json:"cursor"`
-	// The item at the end of the edge.
-	Node *DeploymentReview `json:"node,omitempty"`
-}
-
-// The connection type for DeploymentReviewer.
-type DeploymentReviewerConnection struct {
-	// A list of edges.
-	Edges []*DeploymentReviewerEdge `json:"edges,omitempty"`
-	// A list of nodes.
-	Nodes []DeploymentReviewer `json:"nodes,omitempty"`
-	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
-	// Identifies the total count of items in the connection.
-	TotalCount int `json:"totalCount"`
-}
-
-// An edge in a connection.
-type DeploymentReviewerEdge struct {
-	// A cursor for use in pagination.
-	Cursor string `json:"cursor"`
-	// The item at the end of the edge.
-	Node DeploymentReviewer `json:"node,omitempty"`
-}
-
 // Describes the status of a given deployment attempt.
 type DeploymentStatus struct {
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the actor who triggered the deployment.
-	Creator Actor `json:"creator,omitempty"`
+	Creator Actor `json:"creator"`
 	// Identifies the deployment associated with status.
-	Deployment *Deployment `json:"deployment,omitempty"`
+	Deployment *Deployment `json:"deployment"`
 	// Identifies the description of the deployment.
-	Description *string `json:"description,omitempty"`
+	Description *string `json:"description"`
 	// Identifies the environment URL of the deployment.
-	EnvironmentURL *string `json:"environmentUrl,omitempty"`
+	EnvironmentURL *string `json:"environmentUrl"`
 	ID             string  `json:"id"`
 	// Identifies the log URL of the deployment.
-	LogURL *string `json:"logUrl,omitempty"`
+	LogURL *string `json:"logUrl"`
 	// Identifies the current state of the deployment.
 	State DeploymentStatusState `json:"state"`
 	// Identifies the date and time when the object was last updated.
@@ -3776,11 +3119,11 @@ func (DeploymentStatus) IsNode() {}
 // The connection type for DeploymentStatus.
 type DeploymentStatusConnection struct {
 	// A list of edges.
-	Edges []*DeploymentStatusEdge `json:"edges,omitempty"`
+	Edges []*DeploymentStatusEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*DeploymentStatus `json:"nodes,omitempty"`
+	Nodes []*DeploymentStatus `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -3790,7 +3133,7 @@ type DeploymentStatusEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *DeploymentStatus `json:"node,omitempty"`
+	Node *DeploymentStatus `json:"node"`
 }
 
 // Autogenerated input type of DisablePullRequestAutoMerge
@@ -3798,309 +3141,38 @@ type DisablePullRequestAutoMergeInput struct {
 	// ID of the pull request to disable auto merge on.
 	PullRequestID string `json:"pullRequestId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of DisablePullRequestAutoMerge
 type DisablePullRequestAutoMergePayload struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The pull request auto merge was disabled on.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 }
 
 // Represents a 'disconnected' event on a given issue or pull request.
 type DisconnectedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
 	// Reference originated in a different repository.
 	IsCrossRepository bool `json:"isCrossRepository"`
 	// Issue or pull request from which the issue was disconnected.
-	Source ReferencedSubject `json:"source,omitempty"`
+	Source ReferencedSubject `json:"source"`
 	// Issue or pull request which was disconnected.
-	Subject ReferencedSubject `json:"subject,omitempty"`
+	Subject ReferencedSubject `json:"subject"`
 }
 
-func (DisconnectedEvent) IsIssueTimelineItems()       {}
 func (DisconnectedEvent) IsPullRequestTimelineItems() {}
+func (DisconnectedEvent) IsIssueTimelineItems()       {}
 func (DisconnectedEvent) IsNode()                     {}
 
-// A discussion in a repository.
-type Discussion struct {
-	// Reason that the conversation was locked.
-	ActiveLockReason *LockReason `json:"activeLockReason,omitempty"`
-	// The comment chosen as this discussion's answer, if any.
-	Answer *DiscussionComment `json:"answer,omitempty"`
-	// The time when a user chose this discussion's answer, if answered.
-	AnswerChosenAt *time.Time `json:"answerChosenAt,omitempty"`
-	// The user who chose this discussion's answer, if answered.
-	AnswerChosenBy Actor `json:"answerChosenBy,omitempty"`
-	// The actor who authored the comment.
-	Author Actor `json:"author,omitempty"`
-	// Author's association with the subject of the comment.
-	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation"`
-	// The main text of the discussion post.
-	Body string `json:"body"`
-	// The body rendered to HTML.
-	BodyHTML string `json:"bodyHTML"`
-	// The body rendered to text.
-	BodyText string `json:"bodyText"`
-	// The category for this discussion.
-	Category *DiscussionCategory `json:"category,omitempty"`
-	// The replies to the discussion.
-	Comments *DiscussionCommentConnection `json:"comments,omitempty"`
-	// Identifies the date and time when the object was created.
-	CreatedAt time.Time `json:"createdAt"`
-	// Check if this comment was created via an email reply.
-	CreatedViaEmail bool `json:"createdViaEmail"`
-	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
-	// The actor who edited the comment.
-	Editor Actor  `json:"editor,omitempty"`
-	ID     string `json:"id"`
-	// Check if this comment was edited and includes an edit with the creation data
-	IncludesCreatedEdit bool `json:"includesCreatedEdit"`
-	// A list of labels associated with the object.
-	Labels *LabelConnection `json:"labels,omitempty"`
-	// The moment the editor made the last edit
-	LastEditedAt *time.Time `json:"lastEditedAt,omitempty"`
-	// `true` if the object is locked
-	Locked bool `json:"locked"`
-	// The number identifying this discussion within the repository.
-	Number int `json:"number"`
-	// Identifies when the comment was published at.
-	PublishedAt *time.Time `json:"publishedAt,omitempty"`
-	// A list of reactions grouped by content left on the subject.
-	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`
-	// A list of Reactions left on the Issue.
-	Reactions *ReactionConnection `json:"reactions,omitempty"`
-	// The repository associated with this node.
-	Repository *Repository `json:"repository,omitempty"`
-	// The path for this discussion.
-	ResourcePath string `json:"resourcePath"`
-	// The title of this discussion.
-	Title string `json:"title"`
-	// Identifies the date and time when the object was last updated.
-	UpdatedAt time.Time `json:"updatedAt"`
-	// Number of upvotes that this subject has received.
-	UpvoteCount int `json:"upvoteCount"`
-	// The URL for this discussion.
-	URL string `json:"url"`
-	// A list of edits to this content.
-	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`
-	// Check if the current viewer can delete this object.
-	ViewerCanDelete bool `json:"viewerCanDelete"`
-	// Can user react to this subject
-	ViewerCanReact bool `json:"viewerCanReact"`
-	// Check if the viewer is able to change their subscription status for the repository.
-	ViewerCanSubscribe bool `json:"viewerCanSubscribe"`
-	// Check if the current viewer can update this object.
-	ViewerCanUpdate bool `json:"viewerCanUpdate"`
-	// Whether or not the current user can add or remove an upvote on this subject.
-	ViewerCanUpvote bool `json:"viewerCanUpvote"`
-	// Did the viewer author this comment.
-	ViewerDidAuthor bool `json:"viewerDidAuthor"`
-	// Whether or not the current user has already upvoted this subject.
-	ViewerHasUpvoted bool `json:"viewerHasUpvoted"`
-	// Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
-	ViewerSubscription *SubscriptionState `json:"viewerSubscription,omitempty"`
-}
-
-func (Discussion) IsComment()          {}
-func (Discussion) IsUpdatable()        {}
-func (Discussion) IsDeletable()        {}
-func (Discussion) IsLabelable()        {}
-func (Discussion) IsLockable()         {}
-func (Discussion) IsRepositoryNode()   {}
-func (Discussion) IsSubscribable()     {}
-func (Discussion) IsReactable()        {}
-func (Discussion) IsVotable()          {}
-func (Discussion) IsNode()             {}
-func (Discussion) IsSearchResultItem() {}
-
-// A category for discussions in a repository.
-type DiscussionCategory struct {
-	// Identifies the date and time when the object was created.
-	CreatedAt time.Time `json:"createdAt"`
-	// A description of this category.
-	Description *string `json:"description,omitempty"`
-	// An emoji representing this category.
-	Emoji string `json:"emoji"`
-	// This category's emoji rendered as HTML.
-	EmojiHTML string `json:"emojiHTML"`
-	ID        string `json:"id"`
-	// Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation.
-	IsAnswerable bool `json:"isAnswerable"`
-	// The name of this category.
-	Name string `json:"name"`
-	// The repository associated with this node.
-	Repository *Repository `json:"repository,omitempty"`
-	// Identifies the date and time when the object was last updated.
-	UpdatedAt time.Time `json:"updatedAt"`
-}
-
-func (DiscussionCategory) IsNode()           {}
-func (DiscussionCategory) IsRepositoryNode() {}
-
-// The connection type for DiscussionCategory.
-type DiscussionCategoryConnection struct {
-	// A list of edges.
-	Edges []*DiscussionCategoryEdge `json:"edges,omitempty"`
-	// A list of nodes.
-	Nodes []*DiscussionCategory `json:"nodes,omitempty"`
-	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
-	// Identifies the total count of items in the connection.
-	TotalCount int `json:"totalCount"`
-}
-
-// An edge in a connection.
-type DiscussionCategoryEdge struct {
-	// A cursor for use in pagination.
-	Cursor string `json:"cursor"`
-	// The item at the end of the edge.
-	Node *DiscussionCategory `json:"node,omitempty"`
-}
-
-// A comment on a discussion.
-type DiscussionComment struct {
-	// The actor who authored the comment.
-	Author Actor `json:"author,omitempty"`
-	// Author's association with the subject of the comment.
-	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation"`
-	// The body as Markdown.
-	Body string `json:"body"`
-	// The body rendered to HTML.
-	BodyHTML string `json:"bodyHTML"`
-	// The body rendered to text.
-	BodyText string `json:"bodyText"`
-	// Identifies the date and time when the object was created.
-	CreatedAt time.Time `json:"createdAt"`
-	// Check if this comment was created via an email reply.
-	CreatedViaEmail bool `json:"createdViaEmail"`
-	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
-	// The time when this replied-to comment was deleted
-	DeletedAt *time.Time `json:"deletedAt,omitempty"`
-	// The discussion this comment was created in
-	Discussion *Discussion `json:"discussion,omitempty"`
-	// The actor who edited the comment.
-	Editor Actor  `json:"editor,omitempty"`
-	ID     string `json:"id"`
-	// Check if this comment was edited and includes an edit with the creation data
-	IncludesCreatedEdit bool `json:"includesCreatedEdit"`
-	// Has this comment been chosen as the answer of its discussion?
-	IsAnswer bool `json:"isAnswer"`
-	// Returns whether or not a comment has been minimized.
-	IsMinimized bool `json:"isMinimized"`
-	// The moment the editor made the last edit
-	LastEditedAt *time.Time `json:"lastEditedAt,omitempty"`
-	// Returns why the comment was minimized.
-	MinimizedReason *string `json:"minimizedReason,omitempty"`
-	// Identifies when the comment was published at.
-	PublishedAt *time.Time `json:"publishedAt,omitempty"`
-	// A list of reactions grouped by content left on the subject.
-	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`
-	// A list of Reactions left on the Issue.
-	Reactions *ReactionConnection `json:"reactions,omitempty"`
-	// The threaded replies to this comment.
-	Replies *DiscussionCommentConnection `json:"replies,omitempty"`
-	// The discussion comment this comment is a reply to
-	ReplyTo *DiscussionComment `json:"replyTo,omitempty"`
-	// The path for this discussion comment.
-	ResourcePath string `json:"resourcePath"`
-	// Identifies the date and time when the object was last updated.
-	UpdatedAt time.Time `json:"updatedAt"`
-	// Number of upvotes that this subject has received.
-	UpvoteCount int `json:"upvoteCount"`
-	// The URL for this discussion comment.
-	URL string `json:"url"`
-	// A list of edits to this content.
-	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`
-	// Check if the current viewer can delete this object.
-	ViewerCanDelete bool `json:"viewerCanDelete"`
-	// Can the current user mark this comment as an answer?
-	ViewerCanMarkAsAnswer bool `json:"viewerCanMarkAsAnswer"`
-	// Check if the current viewer can minimize this object.
-	ViewerCanMinimize bool `json:"viewerCanMinimize"`
-	// Can user react to this subject
-	ViewerCanReact bool `json:"viewerCanReact"`
-	// Can the current user unmark this comment as an answer?
-	ViewerCanUnmarkAsAnswer bool `json:"viewerCanUnmarkAsAnswer"`
-	// Check if the current viewer can update this object.
-	ViewerCanUpdate bool `json:"viewerCanUpdate"`
-	// Whether or not the current user can add or remove an upvote on this subject.
-	ViewerCanUpvote bool `json:"viewerCanUpvote"`
-	// Reasons why the current viewer can not update this comment.
-	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons,omitempty"`
-	// Did the viewer author this comment.
-	ViewerDidAuthor bool `json:"viewerDidAuthor"`
-	// Whether or not the current user has already upvoted this subject.
-	ViewerHasUpvoted bool `json:"viewerHasUpvoted"`
-}
-
-func (DiscussionComment) IsComment()          {}
-func (DiscussionComment) IsDeletable()        {}
-func (DiscussionComment) IsMinimizable()      {}
-func (DiscussionComment) IsUpdatable()        {}
-func (DiscussionComment) IsUpdatableComment() {}
-func (DiscussionComment) IsReactable()        {}
-func (DiscussionComment) IsVotable()          {}
-func (DiscussionComment) IsNode()             {}
-
-// The connection type for DiscussionComment.
-type DiscussionCommentConnection struct {
-	// A list of edges.
-	Edges []*DiscussionCommentEdge `json:"edges,omitempty"`
-	// A list of nodes.
-	Nodes []*DiscussionComment `json:"nodes,omitempty"`
-	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
-	// Identifies the total count of items in the connection.
-	TotalCount int `json:"totalCount"`
-}
-
-// An edge in a connection.
-type DiscussionCommentEdge struct {
-	// A cursor for use in pagination.
-	Cursor string `json:"cursor"`
-	// The item at the end of the edge.
-	Node *DiscussionComment `json:"node,omitempty"`
-}
-
-// The connection type for Discussion.
-type DiscussionConnection struct {
-	// A list of edges.
-	Edges []*DiscussionEdge `json:"edges,omitempty"`
-	// A list of nodes.
-	Nodes []*Discussion `json:"nodes,omitempty"`
-	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
-	// Identifies the total count of items in the connection.
-	TotalCount int `json:"totalCount"`
-}
-
-// An edge in a connection.
-type DiscussionEdge struct {
-	// A cursor for use in pagination.
-	Cursor string `json:"cursor"`
-	// The item at the end of the edge.
-	Node *Discussion `json:"node,omitempty"`
-}
-
-// Ways in which lists of discussions can be ordered upon return.
-type DiscussionOrder struct {
-	// The field by which to order discussions.
-	Field DiscussionOrderField `json:"field"`
-	// The direction in which to order discussions by the specified field.
-	Direction OrderDirection `json:"direction"`
-}
-
 // Autogenerated input type of DismissPullRequestReview
 type DismissPullRequestReviewInput struct {
 	// The Node ID of the pull request review to modify.
@@ -4108,33 +3180,15 @@ type DismissPullRequestReviewInput struct {
 	// The contents of the pull request review dismissal message.
 	Message string `json:"message"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of DismissPullRequestReview
 type DismissPullRequestReviewPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The dismissed pull request review.
-	PullRequestReview *PullRequestReview `json:"pullRequestReview,omitempty"`
-}
-
-// Autogenerated input type of DismissRepositoryVulnerabilityAlert
-type DismissRepositoryVulnerabilityAlertInput struct {
-	// The Dependabot alert ID to dismiss.
-	RepositoryVulnerabilityAlertID string `json:"repositoryVulnerabilityAlertId"`
-	// The reason the Dependabot alert is being dismissed.
-	DismissReason DismissReason `json:"dismissReason"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of DismissRepositoryVulnerabilityAlert
-type DismissRepositoryVulnerabilityAlertPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The Dependabot alert that was dismissed
-	RepositoryVulnerabilityAlert *RepositoryVulnerabilityAlert `json:"repositoryVulnerabilityAlert,omitempty"`
+	PullRequestReview *PullRequestReview `json:"pullRequestReview"`
 }
 
 // Specifies a review comment to be left with a Pull Request Review.
@@ -4154,11 +3208,11 @@ type DraftPullRequestReviewThread struct {
 	// The line of the blob to which the thread refers. The end of the line range for multi-line comments.
 	Line int `json:"line"`
 	// The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
-	Side *DiffSide `json:"side,omitempty"`
+	Side *DiffSide `json:"side"`
 	// The first line of the range to which the comment refers.
-	StartLine *int `json:"startLine,omitempty"`
+	StartLine *int `json:"startLine"`
 	// The side of the diff on which the start line resides.
-	StartSide *DiffSide `json:"startSide,omitempty"`
+	StartSide *DiffSide `json:"startSide"`
 	// Body of the comment to leave.
 	Body string `json:"body"`
 }
@@ -4168,25 +3222,25 @@ type EnablePullRequestAutoMergeInput struct {
 	// ID of the pull request to enable auto-merge on.
 	PullRequestID string `json:"pullRequestId"`
 	// Commit headline to use for the commit when the PR is mergable; if omitted, a default message will be used.
-	CommitHeadline *string `json:"commitHeadline,omitempty"`
+	CommitHeadline *string `json:"commitHeadline"`
 	// Commit body to use for the commit when the PR is mergable; if omitted, a default message will be used.
-	CommitBody *string `json:"commitBody,omitempty"`
+	CommitBody *string `json:"commitBody"`
 	// The merge method to use. If omitted, defaults to 'MERGE'
-	MergeMethod *PullRequestMergeMethod `json:"mergeMethod,omitempty"`
+	MergeMethod *PullRequestMergeMethod `json:"mergeMethod"`
 	// The email address to associate with this merge.
-	AuthorEmail *string `json:"authorEmail,omitempty"`
+	AuthorEmail *string `json:"authorEmail"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of EnablePullRequestAutoMerge
 type EnablePullRequestAutoMergePayload struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The pull request auto-merge was enabled on.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 }
 
 // An account to manage multiple organizations with consolidated policy and billing.
@@ -4194,26 +3248,26 @@ type Enterprise struct {
 	// A URL pointing to the enterprise's public avatar.
 	AvatarURL string `json:"avatarUrl"`
 	// Enterprise billing information visible to enterprise billing managers.
-	BillingInfo *EnterpriseBillingInfo `json:"billingInfo,omitempty"`
+	BillingInfo *EnterpriseBillingInfo `json:"billingInfo"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
+	DatabaseID *int `json:"databaseId"`
 	// The description of the enterprise.
-	Description *string `json:"description,omitempty"`
+	Description *string `json:"description"`
 	// The description of the enterprise as HTML.
 	DescriptionHTML string `json:"descriptionHTML"`
 	ID              string `json:"id"`
 	// The location of the enterprise.
-	Location *string `json:"location,omitempty"`
+	Location *string `json:"location"`
 	// A list of users who are members of this enterprise.
-	Members *EnterpriseMemberConnection `json:"members,omitempty"`
+	Members *EnterpriseMemberConnection `json:"members"`
 	// The name of the enterprise.
 	Name string `json:"name"`
 	// A list of organizations that belong to this enterprise.
-	Organizations *OrganizationConnection `json:"organizations,omitempty"`
+	Organizations *OrganizationConnection `json:"organizations"`
 	// Enterprise information only visible to enterprise owners.
-	OwnerInfo *EnterpriseOwnerInfo `json:"ownerInfo,omitempty"`
+	OwnerInfo *EnterpriseOwnerInfo `json:"ownerInfo"`
 	// The HTTP path for this enterprise.
 	ResourcePath string `json:"resourcePath"`
 	// The URL-friendly identifier for the enterprise.
@@ -4221,25 +3275,25 @@ type Enterprise struct {
 	// The HTTP URL for this enterprise.
 	URL string `json:"url"`
 	// A list of user accounts on this enterprise.
-	UserAccounts *EnterpriseUserAccountConnection `json:"userAccounts,omitempty"`
+	UserAccounts *EnterpriseUserAccountConnection `json:"userAccounts"`
 	// Is the current viewer an admin of this enterprise?
 	ViewerIsAdmin bool `json:"viewerIsAdmin"`
 	// The URL of the enterprise website.
-	WebsiteURL *string `json:"websiteUrl,omitempty"`
+	WebsiteURL *string `json:"websiteUrl"`
 }
 
-func (Enterprise) IsIPAllowListOwner()      {}
 func (Enterprise) IsVerifiableDomainOwner() {}
 func (Enterprise) IsNode()                  {}
+func (Enterprise) IsIPAllowListOwner()      {}
 
 // The connection type for User.
 type EnterpriseAdministratorConnection struct {
 	// A list of edges.
-	Edges []*EnterpriseAdministratorEdge `json:"edges,omitempty"`
+	Edges []*EnterpriseAdministratorEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*User `json:"nodes,omitempty"`
+	Nodes []*User `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -4249,7 +3303,7 @@ type EnterpriseAdministratorEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *User `json:"node,omitempty"`
+	Node *User `json:"node"`
 	// The role of the administrator.
 	Role EnterpriseAdministratorRole `json:"role"`
 }
@@ -4259,14 +3313,14 @@ type EnterpriseAdministratorInvitation struct {
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// The email of the person who was invited to the enterprise.
-	Email *string `json:"email,omitempty"`
+	Email *string `json:"email"`
 	// The enterprise the invitation is for.
-	Enterprise *Enterprise `json:"enterprise,omitempty"`
+	Enterprise *Enterprise `json:"enterprise"`
 	ID         string      `json:"id"`
 	// The user who was invited to the enterprise.
-	Invitee *User `json:"invitee,omitempty"`
+	Invitee *User `json:"invitee"`
 	// The user who created the invitation.
-	Inviter *User `json:"inviter,omitempty"`
+	Inviter *User `json:"inviter"`
 	// The invitee's pending role in the enterprise (owner or billing_manager).
 	Role EnterpriseAdministratorRole `json:"role"`
 }
@@ -4276,11 +3330,11 @@ func (EnterpriseAdministratorInvitation) IsNode() {}
 // The connection type for EnterpriseAdministratorInvitation.
 type EnterpriseAdministratorInvitationConnection struct {
 	// A list of edges.
-	Edges []*EnterpriseAdministratorInvitationEdge `json:"edges,omitempty"`
+	Edges []*EnterpriseAdministratorInvitationEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*EnterpriseAdministratorInvitation `json:"nodes,omitempty"`
+	Nodes []*EnterpriseAdministratorInvitation `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -4290,7 +3344,7 @@ type EnterpriseAdministratorInvitationEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *EnterpriseAdministratorInvitation `json:"node,omitempty"`
+	Node *EnterpriseAdministratorInvitation `json:"node"`
 }
 
 // Ordering options for enterprise administrator invitation connections
@@ -4332,22 +3386,22 @@ type EnterpriseBillingInfo struct {
 // An identity provider configured to provision identities for an enterprise.
 type EnterpriseIdentityProvider struct {
 	// The digest algorithm used to sign SAML requests for the identity provider.
-	DigestMethod *SamlDigestAlgorithm `json:"digestMethod,omitempty"`
+	DigestMethod *SamlDigestAlgorithm `json:"digestMethod"`
 	// The enterprise this identity provider belongs to.
-	Enterprise *Enterprise `json:"enterprise,omitempty"`
+	Enterprise *Enterprise `json:"enterprise"`
 	// ExternalIdentities provisioned by this identity provider.
-	ExternalIdentities *ExternalIdentityConnection `json:"externalIdentities,omitempty"`
+	ExternalIdentities *ExternalIdentityConnection `json:"externalIdentities"`
 	ID                 string                      `json:"id"`
 	// The x509 certificate used by the identity provider to sign assertions and responses.
-	IdpCertificate *string `json:"idpCertificate,omitempty"`
+	IdpCertificate *string `json:"idpCertificate"`
 	// The Issuer Entity ID for the SAML identity provider.
-	Issuer *string `json:"issuer,omitempty"`
+	Issuer *string `json:"issuer"`
 	// Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable.
-	RecoveryCodes []string `json:"recoveryCodes,omitempty"`
+	RecoveryCodes []string `json:"recoveryCodes"`
 	// The signature algorithm used to sign SAML requests for the identity provider.
-	SignatureMethod *SamlSignatureAlgorithm `json:"signatureMethod,omitempty"`
+	SignatureMethod *SamlSignatureAlgorithm `json:"signatureMethod"`
 	// The URL endpoint for the identity provider's SAML SSO.
-	SsoURL *string `json:"ssoUrl,omitempty"`
+	SsoURL *string `json:"ssoUrl"`
 }
 
 func (EnterpriseIdentityProvider) IsNode() {}
@@ -4355,11 +3409,11 @@ func (EnterpriseIdentityProvider) IsNode() {}
 // The connection type for EnterpriseMember.
 type EnterpriseMemberConnection struct {
 	// A list of edges.
-	Edges []*EnterpriseMemberEdge `json:"edges,omitempty"`
+	Edges []*EnterpriseMemberEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []EnterpriseMember `json:"nodes,omitempty"`
+	Nodes []EnterpriseMember `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -4371,7 +3425,7 @@ type EnterpriseMemberEdge struct {
 	// Whether the user does not have a license for the enterprise.
 	IsUnlicensed bool `json:"isUnlicensed"`
 	// The item at the end of the edge.
-	Node EnterpriseMember `json:"node,omitempty"`
+	Node EnterpriseMember `json:"node"`
 }
 
 // Ordering options for enterprise member connections.
@@ -4385,11 +3439,11 @@ type EnterpriseMemberOrder struct {
 // The connection type for Organization.
 type EnterpriseOrganizationMembershipConnection struct {
 	// A list of edges.
-	Edges []*EnterpriseOrganizationMembershipEdge `json:"edges,omitempty"`
+	Edges []*EnterpriseOrganizationMembershipEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*Organization `json:"nodes,omitempty"`
+	Nodes []*Organization `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -4399,7 +3453,7 @@ type EnterpriseOrganizationMembershipEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *Organization `json:"node,omitempty"`
+	Node *Organization `json:"node"`
 	// The role of the user in the enterprise membership.
 	Role EnterpriseUserAccountMembershipRole `json:"role"`
 }
@@ -4407,11 +3461,11 @@ type EnterpriseOrganizationMembershipEdge struct {
 // The connection type for User.
 type EnterpriseOutsideCollaboratorConnection struct {
 	// A list of edges.
-	Edges []*EnterpriseOutsideCollaboratorEdge `json:"edges,omitempty"`
+	Edges []*EnterpriseOutsideCollaboratorEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*User `json:"nodes,omitempty"`
+	Nodes []*User `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -4423,121 +3477,143 @@ type EnterpriseOutsideCollaboratorEdge struct {
 	// Whether the outside collaborator does not have a license for the enterprise.
 	IsUnlicensed bool `json:"isUnlicensed"`
 	// The item at the end of the edge.
-	Node *User `json:"node,omitempty"`
+	Node *User `json:"node"`
 	// The enterprise organization repositories this user is a member of.
-	Repositories *EnterpriseRepositoryInfoConnection `json:"repositories,omitempty"`
+	Repositories *EnterpriseRepositoryInfoConnection `json:"repositories"`
 }
 
 // Enterprise information only visible to enterprise owners.
 type EnterpriseOwnerInfo struct {
 	// A list of all of the administrators for this enterprise.
-	Admins *EnterpriseAdministratorConnection `json:"admins,omitempty"`
+	Admins *EnterpriseAdministratorConnection `json:"admins"`
 	// A list of users in the enterprise who currently have two-factor authentication disabled.
-	AffiliatedUsersWithTwoFactorDisabled *UserConnection `json:"affiliatedUsersWithTwoFactorDisabled,omitempty"`
+	AffiliatedUsersWithTwoFactorDisabled *UserConnection `json:"affiliatedUsersWithTwoFactorDisabled"`
 	// Whether or not affiliated users with two-factor authentication disabled exist in the enterprise.
 	AffiliatedUsersWithTwoFactorDisabledExist bool `json:"affiliatedUsersWithTwoFactorDisabledExist"`
 	// The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise.
 	AllowPrivateRepositoryForkingSetting EnterpriseEnabledDisabledSettingValue `json:"allowPrivateRepositoryForkingSetting"`
 	// A list of enterprise organizations configured with the provided private repository forking setting value.
-	AllowPrivateRepositoryForkingSettingOrganizations *OrganizationConnection `json:"allowPrivateRepositoryForkingSettingOrganizations,omitempty"`
+	AllowPrivateRepositoryForkingSettingOrganizations *OrganizationConnection `json:"allowPrivateRepositoryForkingSettingOrganizations"`
 	// The setting value for base repository permissions for organizations in this enterprise.
 	DefaultRepositoryPermissionSetting EnterpriseDefaultRepositoryPermissionSettingValue `json:"defaultRepositoryPermissionSetting"`
-	// A list of enterprise organizations configured with the provided base repository permission.
-	DefaultRepositoryPermissionSettingOrganizations *OrganizationConnection `json:"defaultRepositoryPermissionSettingOrganizations,omitempty"`
+	// A list of enterprise organizations configured with the provided default repository permission.
+	DefaultRepositoryPermissionSettingOrganizations *OrganizationConnection `json:"defaultRepositoryPermissionSettingOrganizations"`
 	// A list of domains owned by the enterprise.
-	Domains *VerifiableDomainConnection `json:"domains,omitempty"`
+	Domains *VerifiableDomainConnection `json:"domains"`
 	// Enterprise Server installations owned by the enterprise.
-	EnterpriseServerInstallations *EnterpriseServerInstallationConnection `json:"enterpriseServerInstallations,omitempty"`
+	EnterpriseServerInstallations *EnterpriseServerInstallationConnection `json:"enterpriseServerInstallations"`
 	// The setting value for whether the enterprise has an IP allow list enabled.
 	IPAllowListEnabledSetting IPAllowListEnabledSettingValue `json:"ipAllowListEnabledSetting"`
 	// The IP addresses that are allowed to access resources owned by the enterprise.
-	IPAllowListEntries *IPAllowListEntryConnection `json:"ipAllowListEntries,omitempty"`
-	// The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled.
-	IPAllowListForInstalledAppsEnabledSetting IPAllowListForInstalledAppsEnabledSettingValue `json:"ipAllowListForInstalledAppsEnabledSetting"`
-	// Whether or not the base repository permission is currently being updated.
+	IPAllowListEntries *IPAllowListEntryConnection `json:"ipAllowListEntries"`
+	// Whether or not the default repository permission is currently being updated.
 	IsUpdatingDefaultRepositoryPermission bool `json:"isUpdatingDefaultRepositoryPermission"`
 	// Whether the two-factor authentication requirement is currently being enforced.
 	IsUpdatingTwoFactorRequirement bool `json:"isUpdatingTwoFactorRequirement"`
 	// The setting value for whether organization members with admin permissions on a repository can change repository visibility.
 	MembersCanChangeRepositoryVisibilitySetting EnterpriseEnabledDisabledSettingValue `json:"membersCanChangeRepositoryVisibilitySetting"`
 	// A list of enterprise organizations configured with the provided can change repository visibility setting value.
-	MembersCanChangeRepositoryVisibilitySettingOrganizations *OrganizationConnection `json:"membersCanChangeRepositoryVisibilitySettingOrganizations,omitempty"`
+	MembersCanChangeRepositoryVisibilitySettingOrganizations *OrganizationConnection `json:"membersCanChangeRepositoryVisibilitySettingOrganizations"`
 	// The setting value for whether members of organizations in the enterprise can create internal repositories.
-	MembersCanCreateInternalRepositoriesSetting *bool `json:"membersCanCreateInternalRepositoriesSetting,omitempty"`
+	MembersCanCreateInternalRepositoriesSetting *bool `json:"membersCanCreateInternalRepositoriesSetting"`
 	// The setting value for whether members of organizations in the enterprise can create private repositories.
-	MembersCanCreatePrivateRepositoriesSetting *bool `json:"membersCanCreatePrivateRepositoriesSetting,omitempty"`
+	MembersCanCreatePrivateRepositoriesSetting *bool `json:"membersCanCreatePrivateRepositoriesSetting"`
 	// The setting value for whether members of organizations in the enterprise can create public repositories.
-	MembersCanCreatePublicRepositoriesSetting *bool `json:"membersCanCreatePublicRepositoriesSetting,omitempty"`
+	MembersCanCreatePublicRepositoriesSetting *bool `json:"membersCanCreatePublicRepositoriesSetting"`
 	// The setting value for whether members of organizations in the enterprise can create repositories.
-	MembersCanCreateRepositoriesSetting *EnterpriseMembersCanCreateRepositoriesSettingValue `json:"membersCanCreateRepositoriesSetting,omitempty"`
+	MembersCanCreateRepositoriesSetting *EnterpriseMembersCanCreateRepositoriesSettingValue `json:"membersCanCreateRepositoriesSetting"`
 	// A list of enterprise organizations configured with the provided repository creation setting value.
-	MembersCanCreateRepositoriesSettingOrganizations *OrganizationConnection `json:"membersCanCreateRepositoriesSettingOrganizations,omitempty"`
+	MembersCanCreateRepositoriesSettingOrganizations *OrganizationConnection `json:"membersCanCreateRepositoriesSettingOrganizations"`
 	// The setting value for whether members with admin permissions for repositories can delete issues.
 	MembersCanDeleteIssuesSetting EnterpriseEnabledDisabledSettingValue `json:"membersCanDeleteIssuesSetting"`
 	// A list of enterprise organizations configured with the provided members can delete issues setting value.
-	MembersCanDeleteIssuesSettingOrganizations *OrganizationConnection `json:"membersCanDeleteIssuesSettingOrganizations,omitempty"`
+	MembersCanDeleteIssuesSettingOrganizations *OrganizationConnection `json:"membersCanDeleteIssuesSettingOrganizations"`
 	// The setting value for whether members with admin permissions for repositories can delete or transfer repositories.
 	MembersCanDeleteRepositoriesSetting EnterpriseEnabledDisabledSettingValue `json:"membersCanDeleteRepositoriesSetting"`
 	// A list of enterprise organizations configured with the provided members can delete repositories setting value.
-	MembersCanDeleteRepositoriesSettingOrganizations *OrganizationConnection `json:"membersCanDeleteRepositoriesSettingOrganizations,omitempty"`
+	MembersCanDeleteRepositoriesSettingOrganizations *OrganizationConnection `json:"membersCanDeleteRepositoriesSettingOrganizations"`
 	// The setting value for whether members of organizations in the enterprise can invite outside collaborators.
 	MembersCanInviteCollaboratorsSetting EnterpriseEnabledDisabledSettingValue `json:"membersCanInviteCollaboratorsSetting"`
 	// A list of enterprise organizations configured with the provided members can invite collaborators setting value.
-	MembersCanInviteCollaboratorsSettingOrganizations *OrganizationConnection `json:"membersCanInviteCollaboratorsSettingOrganizations,omitempty"`
+	MembersCanInviteCollaboratorsSettingOrganizations *OrganizationConnection `json:"membersCanInviteCollaboratorsSettingOrganizations"`
 	// Indicates whether members of this enterprise's organizations can purchase additional services for those organizations.
 	MembersCanMakePurchasesSetting EnterpriseMembersCanMakePurchasesSettingValue `json:"membersCanMakePurchasesSetting"`
 	// The setting value for whether members with admin permissions for repositories can update protected branches.
 	MembersCanUpdateProtectedBranchesSetting EnterpriseEnabledDisabledSettingValue `json:"membersCanUpdateProtectedBranchesSetting"`
 	// A list of enterprise organizations configured with the provided members can update protected branches setting value.
-	MembersCanUpdateProtectedBranchesSettingOrganizations *OrganizationConnection `json:"membersCanUpdateProtectedBranchesSettingOrganizations,omitempty"`
+	MembersCanUpdateProtectedBranchesSettingOrganizations *OrganizationConnection `json:"membersCanUpdateProtectedBranchesSettingOrganizations"`
 	// The setting value for whether members can view dependency insights.
 	MembersCanViewDependencyInsightsSetting EnterpriseEnabledDisabledSettingValue `json:"membersCanViewDependencyInsightsSetting"`
 	// A list of enterprise organizations configured with the provided members can view dependency insights setting value.
-	MembersCanViewDependencyInsightsSettingOrganizations *OrganizationConnection `json:"membersCanViewDependencyInsightsSettingOrganizations,omitempty"`
-	// Indicates if email notification delivery for this enterprise is restricted to verified or approved domains.
+	MembersCanViewDependencyInsightsSettingOrganizations *OrganizationConnection `json:"membersCanViewDependencyInsightsSettingOrganizations"`
+	// Indicates if email notification delivery for this enterprise is restricted to verified domains.
 	NotificationDeliveryRestrictionEnabledSetting NotificationRestrictionSettingValue `json:"notificationDeliveryRestrictionEnabledSetting"`
-	// The OIDC Identity Provider for the enterprise.
-	OidcProvider *OIDCProvider `json:"oidcProvider,omitempty"`
 	// The setting value for whether organization projects are enabled for organizations in this enterprise.
 	OrganizationProjectsSetting EnterpriseEnabledDisabledSettingValue `json:"organizationProjectsSetting"`
 	// A list of enterprise organizations configured with the provided organization projects setting value.
-	OrganizationProjectsSettingOrganizations *OrganizationConnection `json:"organizationProjectsSettingOrganizations,omitempty"`
+	OrganizationProjectsSettingOrganizations *OrganizationConnection `json:"organizationProjectsSettingOrganizations"`
 	// A list of outside collaborators across the repositories in the enterprise.
-	OutsideCollaborators *EnterpriseOutsideCollaboratorConnection `json:"outsideCollaborators,omitempty"`
+	OutsideCollaborators *EnterpriseOutsideCollaboratorConnection `json:"outsideCollaborators"`
 	// A list of pending administrator invitations for the enterprise.
-	PendingAdminInvitations *EnterpriseAdministratorInvitationConnection `json:"pendingAdminInvitations,omitempty"`
+	PendingAdminInvitations *EnterpriseAdministratorInvitationConnection `json:"pendingAdminInvitations"`
 	// A list of pending collaborator invitations across the repositories in the enterprise.
-	PendingCollaboratorInvitations *RepositoryInvitationConnection `json:"pendingCollaboratorInvitations,omitempty"`
+	PendingCollaboratorInvitations *RepositoryInvitationConnection `json:"pendingCollaboratorInvitations"`
+	// A list of pending collaborators across the repositories in the enterprise.
+	PendingCollaborators *EnterprisePendingCollaboratorConnection `json:"pendingCollaborators"`
 	// A list of pending member invitations for organizations in the enterprise.
-	PendingMemberInvitations *EnterprisePendingMemberInvitationConnection `json:"pendingMemberInvitations,omitempty"`
+	PendingMemberInvitations *EnterprisePendingMemberInvitationConnection `json:"pendingMemberInvitations"`
 	// The setting value for whether repository projects are enabled in this enterprise.
 	RepositoryProjectsSetting EnterpriseEnabledDisabledSettingValue `json:"repositoryProjectsSetting"`
 	// A list of enterprise organizations configured with the provided repository projects setting value.
-	RepositoryProjectsSettingOrganizations *OrganizationConnection `json:"repositoryProjectsSettingOrganizations,omitempty"`
+	RepositoryProjectsSettingOrganizations *OrganizationConnection `json:"repositoryProjectsSettingOrganizations"`
 	// The SAML Identity Provider for the enterprise.
-	SamlIdentityProvider *EnterpriseIdentityProvider `json:"samlIdentityProvider,omitempty"`
+	SamlIdentityProvider *EnterpriseIdentityProvider `json:"samlIdentityProvider"`
 	// A list of enterprise organizations configured with the SAML single sign-on setting value.
-	SamlIdentityProviderSettingOrganizations *OrganizationConnection `json:"samlIdentityProviderSettingOrganizations,omitempty"`
+	SamlIdentityProviderSettingOrganizations *OrganizationConnection `json:"samlIdentityProviderSettingOrganizations"`
 	// A list of members with a support entitlement.
-	SupportEntitlements *EnterpriseMemberConnection `json:"supportEntitlements,omitempty"`
+	SupportEntitlements *EnterpriseMemberConnection `json:"supportEntitlements"`
 	// The setting value for whether team discussions are enabled for organizations in this enterprise.
 	TeamDiscussionsSetting EnterpriseEnabledDisabledSettingValue `json:"teamDiscussionsSetting"`
 	// A list of enterprise organizations configured with the provided team discussions setting value.
-	TeamDiscussionsSettingOrganizations *OrganizationConnection `json:"teamDiscussionsSettingOrganizations,omitempty"`
+	TeamDiscussionsSettingOrganizations *OrganizationConnection `json:"teamDiscussionsSettingOrganizations"`
 	// The setting value for whether the enterprise requires two-factor authentication for its organizations and users.
 	TwoFactorRequiredSetting EnterpriseEnabledSettingValue `json:"twoFactorRequiredSetting"`
 	// A list of enterprise organizations configured with the two-factor authentication setting value.
-	TwoFactorRequiredSettingOrganizations *OrganizationConnection `json:"twoFactorRequiredSettingOrganizations,omitempty"`
+	TwoFactorRequiredSettingOrganizations *OrganizationConnection `json:"twoFactorRequiredSettingOrganizations"`
+}
+
+// The connection type for User.
+type EnterprisePendingCollaboratorConnection struct {
+	// A list of edges.
+	Edges []*EnterprisePendingCollaboratorEdge `json:"edges"`
+	// A list of nodes.
+	Nodes []*User `json:"nodes"`
+	// Information to aid in pagination.
+	PageInfo *PageInfo `json:"pageInfo"`
+	// Identifies the total count of items in the connection.
+	TotalCount int `json:"totalCount"`
+}
+
+// A user with an invitation to be a collaborator on a repository owned by an organization in an enterprise.
+type EnterprisePendingCollaboratorEdge struct {
+	// A cursor for use in pagination.
+	Cursor string `json:"cursor"`
+	// Whether the invited collaborator does not have a license for the enterprise.
+	IsUnlicensed bool `json:"isUnlicensed"`
+	// The item at the end of the edge.
+	Node *User `json:"node"`
+	// The enterprise organization repositories this user is a member of.
+	Repositories *EnterpriseRepositoryInfoConnection `json:"repositories"`
 }
 
 // The connection type for OrganizationInvitation.
 type EnterprisePendingMemberInvitationConnection struct {
 	// A list of edges.
-	Edges []*EnterprisePendingMemberInvitationEdge `json:"edges,omitempty"`
+	Edges []*EnterprisePendingMemberInvitationEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*OrganizationInvitation `json:"nodes,omitempty"`
+	Nodes []*OrganizationInvitation `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 	// Identifies the total count of unique users in the connection.
@@ -4551,7 +3627,7 @@ type EnterprisePendingMemberInvitationEdge struct {
 	// Whether the invitation has a license for the enterprise.
 	IsUnlicensed bool `json:"isUnlicensed"`
 	// The item at the end of the edge.
-	Node *OrganizationInvitation `json:"node,omitempty"`
+	Node *OrganizationInvitation `json:"node"`
 }
 
 // A subset of repository information queryable from an enterprise.
@@ -4570,11 +3646,11 @@ func (EnterpriseRepositoryInfo) IsNode() {}
 // The connection type for EnterpriseRepositoryInfo.
 type EnterpriseRepositoryInfoConnection struct {
 	// A list of edges.
-	Edges []*EnterpriseRepositoryInfoEdge `json:"edges,omitempty"`
+	Edges []*EnterpriseRepositoryInfoEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*EnterpriseRepositoryInfo `json:"nodes,omitempty"`
+	Nodes []*EnterpriseRepositoryInfo `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -4584,7 +3660,7 @@ type EnterpriseRepositoryInfoEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *EnterpriseRepositoryInfo `json:"node,omitempty"`
+	Node *EnterpriseRepositoryInfo `json:"node"`
 }
 
 // An Enterprise Server installation.
@@ -4601,9 +3677,9 @@ type EnterpriseServerInstallation struct {
 	// Identifies the date and time when the object was last updated.
 	UpdatedAt time.Time `json:"updatedAt"`
 	// User accounts on this Enterprise Server installation.
-	UserAccounts *EnterpriseServerUserAccountConnection `json:"userAccounts,omitempty"`
+	UserAccounts *EnterpriseServerUserAccountConnection `json:"userAccounts"`
 	// User accounts uploads for the Enterprise Server installation.
-	UserAccountsUploads *EnterpriseServerUserAccountsUploadConnection `json:"userAccountsUploads,omitempty"`
+	UserAccountsUploads *EnterpriseServerUserAccountsUploadConnection `json:"userAccountsUploads"`
 }
 
 func (EnterpriseServerInstallation) IsNode() {}
@@ -4611,11 +3687,11 @@ func (EnterpriseServerInstallation) IsNode() {}
 // The connection type for EnterpriseServerInstallation.
 type EnterpriseServerInstallationConnection struct {
 	// A list of edges.
-	Edges []*EnterpriseServerInstallationEdge `json:"edges,omitempty"`
+	Edges []*EnterpriseServerInstallationEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*EnterpriseServerInstallation `json:"nodes,omitempty"`
+	Nodes []*EnterpriseServerInstallation `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -4625,7 +3701,7 @@ type EnterpriseServerInstallationEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *EnterpriseServerInstallation `json:"node,omitempty"`
+	Node *EnterpriseServerInstallation `json:"node"`
 }
 
 // Ordering options for Enterprise Server installation connections.
@@ -4641,16 +3717,16 @@ type EnterpriseServerUserAccount struct {
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// User emails belonging to this user account.
-	Emails *EnterpriseServerUserAccountEmailConnection `json:"emails,omitempty"`
+	Emails *EnterpriseServerUserAccountEmailConnection `json:"emails"`
 	// The Enterprise Server installation on which this user account exists.
-	EnterpriseServerInstallation *EnterpriseServerInstallation `json:"enterpriseServerInstallation,omitempty"`
+	EnterpriseServerInstallation *EnterpriseServerInstallation `json:"enterpriseServerInstallation"`
 	ID                           string                        `json:"id"`
 	// Whether the user account is a site administrator on the Enterprise Server installation.
 	IsSiteAdmin bool `json:"isSiteAdmin"`
 	// The login of the user account on the Enterprise Server installation.
 	Login string `json:"login"`
 	// The profile name of the user account on the Enterprise Server installation.
-	ProfileName *string `json:"profileName,omitempty"`
+	ProfileName *string `json:"profileName"`
 	// The date and time when the user account was created on the Enterprise Server installation.
 	RemoteCreatedAt time.Time `json:"remoteCreatedAt"`
 	// The ID of the user account on the Enterprise Server installation.
@@ -4664,11 +3740,11 @@ func (EnterpriseServerUserAccount) IsNode() {}
 // The connection type for EnterpriseServerUserAccount.
 type EnterpriseServerUserAccountConnection struct {
 	// A list of edges.
-	Edges []*EnterpriseServerUserAccountEdge `json:"edges,omitempty"`
+	Edges []*EnterpriseServerUserAccountEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*EnterpriseServerUserAccount `json:"nodes,omitempty"`
+	Nodes []*EnterpriseServerUserAccount `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -4678,7 +3754,7 @@ type EnterpriseServerUserAccountEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *EnterpriseServerUserAccount `json:"node,omitempty"`
+	Node *EnterpriseServerUserAccount `json:"node"`
 }
 
 // An email belonging to a user account on an Enterprise Server installation.
@@ -4693,7 +3769,7 @@ type EnterpriseServerUserAccountEmail struct {
 	// Identifies the date and time when the object was last updated.
 	UpdatedAt time.Time `json:"updatedAt"`
 	// The user account to which the email belongs.
-	UserAccount *EnterpriseServerUserAccount `json:"userAccount,omitempty"`
+	UserAccount *EnterpriseServerUserAccount `json:"userAccount"`
 }
 
 func (EnterpriseServerUserAccountEmail) IsNode() {}
@@ -4701,11 +3777,11 @@ func (EnterpriseServerUserAccountEmail) IsNode() {}
 // The connection type for EnterpriseServerUserAccountEmail.
 type EnterpriseServerUserAccountEmailConnection struct {
 	// A list of edges.
-	Edges []*EnterpriseServerUserAccountEmailEdge `json:"edges,omitempty"`
+	Edges []*EnterpriseServerUserAccountEmailEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*EnterpriseServerUserAccountEmail `json:"nodes,omitempty"`
+	Nodes []*EnterpriseServerUserAccountEmail `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -4715,7 +3791,7 @@ type EnterpriseServerUserAccountEmailEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *EnterpriseServerUserAccountEmail `json:"node,omitempty"`
+	Node *EnterpriseServerUserAccountEmail `json:"node"`
 }
 
 // Ordering options for Enterprise Server user account email connections.
@@ -4739,9 +3815,9 @@ type EnterpriseServerUserAccountsUpload struct {
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// The enterprise to which this upload belongs.
-	Enterprise *Enterprise `json:"enterprise,omitempty"`
+	Enterprise *Enterprise `json:"enterprise"`
 	// The Enterprise Server installation for which this upload was generated.
-	EnterpriseServerInstallation *EnterpriseServerInstallation `json:"enterpriseServerInstallation,omitempty"`
+	EnterpriseServerInstallation *EnterpriseServerInstallation `json:"enterpriseServerInstallation"`
 	ID                           string                        `json:"id"`
 	// The name of the file uploaded.
 	Name string `json:"name"`
@@ -4756,11 +3832,11 @@ func (EnterpriseServerUserAccountsUpload) IsNode() {}
 // The connection type for EnterpriseServerUserAccountsUpload.
 type EnterpriseServerUserAccountsUploadConnection struct {
 	// A list of edges.
-	Edges []*EnterpriseServerUserAccountsUploadEdge `json:"edges,omitempty"`
+	Edges []*EnterpriseServerUserAccountsUploadEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*EnterpriseServerUserAccountsUpload `json:"nodes,omitempty"`
+	Nodes []*EnterpriseServerUserAccountsUpload `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -4770,7 +3846,7 @@ type EnterpriseServerUserAccountsUploadEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *EnterpriseServerUserAccountsUpload `json:"node,omitempty"`
+	Node *EnterpriseServerUserAccountsUpload `json:"node"`
 }
 
 // Ordering options for Enterprise Server user accounts upload connections.
@@ -4788,14 +3864,14 @@ type EnterpriseUserAccount struct {
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// The enterprise in which this user account exists.
-	Enterprise *Enterprise `json:"enterprise,omitempty"`
+	Enterprise *Enterprise `json:"enterprise"`
 	ID         string      `json:"id"`
 	// An identifier for the enterprise user account, a login or email address
 	Login string `json:"login"`
 	// The name of the enterprise user account
-	Name *string `json:"name,omitempty"`
+	Name *string `json:"name"`
 	// A list of enterprise organizations this user is a member of.
-	Organizations *EnterpriseOrganizationMembershipConnection `json:"organizations,omitempty"`
+	Organizations *EnterpriseOrganizationMembershipConnection `json:"organizations"`
 	// The HTTP path for this user.
 	ResourcePath string `json:"resourcePath"`
 	// Identifies the date and time when the object was last updated.
@@ -4803,21 +3879,21 @@ type EnterpriseUserAccount struct {
 	// The HTTP URL for this user.
 	URL string `json:"url"`
 	// The user within the enterprise.
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 }
 
-func (EnterpriseUserAccount) IsActor()            {}
-func (EnterpriseUserAccount) IsNode()             {}
 func (EnterpriseUserAccount) IsEnterpriseMember() {}
+func (EnterpriseUserAccount) IsNode()             {}
+func (EnterpriseUserAccount) IsActor()            {}
 
 // The connection type for EnterpriseUserAccount.
 type EnterpriseUserAccountConnection struct {
 	// A list of edges.
-	Edges []*EnterpriseUserAccountEdge `json:"edges,omitempty"`
+	Edges []*EnterpriseUserAccountEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*EnterpriseUserAccount `json:"nodes,omitempty"`
+	Nodes []*EnterpriseUserAccount `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -4827,40 +3903,7 @@ type EnterpriseUserAccountEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *EnterpriseUserAccount `json:"node,omitempty"`
-}
-
-// An environment.
-type Environment struct {
-	// Identifies the primary key from the database.
-	DatabaseID *int   `json:"databaseId,omitempty"`
-	ID         string `json:"id"`
-	// The name of the environment
-	Name string `json:"name"`
-	// The protection rules defined for this environment
-	ProtectionRules *DeploymentProtectionRuleConnection `json:"protectionRules,omitempty"`
-}
-
-func (Environment) IsNode() {}
-
-// The connection type for Environment.
-type EnvironmentConnection struct {
-	// A list of edges.
-	Edges []*EnvironmentEdge `json:"edges,omitempty"`
-	// A list of nodes.
-	Nodes []*Environment `json:"nodes,omitempty"`
-	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
-	// Identifies the total count of items in the connection.
-	TotalCount int `json:"totalCount"`
-}
-
-// An edge in a connection.
-type EnvironmentEdge struct {
-	// A cursor for use in pagination.
-	Cursor string `json:"cursor"`
-	// The item at the end of the edge.
-	Node *Environment `json:"node,omitempty"`
+	Node *EnterpriseUserAccount `json:"node"`
 }
 
 // An external identity provisioned by SAML SSO or SCIM.
@@ -4869,13 +3912,13 @@ type ExternalIdentity struct {
 	GUID string `json:"guid"`
 	ID   string `json:"id"`
 	// Organization invitation for this SCIM-provisioned external identity
-	OrganizationInvitation *OrganizationInvitation `json:"organizationInvitation,omitempty"`
+	OrganizationInvitation *OrganizationInvitation `json:"organizationInvitation"`
 	// SAML Identity attributes
-	SamlIdentity *ExternalIdentitySamlAttributes `json:"samlIdentity,omitempty"`
+	SamlIdentity *ExternalIdentitySamlAttributes `json:"samlIdentity"`
 	// SCIM Identity attributes
-	ScimIdentity *ExternalIdentityScimAttributes `json:"scimIdentity,omitempty"`
+	ScimIdentity *ExternalIdentityScimAttributes `json:"scimIdentity"`
 	// User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 }
 
 func (ExternalIdentity) IsNode() {}
@@ -4883,11 +3926,11 @@ func (ExternalIdentity) IsNode() {}
 // The connection type for ExternalIdentity.
 type ExternalIdentityConnection struct {
 	// A list of edges.
-	Edges []*ExternalIdentityEdge `json:"edges,omitempty"`
+	Edges []*ExternalIdentityEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*ExternalIdentity `json:"nodes,omitempty"`
+	Nodes []*ExternalIdentity `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -4897,172 +3940,37 @@ type ExternalIdentityEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *ExternalIdentity `json:"node,omitempty"`
+	Node *ExternalIdentity `json:"node"`
 }
 
 // SAML attributes for the External Identity
 type ExternalIdentitySamlAttributes struct {
 	// The emails associated with the SAML identity
-	Emails []*UserEmailMetadata `json:"emails,omitempty"`
+	Emails []*UserEmailMetadata `json:"emails"`
 	// Family name of the SAML identity
-	FamilyName *string `json:"familyName,omitempty"`
+	FamilyName *string `json:"familyName"`
 	// Given name of the SAML identity
-	GivenName *string `json:"givenName,omitempty"`
+	GivenName *string `json:"givenName"`
 	// The groups linked to this identity in IDP
-	Groups []string `json:"groups,omitempty"`
+	Groups []string `json:"groups"`
 	// The NameID of the SAML identity
-	NameID *string `json:"nameId,omitempty"`
+	NameID *string `json:"nameId"`
 	// The userName of the SAML identity
-	Username *string `json:"username,omitempty"`
+	Username *string `json:"username"`
 }
 
 // SCIM attributes for the External Identity
 type ExternalIdentityScimAttributes struct {
 	// The emails associated with the SCIM identity
-	Emails []*UserEmailMetadata `json:"emails,omitempty"`
+	Emails []*UserEmailMetadata `json:"emails"`
 	// Family name of the SCIM identity
-	FamilyName *string `json:"familyName,omitempty"`
+	FamilyName *string `json:"familyName"`
 	// Given name of the SCIM identity
-	GivenName *string `json:"givenName,omitempty"`
+	GivenName *string `json:"givenName"`
 	// The groups linked to this identity in IDP
-	Groups []string `json:"groups,omitempty"`
+	Groups []string `json:"groups"`
 	// The userName of the SCIM identity
-	Username *string `json:"username,omitempty"`
-}
-
-// A command to add a file at the given path with the given contents as part of a commit.  Any existing file at that that path will be replaced.
-type FileAddition struct {
-	// The path in the repository where the file will be located
-	Path string `json:"path"`
-	// The base64 encoded contents of the file
-	Contents string `json:"contents"`
-}
-
-// A description of a set of changes to a file tree to be made as part of
-// a git commit, modeled as zero or more file `additions` and zero or more
-// file `deletions`.
-//
-// Both fields are optional; omitting both will produce a commit with no
-// file changes.
-//
-// `deletions` and `additions` describe changes to files identified
-// by their path in the git tree using unix-style path separators, i.e.
-// `/`.  The root of a git tree is an empty string, so paths are not
-// slash-prefixed.
-//
-// `path` values must be unique across all `additions` and `deletions`
-// provided.  Any duplication will result in a validation error.
-//
-// ### Encoding
-//
-// File contents must be provided in full for each `FileAddition`.
-//
-// The `contents` of a `FileAddition` must be encoded using RFC 4648
-// compliant base64, i.e. correct padding is required and no characters
-// outside the standard alphabet may be used.  Invalid base64
-// encoding will be rejected with a validation error.
-//
-// The encoded contents may be binary.
-//
-// For text files, no assumptions are made about the character encoding of
-// the file contents (after base64 decoding).  No charset transcoding or
-// line-ending normalization will be performed; it is the client's
-// responsibility to manage the character encoding of files they provide.
-// However, for maximum compatibility we recommend using UTF-8 encoding
-// and ensuring that all files in a repository use a consistent
-// line-ending convention (`\n` or `\r\n`), and that all files end
-// with a newline.
-//
-// ### Modeling file changes
-//
-// Each of the the five types of conceptual changes that can be made in a
-// git commit can be described using the `FileChanges` type as follows:
-//
-// 1. New file addition: create file `hello world\n` at path `docs/README.txt`:
-//
-//        {
-//          "additions" [
-//            {
-//              "path": "docs/README.txt",
-//              "contents": base64encode("hello world\n")
-//            }
-//          ]
-//        }
-//
-// 2. Existing file modification: change existing `docs/README.txt` to have new
-//    content `new content here\n`:
-//
-//        {
-//          "additions" [
-//            {
-//              "path": "docs/README.txt",
-//              "contents": base64encode("new content here\n")
-//            }
-//          ]
-//        }
-//
-// 3. Existing file deletion: remove existing file `docs/README.txt`.
-//    Note that the path is required to exist -- specifying a
-//    path that does not exist on the given branch will abort the
-//    commit and return an error.
-//
-//        {
-//          "deletions" [
-//            {
-//              "path": "docs/README.txt"
-//            }
-//          ]
-//        }
-//
-//
-// 4. File rename with no changes: rename `docs/README.txt` with
-//    previous content `hello world\n` to the same content at
-//    `newdocs/README.txt`:
-//
-//        {
-//          "deletions" [
-//            {
-//              "path": "docs/README.txt",
-//            }
-//          ],
-//          "additions" [
-//            {
-//              "path": "newdocs/README.txt",
-//              "contents": base64encode("hello world\n")
-//            }
-//          ]
-//        }
-//
-//
-// 5. File rename with changes: rename `docs/README.txt` with
-//    previous content `hello world\n` to a file at path
-//    `newdocs/README.txt` with content `new contents\n`:
-//
-//        {
-//          "deletions" [
-//            {
-//              "path": "docs/README.txt",
-//            }
-//          ],
-//          "additions" [
-//            {
-//              "path": "newdocs/README.txt",
-//              "contents": base64encode("new contents\n")
-//            }
-//          ]
-//        }
-//
-type FileChanges struct {
-	// Files to delete.
-	Deletions []*FileDeletion `json:"deletions,omitempty"`
-	// File to add or change.
-	Additions []*FileAddition `json:"additions,omitempty"`
-}
-
-// A command to delete the file at the given path as part of a commit.
-type FileDeletion struct {
-	// The path to delete
-	Path string `json:"path"`
+	Username *string `json:"username"`
 }
 
 // Autogenerated input type of FollowUser
@@ -5070,25 +3978,25 @@ type FollowUserInput struct {
 	// ID of the user to follow.
 	UserID string `json:"userId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of FollowUser
 type FollowUserPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The user that was followed.
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 }
 
 // The connection type for User.
 type FollowerConnection struct {
 	// A list of edges.
-	Edges []*UserEdge `json:"edges,omitempty"`
+	Edges []*UserEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*User `json:"nodes,omitempty"`
+	Nodes []*User `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -5096,11 +4004,11 @@ type FollowerConnection struct {
 // The connection type for User.
 type FollowingConnection struct {
 	// A list of edges.
-	Edges []*UserEdge `json:"edges,omitempty"`
+	Edges []*UserEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*User `json:"nodes,omitempty"`
+	Nodes []*User `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -5126,15 +4034,15 @@ func (GenericHovercardContext) IsHovercardContext() {}
 // A Gist.
 type Gist struct {
 	// A list of comments associated with the gist
-	Comments *GistCommentConnection `json:"comments,omitempty"`
+	Comments *GistCommentConnection `json:"comments"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// The gist description.
-	Description *string `json:"description,omitempty"`
+	Description *string `json:"description"`
 	// The files in this gist.
-	Files []*GistFile `json:"files,omitempty"`
+	Files []*GistFile `json:"files"`
 	// A list of forks associated with the gist
-	Forks *GistConnection `json:"forks,omitempty"`
+	Forks *GistConnection `json:"forks"`
 	ID    string          `json:"id"`
 	// Identifies if the gist is a fork.
 	IsFork bool `json:"isFork"`
@@ -5143,16 +4051,16 @@ type Gist struct {
 	// The gist name.
 	Name string `json:"name"`
 	// The gist owner.
-	Owner RepositoryOwner `json:"owner,omitempty"`
+	Owner RepositoryOwner `json:"owner"`
 	// Identifies when the gist was last pushed to.
-	PushedAt *time.Time `json:"pushedAt,omitempty"`
+	PushedAt *time.Time `json:"pushedAt"`
 	// The HTML path to this resource.
 	ResourcePath string `json:"resourcePath"`
 	// Returns a count of how many stargazers there are on this object
 	//
 	StargazerCount int `json:"stargazerCount"`
 	// A list of users who have starred this starrable.
-	Stargazers *StargazerConnection `json:"stargazers,omitempty"`
+	Stargazers *StargazerConnection `json:"stargazers"`
 	// Identifies the date and time when the object was last updated.
 	UpdatedAt time.Time `json:"updatedAt"`
 	// The HTTP URL for this Gist.
@@ -5169,7 +4077,7 @@ func (Gist) IsPinnableItem()             {}
 // Represents a comment on an Gist.
 type GistComment struct {
 	// The actor who authored the comment.
-	Author Actor `json:"author,omitempty"`
+	Author Actor `json:"author"`
 	// Author's association with the gist.
 	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation"`
 	// Identifies the comment body.
@@ -5183,26 +4091,26 @@ type GistComment struct {
 	// Check if this comment was created via an email reply.
 	CreatedViaEmail bool `json:"createdViaEmail"`
 	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
+	DatabaseID *int `json:"databaseId"`
 	// The actor who edited the comment.
-	Editor Actor `json:"editor,omitempty"`
+	Editor Actor `json:"editor"`
 	// The associated gist.
-	Gist *Gist  `json:"gist,omitempty"`
+	Gist *Gist  `json:"gist"`
 	ID   string `json:"id"`
 	// Check if this comment was edited and includes an edit with the creation data
 	IncludesCreatedEdit bool `json:"includesCreatedEdit"`
 	// Returns whether or not a comment has been minimized.
 	IsMinimized bool `json:"isMinimized"`
 	// The moment the editor made the last edit
-	LastEditedAt *time.Time `json:"lastEditedAt,omitempty"`
+	LastEditedAt *time.Time `json:"lastEditedAt"`
 	// Returns why the comment was minimized.
-	MinimizedReason *string `json:"minimizedReason,omitempty"`
+	MinimizedReason *string `json:"minimizedReason"`
 	// Identifies when the comment was published at.
-	PublishedAt *time.Time `json:"publishedAt,omitempty"`
+	PublishedAt *time.Time `json:"publishedAt"`
 	// Identifies the date and time when the object was last updated.
 	UpdatedAt time.Time `json:"updatedAt"`
 	// A list of edits to this content.
-	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`
+	UserContentEdits *UserContentEditConnection `json:"userContentEdits"`
 	// Check if the current viewer can delete this object.
 	ViewerCanDelete bool `json:"viewerCanDelete"`
 	// Check if the current viewer can minimize this object.
@@ -5210,7 +4118,7 @@ type GistComment struct {
 	// Check if the current viewer can update this object.
 	ViewerCanUpdate bool `json:"viewerCanUpdate"`
 	// Reasons why the current viewer can not update this comment.
-	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons,omitempty"`
+	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons"`
 	// Did the viewer author this comment.
 	ViewerDidAuthor bool `json:"viewerDidAuthor"`
 }
@@ -5225,11 +4133,11 @@ func (GistComment) IsUpdatableComment() {}
 // The connection type for GistComment.
 type GistCommentConnection struct {
 	// A list of edges.
-	Edges []*GistCommentEdge `json:"edges,omitempty"`
+	Edges []*GistCommentEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*GistComment `json:"nodes,omitempty"`
+	Nodes []*GistComment `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -5239,17 +4147,17 @@ type GistCommentEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *GistComment `json:"node,omitempty"`
+	Node *GistComment `json:"node"`
 }
 
 // The connection type for Gist.
 type GistConnection struct {
 	// A list of edges.
-	Edges []*GistEdge `json:"edges,omitempty"`
+	Edges []*GistEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*Gist `json:"nodes,omitempty"`
+	Nodes []*Gist `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -5259,29 +4167,29 @@ type GistEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *Gist `json:"node,omitempty"`
+	Node *Gist `json:"node"`
 }
 
 // A file in a gist.
 type GistFile struct {
 	// The file name encoded to remove characters that are invalid in URL paths.
-	EncodedName *string `json:"encodedName,omitempty"`
+	EncodedName *string `json:"encodedName"`
 	// The gist file encoding.
-	Encoding *string `json:"encoding,omitempty"`
+	Encoding *string `json:"encoding"`
 	// The file extension from the file name.
-	Extension *string `json:"extension,omitempty"`
+	Extension *string `json:"extension"`
 	// Indicates if this file is an image.
 	IsImage bool `json:"isImage"`
 	// Whether the file's contents were truncated.
 	IsTruncated bool `json:"isTruncated"`
 	// The programming language this file is written in.
-	Language *Language `json:"language,omitempty"`
+	Language *Language `json:"language"`
 	// The gist file name.
-	Name *string `json:"name,omitempty"`
+	Name *string `json:"name"`
 	// The gist file size in bytes.
-	Size *int `json:"size,omitempty"`
+	Size *int `json:"size"`
 	// UTF8 text data or null if the file is binary
-	Text *string `json:"text,omitempty"`
+	Text *string `json:"text"`
 }
 
 // Ordering options for gist connections
@@ -5297,23 +4205,23 @@ type GitActor struct {
 	// A URL pointing to the author's public avatar.
 	AvatarURL string `json:"avatarUrl"`
 	// The timestamp of the Git action (authoring or committing).
-	Date *string `json:"date,omitempty"`
+	Date *string `json:"date"`
 	// The email in the Git commit.
-	Email *string `json:"email,omitempty"`
+	Email *string `json:"email"`
 	// The name in the Git commit.
-	Name *string `json:"name,omitempty"`
+	Name *string `json:"name"`
 	// The GitHub user corresponding to the email field. Null if no such user exists.
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 }
 
 // The connection type for GitActor.
 type GitActorConnection struct {
 	// A list of edges.
-	Edges []*GitActorEdge `json:"edges,omitempty"`
+	Edges []*GitActorEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*GitActor `json:"nodes,omitempty"`
+	Nodes []*GitActor `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -5323,7 +4231,7 @@ type GitActorEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *GitActor `json:"node,omitempty"`
+	Node *GitActor `json:"node"`
 }
 
 // Represents information about the GitHub instance.
@@ -5331,15 +4239,15 @@ type GitHubMetadata struct {
 	// Returns a String that's a SHA of `github-services`
 	GitHubServicesSha string `json:"gitHubServicesSha"`
 	// IP addresses that users connect to for git operations
-	GitIPAddresses []string `json:"gitIpAddresses,omitempty"`
+	GitIPAddresses []string `json:"gitIpAddresses"`
 	// IP addresses that service hooks are sent from
-	HookIPAddresses []string `json:"hookIpAddresses,omitempty"`
+	HookIPAddresses []string `json:"hookIpAddresses"`
 	// IP addresses that the importer connects from
-	ImporterIPAddresses []string `json:"importerIpAddresses,omitempty"`
+	ImporterIPAddresses []string `json:"importerIpAddresses"`
 	// Whether or not users are verified
 	IsPasswordAuthenticationVerifiable bool `json:"isPasswordAuthenticationVerifiable"`
 	// IP addresses for GitHub Pages' A records
-	PagesIPAddresses []string `json:"pagesIpAddresses,omitempty"`
+	PagesIPAddresses []string `json:"pagesIpAddresses"`
 }
 
 // Represents a GPG signature on a Commit or Tag.
@@ -5349,13 +4257,13 @@ type GpgSignature struct {
 	// True if the signature is valid and verified by GitHub.
 	IsValid bool `json:"isValid"`
 	// Hex-encoded ID of the key that signed this object.
-	KeyID *string `json:"keyId,omitempty"`
+	KeyID *string `json:"keyId"`
 	// Payload for GPG signing object. Raw ODB object without the signature header.
 	Payload string `json:"payload"`
 	// ASCII-armored signature header from object.
 	Signature string `json:"signature"`
 	// GitHub user corresponding to the email signing this commit.
-	Signer *User `json:"signer,omitempty"`
+	Signer *User `json:"signer"`
 	// The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
 	State GitSignatureState `json:"state"`
 	// True if the signature was made with GitHub's signing key.
@@ -5364,103 +4272,65 @@ type GpgSignature struct {
 
 func (GpgSignature) IsGitSignature() {}
 
-// Autogenerated input type of GrantEnterpriseOrganizationsMigratorRole
-type GrantEnterpriseOrganizationsMigratorRoleInput struct {
-	// The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
-	EnterpriseID string `json:"enterpriseId"`
-	// The login of the user to grant the migrator role
-	Login string `json:"login"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole
-type GrantEnterpriseOrganizationsMigratorRolePayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The organizations that had the migrator role applied to for the given user.
-	Organizations *OrganizationConnection `json:"organizations,omitempty"`
-}
-
-// Autogenerated input type of GrantMigratorRole
-type GrantMigratorRoleInput struct {
-	// The ID of the organization that the user/team belongs to.
-	OrganizationID string `json:"organizationId"`
-	// The user login or Team slug to grant the migrator role.
-	Actor string `json:"actor"`
-	// Specifies the type of the actor, can be either USER or TEAM.
-	ActorType ActorType `json:"actorType"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of GrantMigratorRole
-type GrantMigratorRolePayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// Did the operation succeed?
-	Success *bool `json:"success,omitempty"`
-}
-
 // Represents a 'head_ref_deleted' event on a given pull request.
 type HeadRefDeletedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the Ref associated with the `head_ref_deleted` event.
-	HeadRef *Ref `json:"headRef,omitempty"`
+	HeadRef *Ref `json:"headRef"`
 	// Identifies the name of the Ref associated with the `head_ref_deleted` event.
 	HeadRefName string `json:"headRefName"`
 	ID          string `json:"id"`
 	// PullRequest referenced by event.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 }
 
 func (HeadRefDeletedEvent) IsPullRequestTimelineItems() {}
-func (HeadRefDeletedEvent) IsPullRequestTimelineItem()  {}
 func (HeadRefDeletedEvent) IsNode()                     {}
+func (HeadRefDeletedEvent) IsPullRequestTimelineItem()  {}
 
 // Represents a 'head_ref_force_pushed' event on a given pull request.
 type HeadRefForcePushedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the after commit SHA for the 'head_ref_force_pushed' event.
-	AfterCommit *Commit `json:"afterCommit,omitempty"`
+	AfterCommit *Commit `json:"afterCommit"`
 	// Identifies the before commit SHA for the 'head_ref_force_pushed' event.
-	BeforeCommit *Commit `json:"beforeCommit,omitempty"`
+	BeforeCommit *Commit `json:"beforeCommit"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
 	// PullRequest referenced by event.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 	// Identifies the fully qualified ref name for the 'head_ref_force_pushed' event.
-	Ref *Ref `json:"ref,omitempty"`
+	Ref *Ref `json:"ref"`
 }
 
+func (HeadRefForcePushedEvent) IsNode()                     {}
 func (HeadRefForcePushedEvent) IsPullRequestTimelineItems() {}
 func (HeadRefForcePushedEvent) IsPullRequestTimelineItem()  {}
-func (HeadRefForcePushedEvent) IsNode()                     {}
 
 // Represents a 'head_ref_restored' event on a given pull request.
 type HeadRefRestoredEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
 	// PullRequest referenced by event.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 }
 
 func (HeadRefRestoredEvent) IsPullRequestTimelineItems() {}
-func (HeadRefRestoredEvent) IsPullRequestTimelineItem()  {}
 func (HeadRefRestoredEvent) IsNode()                     {}
+func (HeadRefRestoredEvent) IsPullRequestTimelineItem()  {}
 
 // Detail needed to display a hovercard for a user
 type Hovercard struct {
 	// Each of the contexts for this hovercard
-	Contexts []HovercardContext `json:"contexts,omitempty"`
+	Contexts []HovercardContext `json:"contexts"`
 }
 
 // Autogenerated input type of InviteEnterpriseAdmin
@@ -5468,21 +4338,21 @@ type InviteEnterpriseAdminInput struct {
 	// The ID of the enterprise to which you want to invite an administrator.
 	EnterpriseID string `json:"enterpriseId"`
 	// The login of a user to invite as an administrator.
-	Invitee *string `json:"invitee,omitempty"`
+	Invitee *string `json:"invitee"`
 	// The email of the person to invite as an administrator.
-	Email *string `json:"email,omitempty"`
+	Email *string `json:"email"`
 	// The role of the administrator.
-	Role *EnterpriseAdministratorRole `json:"role,omitempty"`
+	Role *EnterpriseAdministratorRole `json:"role"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of InviteEnterpriseAdmin
 type InviteEnterpriseAdminPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The created enterprise administrator invitation.
-	Invitation *EnterpriseAdministratorInvitation `json:"invitation,omitempty"`
+	Invitation *EnterpriseAdministratorInvitation `json:"invitation"`
 }
 
 // An IP address or range of addresses that is allowed to access an owner's resources.
@@ -5495,9 +4365,9 @@ type IPAllowListEntry struct {
 	// Whether the entry is currently active.
 	IsActive bool `json:"isActive"`
 	// The name of the IP allow list entry.
-	Name *string `json:"name,omitempty"`
+	Name *string `json:"name"`
 	// The owner of the IP allow list entry.
-	Owner IPAllowListOwner `json:"owner,omitempty"`
+	Owner IPAllowListOwner `json:"owner"`
 	// Identifies the date and time when the object was last updated.
 	UpdatedAt time.Time `json:"updatedAt"`
 }
@@ -5507,11 +4377,11 @@ func (IPAllowListEntry) IsNode() {}
 // The connection type for IpAllowListEntry.
 type IPAllowListEntryConnection struct {
 	// A list of edges.
-	Edges []*IPAllowListEntryEdge `json:"edges,omitempty"`
+	Edges []*IPAllowListEntryEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*IPAllowListEntry `json:"nodes,omitempty"`
+	Nodes []*IPAllowListEntry `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -5521,7 +4391,7 @@ type IPAllowListEntryEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *IPAllowListEntry `json:"node,omitempty"`
+	Node *IPAllowListEntry `json:"node"`
 }
 
 // Ordering options for IP allow list entry connections.
@@ -5535,11 +4405,11 @@ type IPAllowListEntryOrder struct {
 // An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
 type Issue struct {
 	// Reason that the conversation was locked.
-	ActiveLockReason *LockReason `json:"activeLockReason,omitempty"`
+	ActiveLockReason *LockReason `json:"activeLockReason"`
 	// A list of Users assigned to this object.
-	Assignees *UserConnection `json:"assignees,omitempty"`
+	Assignees *UserConnection `json:"assignees"`
 	// The actor who authored the comment.
-	Author Actor `json:"author,omitempty"`
+	Author Actor `json:"author"`
 	// Author's association with the subject of the comment.
 	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation"`
 	// Identifies the body of the issue.
@@ -5555,72 +4425,64 @@ type Issue struct {
 	// `true` if the object is closed (definition of closed may depend on type)
 	Closed bool `json:"closed"`
 	// Identifies the date and time when the object was closed.
-	ClosedAt *time.Time `json:"closedAt,omitempty"`
+	ClosedAt *time.Time `json:"closedAt"`
 	// A list of comments associated with the Issue.
-	Comments *IssueCommentConnection `json:"comments,omitempty"`
+	Comments *IssueCommentConnection `json:"comments"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Check if this comment was created via an email reply.
 	CreatedViaEmail bool `json:"createdViaEmail"`
 	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
+	DatabaseID *int `json:"databaseId"`
 	// The actor who edited the comment.
-	Editor Actor `json:"editor,omitempty"`
+	Editor Actor `json:"editor"`
 	// The hovercard information for this issue
-	Hovercard *Hovercard `json:"hovercard,omitempty"`
+	Hovercard *Hovercard `json:"hovercard"`
 	ID        string     `json:"id"`
 	// Check if this comment was edited and includes an edit with the creation data
 	IncludesCreatedEdit bool `json:"includesCreatedEdit"`
 	// Indicates whether or not this issue is currently pinned to the repository issues list
-	IsPinned *bool `json:"isPinned,omitempty"`
+	IsPinned *bool `json:"isPinned"`
 	// Is this issue read by the viewer
-	IsReadByViewer *bool `json:"isReadByViewer,omitempty"`
+	IsReadByViewer *bool `json:"isReadByViewer"`
 	// A list of labels associated with the object.
-	Labels *LabelConnection `json:"labels,omitempty"`
+	Labels *LabelConnection `json:"labels"`
 	// The moment the editor made the last edit
-	LastEditedAt *time.Time `json:"lastEditedAt,omitempty"`
+	LastEditedAt *time.Time `json:"lastEditedAt"`
 	// `true` if the object is locked
 	Locked bool `json:"locked"`
 	// Identifies the milestone associated with the issue.
-	Milestone *Milestone `json:"milestone,omitempty"`
+	Milestone *Milestone `json:"milestone"`
 	// Identifies the issue number.
 	Number int `json:"number"`
 	// A list of Users that are participating in the Issue conversation.
-	Participants *UserConnection `json:"participants,omitempty"`
+	Participants *UserConnection `json:"participants"`
 	// List of project cards associated with this issue.
-	ProjectCards *ProjectCardConnection `json:"projectCards,omitempty"`
-	// Find a project by project (beta) number.
-	ProjectNext *ProjectNext `json:"projectNext,omitempty"`
-	// List of project (beta) items associated with this issue.
-	ProjectNextItems *ProjectNextItemConnection `json:"projectNextItems,omitempty"`
-	// A list of projects (beta) under the owner.
-	ProjectsNext *ProjectNextConnection `json:"projectsNext,omitempty"`
+	ProjectCards *ProjectCardConnection `json:"projectCards"`
 	// Identifies when the comment was published at.
-	PublishedAt *time.Time `json:"publishedAt,omitempty"`
+	PublishedAt *time.Time `json:"publishedAt"`
 	// A list of reactions grouped by content left on the subject.
-	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`
+	ReactionGroups []*ReactionGroup `json:"reactionGroups"`
 	// A list of Reactions left on the Issue.
-	Reactions *ReactionConnection `json:"reactions,omitempty"`
+	Reactions *ReactionConnection `json:"reactions"`
 	// The repository associated with this node.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The HTTP path for this issue
 	ResourcePath string `json:"resourcePath"`
 	// Identifies the state of the issue.
 	State IssueState `json:"state"`
 	// A list of events, comments, commits, etc. associated with the issue.
-	Timeline *IssueTimelineConnection `json:"timeline,omitempty"`
+	Timeline *IssueTimelineConnection `json:"timeline"`
 	// A list of events, comments, commits, etc. associated with the issue.
-	TimelineItems *IssueTimelineItemsConnection `json:"timelineItems,omitempty"`
+	TimelineItems *IssueTimelineItemsConnection `json:"timelineItems"`
 	// Identifies the issue title.
 	Title string `json:"title"`
-	// Identifies the issue title rendered to HTML.
-	TitleHTML string `json:"titleHTML"`
 	// Identifies the date and time when the object was last updated.
 	UpdatedAt time.Time `json:"updatedAt"`
 	// The HTTP URL for this issue
 	URL string `json:"url"`
 	// A list of edits to this content.
-	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`
+	UserContentEdits *UserContentEditConnection `json:"userContentEdits"`
 	// Can user react to this subject
 	ViewerCanReact bool `json:"viewerCanReact"`
 	// Check if the viewer is able to change their subscription status for the repository.
@@ -5628,15 +4490,15 @@ type Issue struct {
 	// Check if the current viewer can update this object.
 	ViewerCanUpdate bool `json:"viewerCanUpdate"`
 	// Reasons why the current viewer can not update this comment.
-	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons,omitempty"`
+	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons"`
 	// Did the viewer author this comment.
 	ViewerDidAuthor bool `json:"viewerDidAuthor"`
 	// Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
-	ViewerSubscription *SubscriptionState `json:"viewerSubscription,omitempty"`
+	ViewerSubscription *SubscriptionState `json:"viewerSubscription"`
 }
 
+func (Issue) IsReferencedSubject()        {}
 func (Issue) IsMilestoneItem()            {}
-func (Issue) IsProjectNextItemContent()   {}
 func (Issue) IsNode()                     {}
 func (Issue) IsAssignable()               {}
 func (Issue) IsClosable()                 {}
@@ -5649,17 +4511,15 @@ func (Issue) IsReactable()                {}
 func (Issue) IsRepositoryNode()           {}
 func (Issue) IsSubscribable()             {}
 func (Issue) IsUniformResourceLocatable() {}
-func (Issue) IsProjectNextOwner()         {}
-func (Issue) IsRenamedTitleSubject()      {}
 func (Issue) IsSearchResultItem()         {}
-func (Issue) IsProjectCardItem()          {}
 func (Issue) IsIssueOrPullRequest()       {}
-func (Issue) IsReferencedSubject()        {}
+func (Issue) IsProjectCardItem()          {}
+func (Issue) IsRenamedTitleSubject()      {}
 
 // Represents a comment on an Issue.
 type IssueComment struct {
 	// The actor who authored the comment.
-	Author Actor `json:"author,omitempty"`
+	Author Actor `json:"author"`
 	// Author's association with the subject of the comment.
 	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation"`
 	// The body as Markdown.
@@ -5673,32 +4533,32 @@ type IssueComment struct {
 	// Check if this comment was created via an email reply.
 	CreatedViaEmail bool `json:"createdViaEmail"`
 	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
+	DatabaseID *int `json:"databaseId"`
 	// The actor who edited the comment.
-	Editor Actor  `json:"editor,omitempty"`
+	Editor Actor  `json:"editor"`
 	ID     string `json:"id"`
 	// Check if this comment was edited and includes an edit with the creation data
 	IncludesCreatedEdit bool `json:"includesCreatedEdit"`
 	// Returns whether or not a comment has been minimized.
 	IsMinimized bool `json:"isMinimized"`
 	// Identifies the issue associated with the comment.
-	Issue *Issue `json:"issue,omitempty"`
+	Issue *Issue `json:"issue"`
 	// The moment the editor made the last edit
-	LastEditedAt *time.Time `json:"lastEditedAt,omitempty"`
+	LastEditedAt *time.Time `json:"lastEditedAt"`
 	// Returns why the comment was minimized.
-	MinimizedReason *string `json:"minimizedReason,omitempty"`
+	MinimizedReason *string `json:"minimizedReason"`
 	// Identifies when the comment was published at.
-	PublishedAt *time.Time `json:"publishedAt,omitempty"`
+	PublishedAt *time.Time `json:"publishedAt"`
 	// Returns the pull request associated with the comment, if this comment was made on a
 	// pull request.
 	//
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 	// A list of reactions grouped by content left on the subject.
-	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`
+	ReactionGroups []*ReactionGroup `json:"reactionGroups"`
 	// A list of Reactions left on the Issue.
-	Reactions *ReactionConnection `json:"reactions,omitempty"`
+	Reactions *ReactionConnection `json:"reactions"`
 	// The repository associated with this node.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The HTTP path for this issue comment
 	ResourcePath string `json:"resourcePath"`
 	// Identifies the date and time when the object was last updated.
@@ -5706,7 +4566,7 @@ type IssueComment struct {
 	// The HTTP URL for this issue comment
 	URL string `json:"url"`
 	// A list of edits to this content.
-	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`
+	UserContentEdits *UserContentEditConnection `json:"userContentEdits"`
 	// Check if the current viewer can delete this object.
 	ViewerCanDelete bool `json:"viewerCanDelete"`
 	// Check if the current viewer can minimize this object.
@@ -5716,15 +4576,15 @@ type IssueComment struct {
 	// Check if the current viewer can update this object.
 	ViewerCanUpdate bool `json:"viewerCanUpdate"`
 	// Reasons why the current viewer can not update this comment.
-	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons,omitempty"`
+	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons"`
 	// Did the viewer author this comment.
 	ViewerDidAuthor bool `json:"viewerDidAuthor"`
 }
 
-func (IssueComment) IsIssueTimelineItems()       {}
 func (IssueComment) IsPullRequestTimelineItems() {}
-func (IssueComment) IsPullRequestTimelineItem()  {}
+func (IssueComment) IsIssueTimelineItems()       {}
 func (IssueComment) IsIssueTimelineItem()        {}
+func (IssueComment) IsPullRequestTimelineItem()  {}
 func (IssueComment) IsNode()                     {}
 func (IssueComment) IsComment()                  {}
 func (IssueComment) IsDeletable()                {}
@@ -5737,11 +4597,11 @@ func (IssueComment) IsRepositoryNode()           {}
 // The connection type for IssueComment.
 type IssueCommentConnection struct {
 	// A list of edges.
-	Edges []*IssueCommentEdge `json:"edges,omitempty"`
+	Edges []*IssueCommentEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*IssueComment `json:"nodes,omitempty"`
+	Nodes []*IssueComment `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -5751,7 +4611,7 @@ type IssueCommentEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *IssueComment `json:"node,omitempty"`
+	Node *IssueComment `json:"node"`
 }
 
 // Ways in which lists of issue comments can be ordered upon return.
@@ -5765,11 +4625,11 @@ type IssueCommentOrder struct {
 // The connection type for Issue.
 type IssueConnection struct {
 	// A list of edges.
-	Edges []*IssueEdge `json:"edges,omitempty"`
+	Edges []*IssueEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*Issue `json:"nodes,omitempty"`
+	Nodes []*Issue `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -5777,9 +4637,9 @@ type IssueConnection struct {
 // This aggregates issues opened by a user within one repository.
 type IssueContributionsByRepository struct {
 	// The issue contributions.
-	Contributions *CreatedIssueContributionConnection `json:"contributions,omitempty"`
+	Contributions *CreatedIssueContributionConnection `json:"contributions"`
 	// The repository in which the issues were opened.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 }
 
 // An edge in a connection.
@@ -5787,29 +4647,27 @@ type IssueEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *Issue `json:"node,omitempty"`
+	Node *Issue `json:"node"`
 }
 
 // Ways in which to filter lists of issues.
 type IssueFilters struct {
 	// List issues assigned to given name. Pass in `null` for issues with no assigned user, and `*` for issues assigned to any user.
-	Assignee *string `json:"assignee,omitempty"`
+	Assignee *string `json:"assignee"`
 	// List issues created by given name.
-	CreatedBy *string `json:"createdBy,omitempty"`
+	CreatedBy *string `json:"createdBy"`
 	// List issues where the list of label names exist on the issue.
-	Labels []string `json:"labels,omitempty"`
+	Labels []string `json:"labels"`
 	// List issues where the given name is mentioned in the issue.
-	Mentioned *string `json:"mentioned,omitempty"`
-	// List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its database ID. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone.
-	Milestone *string `json:"milestone,omitempty"`
+	Mentioned *string `json:"mentioned"`
 	// List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its number field. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone.
-	MilestoneNumber *string `json:"milestoneNumber,omitempty"`
+	Milestone *string `json:"milestone"`
 	// List issues that have been updated at or after the given date.
-	Since *time.Time `json:"since,omitempty"`
+	Since *time.Time `json:"since"`
 	// List issues filtered by the list of states given.
-	States []IssueState `json:"states,omitempty"`
+	States []IssueState `json:"states"`
 	// List issues subscribed to by viewer.
-	ViewerSubscribed *bool `json:"viewerSubscribed,omitempty"`
+	ViewerSubscribed *bool `json:"viewerSubscribed"`
 }
 
 // Ways in which lists of issues can be ordered upon return.
@@ -5823,23 +4681,23 @@ type IssueOrder struct {
 // A repository issue template.
 type IssueTemplate struct {
 	// The template purpose.
-	About *string `json:"about,omitempty"`
+	About *string `json:"about"`
 	// The suggested issue body.
-	Body *string `json:"body,omitempty"`
+	Body *string `json:"body"`
 	// The template name.
 	Name string `json:"name"`
 	// The suggested issue title.
-	Title *string `json:"title,omitempty"`
+	Title *string `json:"title"`
 }
 
 // The connection type for IssueTimelineItem.
 type IssueTimelineConnection struct {
 	// A list of edges.
-	Edges []*IssueTimelineItemEdge `json:"edges,omitempty"`
+	Edges []*IssueTimelineItemEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []IssueTimelineItem `json:"nodes,omitempty"`
+	Nodes []IssueTimelineItem `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -5849,21 +4707,21 @@ type IssueTimelineItemEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node IssueTimelineItem `json:"node,omitempty"`
+	Node IssueTimelineItem `json:"node"`
 }
 
 // The connection type for IssueTimelineItems.
 type IssueTimelineItemsConnection struct {
 	// A list of edges.
-	Edges []*IssueTimelineItemsEdge `json:"edges,omitempty"`
+	Edges []*IssueTimelineItemsEdge `json:"edges"`
 	// Identifies the count of items after applying `before` and `after` filters.
 	FilteredCount int `json:"filteredCount"`
 	// A list of nodes.
-	Nodes []IssueTimelineItems `json:"nodes,omitempty"`
+	Nodes []IssueTimelineItems `json:"nodes"`
 	// Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
 	PageCount int `json:"pageCount"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 	// Identifies the date and time when the timeline was last updated.
@@ -5875,7 +4733,7 @@ type IssueTimelineItemsEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node IssueTimelineItems `json:"node,omitempty"`
+	Node IssueTimelineItems `json:"node"`
 }
 
 // Represents a user signing up for a GitHub account.
@@ -5893,34 +4751,34 @@ type JoinedGitHubContribution struct {
 	URL string `json:"url"`
 	// The user who made this contribution.
 	//
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 }
 
 func (JoinedGitHubContribution) IsContribution() {}
 
-// A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
+// A label for categorizing Issues or Milestones with a given Repository.
 type Label struct {
 	// Identifies the label color.
 	Color string `json:"color"`
 	// Identifies the date and time when the label was created.
-	CreatedAt *time.Time `json:"createdAt,omitempty"`
+	CreatedAt *time.Time `json:"createdAt"`
 	// A brief description of this label.
-	Description *string `json:"description,omitempty"`
+	Description *string `json:"description"`
 	ID          string  `json:"id"`
 	// Indicates whether or not this is a default label.
 	IsDefault bool `json:"isDefault"`
 	// A list of issues associated with this label.
-	Issues *IssueConnection `json:"issues,omitempty"`
+	Issues *IssueConnection `json:"issues"`
 	// Identifies the label name.
 	Name string `json:"name"`
 	// A list of pull requests associated with this label.
-	PullRequests *PullRequestConnection `json:"pullRequests,omitempty"`
+	PullRequests *PullRequestConnection `json:"pullRequests"`
 	// The repository associated with this label.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The HTTP path for this label.
 	ResourcePath string `json:"resourcePath"`
 	// Identifies the date and time when the label was last updated.
-	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
+	UpdatedAt *time.Time `json:"updatedAt"`
 	// The HTTP URL for this label.
 	URL string `json:"url"`
 }
@@ -5930,11 +4788,11 @@ func (Label) IsNode() {}
 // The connection type for Label.
 type LabelConnection struct {
 	// A list of edges.
-	Edges []*LabelEdge `json:"edges,omitempty"`
+	Edges []*LabelEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*Label `json:"nodes,omitempty"`
+	Nodes []*Label `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -5944,7 +4802,7 @@ type LabelEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *Label `json:"node,omitempty"`
+	Node *Label `json:"node"`
 }
 
 // Ways in which lists of labels can be ordered upon return.
@@ -5958,26 +4816,26 @@ type LabelOrder struct {
 // Represents a 'labeled' event on a given issue or pull request.
 type LabeledEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
 	// Identifies the label associated with the 'labeled' event.
-	Label *Label `json:"label,omitempty"`
+	Label *Label `json:"label"`
 	// Identifies the `Labelable` associated with the event.
-	Labelable Labelable `json:"labelable,omitempty"`
+	Labelable Labelable `json:"labelable"`
 }
 
-func (LabeledEvent) IsIssueTimelineItems()       {}
+func (LabeledEvent) IsNode()                     {}
 func (LabeledEvent) IsPullRequestTimelineItems() {}
-func (LabeledEvent) IsPullRequestTimelineItem()  {}
+func (LabeledEvent) IsIssueTimelineItems()       {}
 func (LabeledEvent) IsIssueTimelineItem()        {}
-func (LabeledEvent) IsNode()                     {}
+func (LabeledEvent) IsPullRequestTimelineItem()  {}
 
 // Represents a given language found in repositories.
 type Language struct {
 	// The color defined for the current language.
-	Color *string `json:"color,omitempty"`
+	Color *string `json:"color"`
 	ID    string  `json:"id"`
 	// The name of the current language.
 	Name string `json:"name"`
@@ -5988,11 +4846,11 @@ func (Language) IsNode() {}
 // A list of languages associated with the parent.
 type LanguageConnection struct {
 	// A list of edges.
-	Edges []*LanguageEdge `json:"edges,omitempty"`
+	Edges []*LanguageEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*Language `json:"nodes,omitempty"`
+	Nodes []*Language `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 	// The total size in bytes of files written in that language.
@@ -6002,7 +4860,7 @@ type LanguageConnection struct {
 // Represents the language of a repository.
 type LanguageEdge struct {
 	Cursor string    `json:"cursor"`
-	Node   *Language `json:"node,omitempty"`
+	Node   *Language `json:"node"`
 	// The number of bytes of code written in the language.
 	Size int `json:"size"`
 }
@@ -6020,32 +4878,32 @@ type License struct {
 	// The full text of the license
 	Body string `json:"body"`
 	// The conditions set by the license
-	Conditions []*LicenseRule `json:"conditions,omitempty"`
+	Conditions []*LicenseRule `json:"conditions"`
 	// A human-readable description of the license
-	Description *string `json:"description,omitempty"`
+	Description *string `json:"description"`
 	// Whether the license should be featured
 	Featured bool `json:"featured"`
 	// Whether the license should be displayed in license pickers
 	Hidden bool   `json:"hidden"`
 	ID     string `json:"id"`
 	// Instructions on how to implement the license
-	Implementation *string `json:"implementation,omitempty"`
+	Implementation *string `json:"implementation"`
 	// The lowercased SPDX ID of the license
 	Key string `json:"key"`
 	// The limitations set by the license
-	Limitations []*LicenseRule `json:"limitations,omitempty"`
+	Limitations []*LicenseRule `json:"limitations"`
 	// The license full name specified by <https://spdx.org/licenses>
 	Name string `json:"name"`
 	// Customary short name if applicable (e.g, GPLv3)
-	Nickname *string `json:"nickname,omitempty"`
+	Nickname *string `json:"nickname"`
 	// The permissions set by the license
-	Permissions []*LicenseRule `json:"permissions,omitempty"`
+	Permissions []*LicenseRule `json:"permissions"`
 	// Whether the license is a pseudo-license placeholder (e.g., other, no-license)
 	PseudoLicense bool `json:"pseudoLicense"`
 	// Short identifier specified by <https://spdx.org/licenses>
-	SpdxID *string `json:"spdxId,omitempty"`
+	SpdxID *string `json:"spdxId"`
 	// URL to the license on <https://choosealicense.com>
-	URL *string `json:"url,omitempty"`
+	URL *string `json:"url"`
 }
 
 func (License) IsNode() {}
@@ -6067,17 +4925,17 @@ type LinkRepositoryToProjectInput struct {
 	// The ID of the Repository to link to a Project.
 	RepositoryID string `json:"repositoryId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of LinkRepositoryToProject
 type LinkRepositoryToProjectPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The linked Project.
-	Project *Project `json:"project,omitempty"`
+	Project *Project `json:"project"`
 	// The linked Repository.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 }
 
 // Autogenerated input type of LockLockable
@@ -6085,52 +4943,50 @@ type LockLockableInput struct {
 	// ID of the item to be locked.
 	LockableID string `json:"lockableId"`
 	// A reason for why the item will be locked.
-	LockReason *LockReason `json:"lockReason,omitempty"`
+	LockReason *LockReason `json:"lockReason"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of LockLockable
 type LockLockablePayload struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The item that was locked.
-	LockedRecord Lockable `json:"lockedRecord,omitempty"`
+	LockedRecord Lockable `json:"lockedRecord"`
 }
 
 // Represents a 'locked' event on a given issue or pull request.
 type LockedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
 	// Reason that the conversation was locked (optional).
-	LockReason *LockReason `json:"lockReason,omitempty"`
+	LockReason *LockReason `json:"lockReason"`
 	// Object that was locked.
-	Lockable Lockable `json:"lockable,omitempty"`
+	Lockable Lockable `json:"lockable"`
 }
 
-func (LockedEvent) IsIssueTimelineItems()       {}
+func (LockedEvent) IsNode()                     {}
 func (LockedEvent) IsPullRequestTimelineItems() {}
-func (LockedEvent) IsPullRequestTimelineItem()  {}
+func (LockedEvent) IsIssueTimelineItems()       {}
 func (LockedEvent) IsIssueTimelineItem()        {}
-func (LockedEvent) IsNode()                     {}
+func (LockedEvent) IsPullRequestTimelineItem()  {}
 
 // A placeholder user for attribution of imported data on GitHub.
 type Mannequin struct {
 	// A URL pointing to the GitHub App's public avatar.
 	AvatarURL string `json:"avatarUrl"`
-	// The user that has claimed the data attributed to this mannequin.
-	Claimant *User `json:"claimant,omitempty"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
+	DatabaseID *int `json:"databaseId"`
 	// The mannequin's email on the source instance.
-	Email *string `json:"email,omitempty"`
+	Email *string `json:"email"`
 	ID    string  `json:"id"`
 	// The username of the actor.
 	Login string `json:"login"`
@@ -6142,28 +4998,11 @@ type Mannequin struct {
 	URL string `json:"url"`
 }
 
+func (Mannequin) IsRequestedReviewer()        {}
+func (Mannequin) IsAssignee()                 {}
 func (Mannequin) IsNode()                     {}
 func (Mannequin) IsActor()                    {}
 func (Mannequin) IsUniformResourceLocatable() {}
-func (Mannequin) IsRequestedReviewer()        {}
-func (Mannequin) IsAssignee()                 {}
-func (Mannequin) IsReactor()                  {}
-
-// Autogenerated input type of MarkDiscussionCommentAsAnswer
-type MarkDiscussionCommentAsAnswerInput struct {
-	// The Node ID of the discussion comment to mark as an answer.
-	ID string `json:"id"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of MarkDiscussionCommentAsAnswer
-type MarkDiscussionCommentAsAnswerPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The discussion that includes the chosen comment.
-	Discussion *Discussion `json:"discussion,omitempty"`
-}
 
 // Autogenerated input type of MarkFileAsViewed
 type MarkFileAsViewedInput struct {
@@ -6172,15 +5011,15 @@ type MarkFileAsViewedInput struct {
 	// The path of the file to mark as viewed
 	Path string `json:"path"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of MarkFileAsViewed
 type MarkFileAsViewedPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The updated pull request.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 }
 
 // Autogenerated input type of MarkPullRequestReadyForReview
@@ -6188,42 +5027,42 @@ type MarkPullRequestReadyForReviewInput struct {
 	// ID of the pull request to be marked as ready for review.
 	PullRequestID string `json:"pullRequestId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of MarkPullRequestReadyForReview
 type MarkPullRequestReadyForReviewPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The pull request that is ready for review.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 }
 
 // Represents a 'marked_as_duplicate' event on a given issue or pull request.
 type MarkedAsDuplicateEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// The authoritative issue or pull request which has been duplicated by another.
-	Canonical IssueOrPullRequest `json:"canonical,omitempty"`
+	Canonical IssueOrPullRequest `json:"canonical"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// The issue or pull request which has been marked as a duplicate of another.
-	Duplicate IssueOrPullRequest `json:"duplicate,omitempty"`
+	Duplicate IssueOrPullRequest `json:"duplicate"`
 	ID        string             `json:"id"`
 	// Canonical and duplicate belong to different repositories.
 	IsCrossRepository bool `json:"isCrossRepository"`
 }
 
-func (MarkedAsDuplicateEvent) IsIssueTimelineItems()       {}
-func (MarkedAsDuplicateEvent) IsPullRequestTimelineItems() {}
 func (MarkedAsDuplicateEvent) IsNode()                     {}
+func (MarkedAsDuplicateEvent) IsPullRequestTimelineItems() {}
+func (MarkedAsDuplicateEvent) IsIssueTimelineItems()       {}
 
 // A public description of a Marketplace category.
 type MarketplaceCategory struct {
 	// The category's description.
-	Description *string `json:"description,omitempty"`
+	Description *string `json:"description"`
 	// The technical description of how apps listed in this category work with GitHub.
-	HowItWorks *string `json:"howItWorks,omitempty"`
+	HowItWorks *string `json:"howItWorks"`
 	ID         string  `json:"id"`
 	// The category's name.
 	Name string `json:"name"`
@@ -6244,17 +5083,17 @@ func (MarketplaceCategory) IsNode() {}
 // A listing in the GitHub integration marketplace.
 type MarketplaceListing struct {
 	// The GitHub App this listing represents.
-	App *App `json:"app,omitempty"`
+	App *App `json:"app"`
 	// URL to the listing owner's company site.
-	CompanyURL *string `json:"companyUrl,omitempty"`
+	CompanyURL *string `json:"companyUrl"`
 	// The HTTP path for configuring access to the listing's integration or OAuth app
 	ConfigurationResourcePath string `json:"configurationResourcePath"`
 	// The HTTP URL for configuring access to the listing's integration or OAuth app
 	ConfigurationURL string `json:"configurationUrl"`
 	// URL to the listing's documentation.
-	DocumentationURL *string `json:"documentationUrl,omitempty"`
+	DocumentationURL *string `json:"documentationUrl"`
 	// The listing's detailed description.
-	ExtendedDescription *string `json:"extendedDescription,omitempty"`
+	ExtendedDescription *string `json:"extendedDescription"`
 	// The listing's detailed description rendered to HTML.
 	ExtendedDescriptionHTML string `json:"extendedDescriptionHTML"`
 	// The listing's introductory description.
@@ -6268,12 +5107,12 @@ type MarketplaceListing struct {
 	// Whether the creator of the app is a verified org
 	HasVerifiedOwner bool `json:"hasVerifiedOwner"`
 	// A technical description of how this app works with GitHub.
-	HowItWorks *string `json:"howItWorks,omitempty"`
+	HowItWorks *string `json:"howItWorks"`
 	// The listing's technical description rendered to HTML.
 	HowItWorksHTML string `json:"howItWorksHTML"`
 	ID             string `json:"id"`
 	// URL to install the product to the viewer's account or organization.
-	InstallationURL *string `json:"installationUrl,omitempty"`
+	InstallationURL *string `json:"installationUrl"`
 	// Whether this listing's app has been installed for the current viewer
 	InstalledForViewer bool `json:"installedForViewer"`
 	// Whether this listing has been removed from the Marketplace.
@@ -6299,35 +5138,35 @@ type MarketplaceListing struct {
 	// The hex color code, without the leading '#', for the logo background.
 	LogoBackgroundColor string `json:"logoBackgroundColor"`
 	// URL for the listing's logo image.
-	LogoURL *string `json:"logoUrl,omitempty"`
+	LogoURL *string `json:"logoUrl"`
 	// The listing's full name.
 	Name string `json:"name"`
 	// The listing's very short description without a trailing period or ampersands.
 	NormalizedShortDescription string `json:"normalizedShortDescription"`
 	// URL to the listing's detailed pricing.
-	PricingURL *string `json:"pricingUrl,omitempty"`
+	PricingURL *string `json:"pricingUrl"`
 	// The category that best describes the listing.
-	PrimaryCategory *MarketplaceCategory `json:"primaryCategory,omitempty"`
+	PrimaryCategory *MarketplaceCategory `json:"primaryCategory"`
 	// URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL.
 	PrivacyPolicyURL string `json:"privacyPolicyUrl"`
 	// The HTTP path for the Marketplace listing.
 	ResourcePath string `json:"resourcePath"`
 	// The URLs for the listing's screenshots.
-	ScreenshotUrls []*string `json:"screenshotUrls,omitempty"`
+	ScreenshotUrls []*string `json:"screenshotUrls"`
 	// An alternate category that describes the listing.
-	SecondaryCategory *MarketplaceCategory `json:"secondaryCategory,omitempty"`
+	SecondaryCategory *MarketplaceCategory `json:"secondaryCategory"`
 	// The listing's very short description.
 	ShortDescription string `json:"shortDescription"`
 	// The short name of the listing used in its URL.
 	Slug string `json:"slug"`
 	// URL to the listing's status page.
-	StatusURL *string `json:"statusUrl,omitempty"`
+	StatusURL *string `json:"statusUrl"`
 	// An email address for support for this listing's app.
-	SupportEmail *string `json:"supportEmail,omitempty"`
+	SupportEmail *string `json:"supportEmail"`
 	// Either a URL or an email address for support for this listing's app, may return an empty string for listings that do not require a support URL.
 	SupportURL string `json:"supportUrl"`
 	// URL to the listing's terms of service.
-	TermsOfServiceURL *string `json:"termsOfServiceUrl,omitempty"`
+	TermsOfServiceURL *string `json:"termsOfServiceUrl"`
 	// The HTTP URL for the Marketplace listing.
 	URL string `json:"url"`
 	// Can the current viewer add plans for this Marketplace listing.
@@ -6374,11 +5213,11 @@ func (MarketplaceListing) IsNode()             {}
 // Look up Marketplace Listings
 type MarketplaceListingConnection struct {
 	// A list of edges.
-	Edges []*MarketplaceListingEdge `json:"edges,omitempty"`
+	Edges []*MarketplaceListingEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*MarketplaceListing `json:"nodes,omitempty"`
+	Nodes []*MarketplaceListing `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -6388,7 +5227,7 @@ type MarketplaceListingEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *MarketplaceListing `json:"node,omitempty"`
+	Node *MarketplaceListing `json:"node"`
 }
 
 // Audit log entry for a members_can_delete_repos.clear event.
@@ -6396,95 +5235,95 @@ type MembersCanDeleteReposClearAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	// The HTTP path for this enterprise.
-	EnterpriseResourcePath *string `json:"enterpriseResourcePath,omitempty"`
+	EnterpriseResourcePath *string `json:"enterpriseResourcePath"`
 	// The slug of the enterprise.
-	EnterpriseSlug *string `json:"enterpriseSlug,omitempty"`
+	EnterpriseSlug *string `json:"enterpriseSlug"`
 	// The HTTP URL for this enterprise.
-	EnterpriseURL *string `json:"enterpriseUrl,omitempty"`
+	EnterpriseURL *string `json:"enterpriseUrl"`
 	ID            string  `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
-func (MembersCanDeleteReposClearAuditEntry) IsOrganizationAuditEntry()     {}
 func (MembersCanDeleteReposClearAuditEntry) IsNode()                       {}
 func (MembersCanDeleteReposClearAuditEntry) IsAuditEntry()                 {}
 func (MembersCanDeleteReposClearAuditEntry) IsEnterpriseAuditEntryData()   {}
 func (MembersCanDeleteReposClearAuditEntry) IsOrganizationAuditEntryData() {}
+func (MembersCanDeleteReposClearAuditEntry) IsOrganizationAuditEntry()     {}
 
 // Audit log entry for a members_can_delete_repos.disable event.
 type MembersCanDeleteReposDisableAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	// The HTTP path for this enterprise.
-	EnterpriseResourcePath *string `json:"enterpriseResourcePath,omitempty"`
+	EnterpriseResourcePath *string `json:"enterpriseResourcePath"`
 	// The slug of the enterprise.
-	EnterpriseSlug *string `json:"enterpriseSlug,omitempty"`
+	EnterpriseSlug *string `json:"enterpriseSlug"`
 	// The HTTP URL for this enterprise.
-	EnterpriseURL *string `json:"enterpriseUrl,omitempty"`
+	EnterpriseURL *string `json:"enterpriseUrl"`
 	ID            string  `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (MembersCanDeleteReposDisableAuditEntry) IsNode()                       {}
@@ -6498,65 +5337,65 @@ type MembersCanDeleteReposEnableAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	// The HTTP path for this enterprise.
-	EnterpriseResourcePath *string `json:"enterpriseResourcePath,omitempty"`
+	EnterpriseResourcePath *string `json:"enterpriseResourcePath"`
 	// The slug of the enterprise.
-	EnterpriseSlug *string `json:"enterpriseSlug,omitempty"`
+	EnterpriseSlug *string `json:"enterpriseSlug"`
 	// The HTTP URL for this enterprise.
-	EnterpriseURL *string `json:"enterpriseUrl,omitempty"`
+	EnterpriseURL *string `json:"enterpriseUrl"`
 	ID            string  `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
-func (MembersCanDeleteReposEnableAuditEntry) IsOrganizationAuditEntry()     {}
 func (MembersCanDeleteReposEnableAuditEntry) IsNode()                       {}
 func (MembersCanDeleteReposEnableAuditEntry) IsAuditEntry()                 {}
 func (MembersCanDeleteReposEnableAuditEntry) IsEnterpriseAuditEntryData()   {}
 func (MembersCanDeleteReposEnableAuditEntry) IsOrganizationAuditEntryData() {}
+func (MembersCanDeleteReposEnableAuditEntry) IsOrganizationAuditEntry()     {}
 
 // Represents a 'mentioned' event on a given issue or pull request.
 type MentionedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the primary key from the database.
-	DatabaseID *int   `json:"databaseId,omitempty"`
+	DatabaseID *int   `json:"databaseId"`
 	ID         string `json:"id"`
 }
 
-func (MentionedEvent) IsIssueTimelineItems()       {}
 func (MentionedEvent) IsPullRequestTimelineItems() {}
+func (MentionedEvent) IsIssueTimelineItems()       {}
 func (MentionedEvent) IsNode()                     {}
 
 // Autogenerated input type of MergeBranch
@@ -6568,19 +5407,19 @@ type MergeBranchInput struct {
 	// The head to merge into the base branch. This can be a branch name or a commit GitObjectID.
 	Head string `json:"head"`
 	// Message to use for the merge commit. If omitted, a default will be used.
-	CommitMessage *string `json:"commitMessage,omitempty"`
+	CommitMessage *string `json:"commitMessage"`
 	// The email address to associate with this commit.
-	AuthorEmail *string `json:"authorEmail,omitempty"`
+	AuthorEmail *string `json:"authorEmail"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of MergeBranch
 type MergeBranchPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The resulting merge Commit.
-	MergeCommit *Commit `json:"mergeCommit,omitempty"`
+	MergeCommit *Commit `json:"mergeCommit"`
 }
 
 // Autogenerated input type of MergePullRequest
@@ -6588,93 +5427,80 @@ type MergePullRequestInput struct {
 	// ID of the pull request to be merged.
 	PullRequestID string `json:"pullRequestId"`
 	// Commit headline to use for the merge commit; if omitted, a default message will be used.
-	CommitHeadline *string `json:"commitHeadline,omitempty"`
+	CommitHeadline *string `json:"commitHeadline"`
 	// Commit body to use for the merge commit; if omitted, a default message will be used
-	CommitBody *string `json:"commitBody,omitempty"`
+	CommitBody *string `json:"commitBody"`
 	// OID that the pull request head ref must match to allow merge; if omitted, no check is performed.
-	ExpectedHeadOid *string `json:"expectedHeadOid,omitempty"`
+	ExpectedHeadOid *string `json:"expectedHeadOid"`
 	// The merge method to use. If omitted, defaults to 'MERGE'
-	MergeMethod *PullRequestMergeMethod `json:"mergeMethod,omitempty"`
+	MergeMethod *PullRequestMergeMethod `json:"mergeMethod"`
 	// The email address to associate with this merge.
-	AuthorEmail *string `json:"authorEmail,omitempty"`
+	AuthorEmail *string `json:"authorEmail"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of MergePullRequest
 type MergePullRequestPayload struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The pull request that was merged.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 }
 
 // Represents a 'merged' event on a given pull request.
 type MergedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the commit associated with the `merge` event.
-	Commit *Commit `json:"commit,omitempty"`
+	Commit *Commit `json:"commit"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
 	// Identifies the Ref associated with the `merge` event.
-	MergeRef *Ref `json:"mergeRef,omitempty"`
+	MergeRef *Ref `json:"mergeRef"`
 	// Identifies the name of the Ref associated with the `merge` event.
 	MergeRefName string `json:"mergeRefName"`
 	// PullRequest referenced by event.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 	// The HTTP path for this merged event.
 	ResourcePath string `json:"resourcePath"`
 	// The HTTP URL for this merged event.
 	URL string `json:"url"`
 }
 
-func (MergedEvent) IsPullRequestTimelineItems() {}
-func (MergedEvent) IsPullRequestTimelineItem()  {}
 func (MergedEvent) IsNode()                     {}
 func (MergedEvent) IsUniformResourceLocatable() {}
-
-// An Octoshift migration source.
-type MigrationSource struct {
-	ID string `json:"id"`
-	// The Octoshift migration source name.
-	Name string `json:"name"`
-	// The Octoshift migration source type.
-	Type MigrationSourceType `json:"type"`
-	// The Octoshift migration source URL.
-	URL string `json:"url"`
-}
-
-func (MigrationSource) IsNode() {}
+func (MergedEvent) IsPullRequestTimelineItems() {}
+func (MergedEvent) IsPullRequestTimelineItem()  {}
 
 // Represents a Milestone object on a given repository.
 type Milestone struct {
 	// `true` if the object is closed (definition of closed may depend on type)
 	Closed bool `json:"closed"`
 	// Identifies the date and time when the object was closed.
-	ClosedAt *time.Time `json:"closedAt,omitempty"`
+	ClosedAt *time.Time `json:"closedAt"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the actor who created the milestone.
-	Creator Actor `json:"creator,omitempty"`
+	Creator Actor `json:"creator"`
 	// Identifies the description of the milestone.
-	Description *string `json:"description,omitempty"`
+	Description *string `json:"description"`
 	// Identifies the due date of the milestone.
-	DueOn *time.Time `json:"dueOn,omitempty"`
+	DueOn *time.Time `json:"dueOn"`
 	ID    string     `json:"id"`
 	// A list of issues associated with the milestone.
-	Issues *IssueConnection `json:"issues,omitempty"`
+	Issues *IssueConnection `json:"issues"`
 	// Identifies the number of the milestone.
 	Number int `json:"number"`
 	// Identifies the percentage complete for the milestone
 	ProgressPercentage float64 `json:"progressPercentage"`
 	// A list of pull requests associated with the milestone.
-	PullRequests *PullRequestConnection `json:"pullRequests,omitempty"`
+	PullRequests *PullRequestConnection `json:"pullRequests"`
 	// The repository associated with this milestone.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The HTTP path for this milestone
 	ResourcePath string `json:"resourcePath"`
 	// Identifies the state of the milestone.
@@ -6694,11 +5520,11 @@ func (Milestone) IsUniformResourceLocatable() {}
 // The connection type for Milestone.
 type MilestoneConnection struct {
 	// A list of edges.
-	Edges []*MilestoneEdge `json:"edges,omitempty"`
+	Edges []*MilestoneEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*Milestone `json:"nodes,omitempty"`
+	Nodes []*Milestone `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -6708,7 +5534,7 @@ type MilestoneEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *Milestone `json:"node,omitempty"`
+	Node *Milestone `json:"node"`
 }
 
 // Ordering options for milestone connections.
@@ -6722,21 +5548,21 @@ type MilestoneOrder struct {
 // Represents a 'milestoned' event on a given issue or pull request.
 type MilestonedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
 	// Identifies the milestone title associated with the 'milestoned' event.
 	MilestoneTitle string `json:"milestoneTitle"`
 	// Object referenced by event.
-	Subject MilestoneItem `json:"subject,omitempty"`
+	Subject MilestoneItem `json:"subject"`
 }
 
-func (MilestonedEvent) IsIssueTimelineItems()       {}
+func (MilestonedEvent) IsNode()                     {}
 func (MilestonedEvent) IsPullRequestTimelineItems() {}
-func (MilestonedEvent) IsPullRequestTimelineItem()  {}
+func (MilestonedEvent) IsIssueTimelineItems()       {}
 func (MilestonedEvent) IsIssueTimelineItem()        {}
-func (MilestonedEvent) IsNode()                     {}
+func (MilestonedEvent) IsPullRequestTimelineItem()  {}
 
 // Autogenerated input type of MinimizeComment
 type MinimizeCommentInput struct {
@@ -6745,15 +5571,15 @@ type MinimizeCommentInput struct {
 	// The classification of comment
 	Classifier ReportedContentClassifiers `json:"classifier"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of MinimizeComment
 type MinimizeCommentPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The comment that was minimized.
-	MinimizedComment Minimizable `json:"minimizedComment,omitempty"`
+	MinimizedComment Minimizable `json:"minimizedComment"`
 }
 
 // Autogenerated input type of MoveProjectCard
@@ -6763,17 +5589,17 @@ type MoveProjectCardInput struct {
 	// The id of the column to move it into.
 	ColumnID string `json:"columnId"`
 	// Place the new card after the card with this id. Pass null to place it at the top.
-	AfterCardID *string `json:"afterCardId,omitempty"`
+	AfterCardID *string `json:"afterCardId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of MoveProjectCard
 type MoveProjectCardPayload struct {
 	// The new edge of the moved card.
-	CardEdge *ProjectCardEdge `json:"cardEdge,omitempty"`
+	CardEdge *ProjectCardEdge `json:"cardEdge"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated input type of MoveProjectColumn
@@ -6781,100 +5607,85 @@ type MoveProjectColumnInput struct {
 	// The id of the column to move.
 	ColumnID string `json:"columnId"`
 	// Place the new column after the column with this id. Pass null to place it at the front.
-	AfterColumnID *string `json:"afterColumnId,omitempty"`
+	AfterColumnID *string `json:"afterColumnId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of MoveProjectColumn
 type MoveProjectColumnPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The new edge of the moved column.
-	ColumnEdge *ProjectColumnEdge `json:"columnEdge,omitempty"`
+	ColumnEdge *ProjectColumnEdge `json:"columnEdge"`
 }
 
 // Represents a 'moved_columns_in_project' event on a given issue or pull request.
 type MovedColumnsInProjectEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the primary key from the database.
-	DatabaseID *int   `json:"databaseId,omitempty"`
+	DatabaseID *int   `json:"databaseId"`
 	ID         string `json:"id"`
 }
 
-func (MovedColumnsInProjectEvent) IsIssueTimelineItems()       {}
 func (MovedColumnsInProjectEvent) IsPullRequestTimelineItems() {}
+func (MovedColumnsInProjectEvent) IsIssueTimelineItems()       {}
 func (MovedColumnsInProjectEvent) IsNode()                     {}
 
-// An OIDC identity provider configured to provision identities for an enterprise.
-type OIDCProvider struct {
-	// The enterprise this identity provider belongs to.
-	Enterprise *Enterprise `json:"enterprise,omitempty"`
-	// ExternalIdentities provisioned by this identity provider.
-	ExternalIdentities *ExternalIdentityConnection `json:"externalIdentities,omitempty"`
-	ID                 string                      `json:"id"`
-	// The OIDC identity provider type
-	ProviderType OIDCProviderType `json:"providerType"`
-	// The id of the tenant this provider is attached to
-	TenantID string `json:"tenantId"`
-}
-
-func (OIDCProvider) IsNode() {}
-
 // Audit log entry for a oauth_application.create event.
 type OauthApplicationCreateAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The application URL of the OAuth Application.
-	ApplicationURL *string `json:"applicationUrl,omitempty"`
+	ApplicationURL *string `json:"applicationUrl"`
 	// The callback URL of the OAuth Application.
-	CallbackURL *string `json:"callbackUrl,omitempty"`
+	CallbackURL *string `json:"callbackUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The name of the OAuth Application.
-	OauthApplicationName *string `json:"oauthApplicationName,omitempty"`
+	OauthApplicationName *string `json:"oauthApplicationName"`
 	// The HTTP path for the OAuth Application
-	OauthApplicationResourcePath *string `json:"oauthApplicationResourcePath,omitempty"`
+	OauthApplicationResourcePath *string `json:"oauthApplicationResourcePath"`
 	// The HTTP URL for the OAuth Application
-	OauthApplicationURL *string `json:"oauthApplicationUrl,omitempty"`
+	OauthApplicationURL *string `json:"oauthApplicationUrl"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The rate limit of the OAuth Application.
-	RateLimit *int `json:"rateLimit,omitempty"`
+	RateLimit *int `json:"rateLimit"`
 	// The state of the OAuth Application.
-	State *OauthApplicationCreateAuditEntryState `json:"state,omitempty"`
+	State *OauthApplicationCreateAuditEntryState `json:"state"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (OauthApplicationCreateAuditEntry) IsNode()                           {}
@@ -6888,40 +5699,40 @@ type OrgAddBillingManagerAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The email address used to invite a billing manager for the organization.
-	InvitationEmail *string `json:"invitationEmail,omitempty"`
+	InvitationEmail *string `json:"invitationEmail"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (OrgAddBillingManagerAuditEntry) IsNode()                       {}
@@ -6934,40 +5745,40 @@ type OrgAddMemberAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The permission level of the member added to the organization.
-	Permission *OrgAddMemberAuditEntryPermission `json:"permission,omitempty"`
+	Permission *OrgAddMemberAuditEntryPermission `json:"permission"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (OrgAddMemberAuditEntry) IsNode()                       {}
@@ -6980,46 +5791,46 @@ type OrgBlockUserAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The blocked user.
-	BlockedUser *User `json:"blockedUser,omitempty"`
+	BlockedUser *User `json:"blockedUser"`
 	// The username of the blocked user.
-	BlockedUserName *string `json:"blockedUserName,omitempty"`
+	BlockedUserName *string `json:"blockedUserName"`
 	// The HTTP path for the blocked user.
-	BlockedUserResourcePath *string `json:"blockedUserResourcePath,omitempty"`
+	BlockedUserResourcePath *string `json:"blockedUserResourcePath"`
 	// The HTTP URL for the blocked user.
-	BlockedUserURL *string `json:"blockedUserUrl,omitempty"`
+	BlockedUserURL *string `json:"blockedUserUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (OrgBlockUserAuditEntry) IsNode()                       {}
@@ -7032,38 +5843,38 @@ type OrgConfigDisableCollaboratorsOnlyAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (OrgConfigDisableCollaboratorsOnlyAuditEntry) IsNode()                       {}
@@ -7076,38 +5887,38 @@ type OrgConfigEnableCollaboratorsOnlyAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (OrgConfigEnableCollaboratorsOnlyAuditEntry) IsNode()                       {}
@@ -7120,136 +5931,136 @@ type OrgCreateAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The billing plan for the Organization.
-	BillingPlan *OrgCreateAuditEntryBillingPlan `json:"billingPlan,omitempty"`
+	BillingPlan *OrgCreateAuditEntryBillingPlan `json:"billingPlan"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
-func (OrgCreateAuditEntry) IsOrganizationAuditEntry()     {}
 func (OrgCreateAuditEntry) IsNode()                       {}
 func (OrgCreateAuditEntry) IsAuditEntry()                 {}
 func (OrgCreateAuditEntry) IsOrganizationAuditEntryData() {}
+func (OrgCreateAuditEntry) IsOrganizationAuditEntry()     {}
 
 // Audit log entry for a org.disable_oauth_app_restrictions event.
 type OrgDisableOauthAppRestrictionsAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
-func (OrgDisableOauthAppRestrictionsAuditEntry) IsOrganizationAuditEntry()     {}
 func (OrgDisableOauthAppRestrictionsAuditEntry) IsNode()                       {}
 func (OrgDisableOauthAppRestrictionsAuditEntry) IsAuditEntry()                 {}
 func (OrgDisableOauthAppRestrictionsAuditEntry) IsOrganizationAuditEntryData() {}
+func (OrgDisableOauthAppRestrictionsAuditEntry) IsOrganizationAuditEntry()     {}
 
 // Audit log entry for a org.disable_saml event.
 type OrgDisableSamlAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	// The SAML provider's digest algorithm URL.
-	DigestMethodURL *string `json:"digestMethodUrl,omitempty"`
+	DigestMethodURL *string `json:"digestMethodUrl"`
 	ID              string  `json:"id"`
 	// The SAML provider's issuer URL.
-	IssuerURL *string `json:"issuerUrl,omitempty"`
+	IssuerURL *string `json:"issuerUrl"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The SAML provider's signature algorithm URL.
-	SignatureMethodURL *string `json:"signatureMethodUrl,omitempty"`
+	SignatureMethodURL *string `json:"signatureMethodUrl"`
 	// The SAML provider's single sign-on URL.
-	SingleSignOnURL *string `json:"singleSignOnUrl,omitempty"`
+	SingleSignOnURL *string `json:"singleSignOnUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (OrgDisableSamlAuditEntry) IsNode()                       {}
@@ -7262,38 +6073,38 @@ type OrgDisableTwoFactorRequirementAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (OrgDisableTwoFactorRequirementAuditEntry) IsNode()                       {}
@@ -7306,38 +6117,38 @@ type OrgEnableOauthAppRestrictionsAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (OrgEnableOauthAppRestrictionsAuditEntry) IsNode()                       {}
@@ -7350,46 +6161,46 @@ type OrgEnableSamlAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	// The SAML provider's digest algorithm URL.
-	DigestMethodURL *string `json:"digestMethodUrl,omitempty"`
+	DigestMethodURL *string `json:"digestMethodUrl"`
 	ID              string  `json:"id"`
 	// The SAML provider's issuer URL.
-	IssuerURL *string `json:"issuerUrl,omitempty"`
+	IssuerURL *string `json:"issuerUrl"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The SAML provider's signature algorithm URL.
-	SignatureMethodURL *string `json:"signatureMethodUrl,omitempty"`
+	SignatureMethodURL *string `json:"signatureMethodUrl"`
 	// The SAML provider's single sign-on URL.
-	SingleSignOnURL *string `json:"singleSignOnUrl,omitempty"`
+	SingleSignOnURL *string `json:"singleSignOnUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (OrgEnableSamlAuditEntry) IsNode()                       {}
@@ -7402,94 +6213,86 @@ type OrgEnableTwoFactorRequirementAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
-func (OrgEnableTwoFactorRequirementAuditEntry) IsOrganizationAuditEntry()     {}
 func (OrgEnableTwoFactorRequirementAuditEntry) IsNode()                       {}
 func (OrgEnableTwoFactorRequirementAuditEntry) IsAuditEntry()                 {}
 func (OrgEnableTwoFactorRequirementAuditEntry) IsOrganizationAuditEntryData() {}
-
-// Ordering options for an organization's enterprise owner connections.
-type OrgEnterpriseOwnerOrder struct {
-	// The field to order enterprise owners by.
-	Field OrgEnterpriseOwnerOrderField `json:"field"`
-	// The ordering direction.
-	Direction OrderDirection `json:"direction"`
-}
+func (OrgEnableTwoFactorRequirementAuditEntry) IsOrganizationAuditEntry()     {}
 
 // Audit log entry for a org.invite_member event.
 type OrgInviteMemberAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	// The email address of the organization invitation.
-	Email *string `json:"email,omitempty"`
+	Email *string `json:"email"`
 	ID    string  `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The organization invitation.
-	OrganizationInvitation *OrganizationInvitation `json:"organizationInvitation,omitempty"`
+	OrganizationInvitation *OrganizationInvitation `json:"organizationInvitation"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (OrgInviteMemberAuditEntry) IsNode()                       {}
@@ -7502,44 +6305,44 @@ type OrgInviteToBusinessAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	// The HTTP path for this enterprise.
-	EnterpriseResourcePath *string `json:"enterpriseResourcePath,omitempty"`
+	EnterpriseResourcePath *string `json:"enterpriseResourcePath"`
 	// The slug of the enterprise.
-	EnterpriseSlug *string `json:"enterpriseSlug,omitempty"`
+	EnterpriseSlug *string `json:"enterpriseSlug"`
 	// The HTTP URL for this enterprise.
-	EnterpriseURL *string `json:"enterpriseUrl,omitempty"`
+	EnterpriseURL *string `json:"enterpriseUrl"`
 	ID            string  `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (OrgInviteToBusinessAuditEntry) IsNode()                       {}
@@ -7553,44 +6356,44 @@ type OrgOauthAppAccessApprovedAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The name of the OAuth Application.
-	OauthApplicationName *string `json:"oauthApplicationName,omitempty"`
+	OauthApplicationName *string `json:"oauthApplicationName"`
 	// The HTTP path for the OAuth Application
-	OauthApplicationResourcePath *string `json:"oauthApplicationResourcePath,omitempty"`
+	OauthApplicationResourcePath *string `json:"oauthApplicationResourcePath"`
 	// The HTTP URL for the OAuth Application
-	OauthApplicationURL *string `json:"oauthApplicationUrl,omitempty"`
+	OauthApplicationURL *string `json:"oauthApplicationUrl"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (OrgOauthAppAccessApprovedAuditEntry) IsNode()                           {}
@@ -7604,44 +6407,44 @@ type OrgOauthAppAccessDeniedAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The name of the OAuth Application.
-	OauthApplicationName *string `json:"oauthApplicationName,omitempty"`
+	OauthApplicationName *string `json:"oauthApplicationName"`
 	// The HTTP path for the OAuth Application
-	OauthApplicationResourcePath *string `json:"oauthApplicationResourcePath,omitempty"`
+	OauthApplicationResourcePath *string `json:"oauthApplicationResourcePath"`
 	// The HTTP URL for the OAuth Application
-	OauthApplicationURL *string `json:"oauthApplicationUrl,omitempty"`
+	OauthApplicationURL *string `json:"oauthApplicationUrl"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (OrgOauthAppAccessDeniedAuditEntry) IsNode()                           {}
@@ -7655,91 +6458,91 @@ type OrgOauthAppAccessRequestedAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The name of the OAuth Application.
-	OauthApplicationName *string `json:"oauthApplicationName,omitempty"`
+	OauthApplicationName *string `json:"oauthApplicationName"`
 	// The HTTP path for the OAuth Application
-	OauthApplicationResourcePath *string `json:"oauthApplicationResourcePath,omitempty"`
+	OauthApplicationResourcePath *string `json:"oauthApplicationResourcePath"`
 	// The HTTP URL for the OAuth Application
-	OauthApplicationURL *string `json:"oauthApplicationUrl,omitempty"`
+	OauthApplicationURL *string `json:"oauthApplicationUrl"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
-func (OrgOauthAppAccessRequestedAuditEntry) IsOrganizationAuditEntry()         {}
 func (OrgOauthAppAccessRequestedAuditEntry) IsNode()                           {}
 func (OrgOauthAppAccessRequestedAuditEntry) IsAuditEntry()                     {}
 func (OrgOauthAppAccessRequestedAuditEntry) IsOauthApplicationAuditEntryData() {}
 func (OrgOauthAppAccessRequestedAuditEntry) IsOrganizationAuditEntryData()     {}
+func (OrgOauthAppAccessRequestedAuditEntry) IsOrganizationAuditEntry()         {}
 
 // Audit log entry for a org.remove_billing_manager event.
 type OrgRemoveBillingManagerAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The reason for the billing manager being removed.
-	Reason *OrgRemoveBillingManagerAuditEntryReason `json:"reason,omitempty"`
+	Reason *OrgRemoveBillingManagerAuditEntryReason `json:"reason"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (OrgRemoveBillingManagerAuditEntry) IsNode()                       {}
@@ -7752,42 +6555,42 @@ type OrgRemoveMemberAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The types of membership the member has with the organization.
-	MembershipTypes []OrgRemoveMemberAuditEntryMembershipType `json:"membershipTypes,omitempty"`
+	MembershipTypes []OrgRemoveMemberAuditEntryMembershipType `json:"membershipTypes"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The reason for the member being removed.
-	Reason *OrgRemoveMemberAuditEntryReason `json:"reason,omitempty"`
+	Reason *OrgRemoveMemberAuditEntryReason `json:"reason"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (OrgRemoveMemberAuditEntry) IsNode()                       {}
@@ -7800,42 +6603,42 @@ type OrgRemoveOutsideCollaboratorAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The types of membership the outside collaborator has with the organization.
-	MembershipTypes []OrgRemoveOutsideCollaboratorAuditEntryMembershipType `json:"membershipTypes,omitempty"`
+	MembershipTypes []OrgRemoveOutsideCollaboratorAuditEntryMembershipType `json:"membershipTypes"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The reason for the outside collaborator being removed from the Organization.
-	Reason *OrgRemoveOutsideCollaboratorAuditEntryReason `json:"reason,omitempty"`
+	Reason *OrgRemoveOutsideCollaboratorAuditEntryReason `json:"reason"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (OrgRemoveOutsideCollaboratorAuditEntry) IsNode()                       {}
@@ -7848,52 +6651,52 @@ type OrgRestoreMemberAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The number of custom email routings for the restored member.
-	RestoredCustomEmailRoutingsCount *int `json:"restoredCustomEmailRoutingsCount,omitempty"`
+	RestoredCustomEmailRoutingsCount *int `json:"restoredCustomEmailRoutingsCount"`
 	// The number of issue assignments for the restored member.
-	RestoredIssueAssignmentsCount *int `json:"restoredIssueAssignmentsCount,omitempty"`
+	RestoredIssueAssignmentsCount *int `json:"restoredIssueAssignmentsCount"`
 	// Restored organization membership objects.
-	RestoredMemberships []OrgRestoreMemberAuditEntryMembership `json:"restoredMemberships,omitempty"`
+	RestoredMemberships []OrgRestoreMemberAuditEntryMembership `json:"restoredMemberships"`
 	// The number of restored memberships.
-	RestoredMembershipsCount *int `json:"restoredMembershipsCount,omitempty"`
+	RestoredMembershipsCount *int `json:"restoredMembershipsCount"`
 	// The number of repositories of the restored member.
-	RestoredRepositoriesCount *int `json:"restoredRepositoriesCount,omitempty"`
+	RestoredRepositoriesCount *int `json:"restoredRepositoriesCount"`
 	// The number of starred repositories for the restored member.
-	RestoredRepositoryStarsCount *int `json:"restoredRepositoryStarsCount,omitempty"`
+	RestoredRepositoryStarsCount *int `json:"restoredRepositoryStarsCount"`
 	// The number of watched repositories for the restored member.
-	RestoredRepositoryWatchesCount *int `json:"restoredRepositoryWatchesCount,omitempty"`
+	RestoredRepositoryWatchesCount *int `json:"restoredRepositoryWatchesCount"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (OrgRestoreMemberAuditEntry) IsNode()                       {}
@@ -7904,13 +6707,13 @@ func (OrgRestoreMemberAuditEntry) IsOrganizationAuditEntry()     {}
 // Metadata for an organization membership for org.restore_member actions
 type OrgRestoreMemberMembershipOrganizationAuditEntryData struct {
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 }
 
 func (OrgRestoreMemberMembershipOrganizationAuditEntryData) IsOrgRestoreMemberAuditEntryMembership() {
@@ -7920,28 +6723,28 @@ func (OrgRestoreMemberMembershipOrganizationAuditEntryData) IsOrganizationAuditE
 // Metadata for a repository membership for org.restore_member actions
 type OrgRestoreMemberMembershipRepositoryAuditEntryData struct {
 	// The repository associated with the action
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The name of the repository
-	RepositoryName *string `json:"repositoryName,omitempty"`
+	RepositoryName *string `json:"repositoryName"`
 	// The HTTP path for the repository
-	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
+	RepositoryResourcePath *string `json:"repositoryResourcePath"`
 	// The HTTP URL for the repository
-	RepositoryURL *string `json:"repositoryUrl,omitempty"`
+	RepositoryURL *string `json:"repositoryUrl"`
 }
 
-func (OrgRestoreMemberMembershipRepositoryAuditEntryData) IsRepositoryAuditEntryData()             {}
 func (OrgRestoreMemberMembershipRepositoryAuditEntryData) IsOrgRestoreMemberAuditEntryMembership() {}
+func (OrgRestoreMemberMembershipRepositoryAuditEntryData) IsRepositoryAuditEntryData()             {}
 
 // Metadata for a team membership for org.restore_member actions
 type OrgRestoreMemberMembershipTeamAuditEntryData struct {
 	// The team associated with the action
-	Team *Team `json:"team,omitempty"`
+	Team *Team `json:"team"`
 	// The name of the team
-	TeamName *string `json:"teamName,omitempty"`
+	TeamName *string `json:"teamName"`
 	// The HTTP path for this team
-	TeamResourcePath *string `json:"teamResourcePath,omitempty"`
+	TeamResourcePath *string `json:"teamResourcePath"`
 	// The HTTP URL for this team
-	TeamURL *string `json:"teamUrl,omitempty"`
+	TeamURL *string `json:"teamUrl"`
 }
 
 func (OrgRestoreMemberMembershipTeamAuditEntryData) IsTeamAuditEntryData()                   {}
@@ -7952,94 +6755,94 @@ type OrgUnblockUserAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The user being unblocked by the organization.
-	BlockedUser *User `json:"blockedUser,omitempty"`
+	BlockedUser *User `json:"blockedUser"`
 	// The username of the blocked user.
-	BlockedUserName *string `json:"blockedUserName,omitempty"`
+	BlockedUserName *string `json:"blockedUserName"`
 	// The HTTP path for the blocked user.
-	BlockedUserResourcePath *string `json:"blockedUserResourcePath,omitempty"`
+	BlockedUserResourcePath *string `json:"blockedUserResourcePath"`
 	// The HTTP URL for the blocked user.
-	BlockedUserURL *string `json:"blockedUserUrl,omitempty"`
+	BlockedUserURL *string `json:"blockedUserUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
+func (OrgUnblockUserAuditEntry) IsOrganizationAuditEntry()     {}
 func (OrgUnblockUserAuditEntry) IsNode()                       {}
 func (OrgUnblockUserAuditEntry) IsAuditEntry()                 {}
 func (OrgUnblockUserAuditEntry) IsOrganizationAuditEntryData() {}
-func (OrgUnblockUserAuditEntry) IsOrganizationAuditEntry()     {}
 
 // Audit log entry for a org.update_default_repository_permission
 type OrgUpdateDefaultRepositoryPermissionAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
-	// The new base repository permission level for the organization.
-	Permission *OrgUpdateDefaultRepositoryPermissionAuditEntryPermission `json:"permission,omitempty"`
-	// The former base repository permission level for the organization.
-	PermissionWas *OrgUpdateDefaultRepositoryPermissionAuditEntryPermission `json:"permissionWas,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
+	// The new default repository permission level for the organization.
+	Permission *OrgUpdateDefaultRepositoryPermissionAuditEntryPermission `json:"permission"`
+	// The former default repository permission level for the organization.
+	PermissionWas *OrgUpdateDefaultRepositoryPermissionAuditEntryPermission `json:"permissionWas"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (OrgUpdateDefaultRepositoryPermissionAuditEntry) IsNode()                       {}
@@ -8052,42 +6855,42 @@ type OrgUpdateMemberAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The new member permission level for the organization.
-	Permission *OrgUpdateMemberAuditEntryPermission `json:"permission,omitempty"`
+	Permission *OrgUpdateMemberAuditEntryPermission `json:"permission"`
 	// The former member permission level for the organization.
-	PermissionWas *OrgUpdateMemberAuditEntryPermission `json:"permissionWas,omitempty"`
+	PermissionWas *OrgUpdateMemberAuditEntryPermission `json:"permissionWas"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (OrgUpdateMemberAuditEntry) IsNode()                       {}
@@ -8100,42 +6903,42 @@ type OrgUpdateMemberRepositoryCreationPermissionAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// Can members create repositories in the organization.
-	CanCreateRepositories *bool `json:"canCreateRepositories,omitempty"`
+	CanCreateRepositories *bool `json:"canCreateRepositories"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 	// The permission for visibility level of repositories for this organization.
-	Visibility *OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility `json:"visibility,omitempty"`
+	Visibility *OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility `json:"visibility"`
 }
 
 func (OrgUpdateMemberRepositoryCreationPermissionAuditEntry) IsNode()                       {}
@@ -8148,40 +6951,40 @@ type OrgUpdateMemberRepositoryInvitationPermissionAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// Can outside collaborators be invited to repositories in the organization.
-	CanInviteOutsideCollaboratorsToRepositories *bool `json:"canInviteOutsideCollaboratorsToRepositories,omitempty"`
+	CanInviteOutsideCollaboratorsToRepositories *bool `json:"canInviteOutsideCollaboratorsToRepositories"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (OrgUpdateMemberRepositoryInvitationPermissionAuditEntry) IsNode()                       {}
@@ -8194,36 +6997,30 @@ type Organization struct {
 	// Determine if this repository owner has any items that can be pinned to their profile.
 	AnyPinnableItems bool `json:"anyPinnableItems"`
 	// Audit log entries of the organization
-	AuditLog *OrganizationAuditEntryConnection `json:"auditLog,omitempty"`
+	AuditLog *OrganizationAuditEntryConnection `json:"auditLog"`
 	// A URL pointing to the organization's public avatar.
 	AvatarURL string `json:"avatarUrl"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
+	DatabaseID *int `json:"databaseId"`
 	// The organization's public profile description.
-	Description *string `json:"description,omitempty"`
+	Description *string `json:"description"`
 	// The organization's public profile description rendered to HTML.
-	DescriptionHTML *string `json:"descriptionHTML,omitempty"`
+	DescriptionHTML *string `json:"descriptionHTML"`
 	// A list of domains owned by the organization.
-	Domains *VerifiableDomainConnection `json:"domains,omitempty"`
+	Domains *VerifiableDomainConnection `json:"domains"`
 	// The organization's public email.
-	Email *string `json:"email,omitempty"`
-	// A list of owners of the organization's enterprise account.
-	EnterpriseOwners *OrganizationEnterpriseOwnerConnection `json:"enterpriseOwners,omitempty"`
-	// The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
-	EstimatedNextSponsorsPayoutInCents int `json:"estimatedNextSponsorsPayoutInCents"`
+	Email *string `json:"email"`
 	// True if this user/organization has a GitHub Sponsors listing.
 	HasSponsorsListing bool   `json:"hasSponsorsListing"`
 	ID                 string `json:"id"`
 	// The interaction ability settings for this organization.
-	InteractionAbility *RepositoryInteractionAbility `json:"interactionAbility,omitempty"`
+	InteractionAbility *RepositoryInteractionAbility `json:"interactionAbility"`
 	// The setting value for whether the organization has an IP allow list enabled.
 	IPAllowListEnabledSetting IPAllowListEnabledSettingValue `json:"ipAllowListEnabledSetting"`
 	// The IP addresses that are allowed to access resources owned by the organization.
-	IPAllowListEntries *IPAllowListEntryConnection `json:"ipAllowListEntries,omitempty"`
-	// The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled.
-	IPAllowListForInstalledAppsEnabledSetting IPAllowListForInstalledAppsEnabledSettingValue `json:"ipAllowListForInstalledAppsEnabledSetting"`
+	IPAllowListEntries *IPAllowListEntryConnection `json:"ipAllowListEntries"`
 	// Check if the given account is sponsoring this user/organization.
 	IsSponsoredBy bool `json:"isSponsoredBy"`
 	// True if the viewer is sponsored by this user/organization.
@@ -8231,95 +7028,71 @@ type Organization struct {
 	// Whether the organization has verified its profile email and website.
 	IsVerified bool `json:"isVerified"`
 	// Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
-	ItemShowcase *ProfileItemShowcase `json:"itemShowcase,omitempty"`
+	ItemShowcase *ProfileItemShowcase `json:"itemShowcase"`
 	// The organization's public profile location.
-	Location *string `json:"location,omitempty"`
+	Location *string `json:"location"`
 	// The organization's login name.
 	Login string `json:"login"`
 	// Get the status messages members of this entity have set that are either public or visible only to the organization.
-	MemberStatuses *UserStatusConnection `json:"memberStatuses,omitempty"`
-	// Members can fork private repositories in this organization
-	MembersCanForkPrivateRepositories bool `json:"membersCanForkPrivateRepositories"`
+	MemberStatuses *UserStatusConnection `json:"memberStatuses"`
 	// A list of users who are members of this organization.
-	MembersWithRole *OrganizationMemberConnection `json:"membersWithRole,omitempty"`
-	// The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
-	MonthlyEstimatedSponsorsIncomeInCents int `json:"monthlyEstimatedSponsorsIncomeInCents"`
+	MembersWithRole *OrganizationMemberConnection `json:"membersWithRole"`
 	// The organization's public profile name.
-	Name *string `json:"name,omitempty"`
+	Name *string `json:"name"`
 	// The HTTP path creating a new team
 	NewTeamResourcePath string `json:"newTeamResourcePath"`
 	// The HTTP URL creating a new team
 	NewTeamURL string `json:"newTeamUrl"`
-	// Indicates if email notification delivery for this organization is restricted to verified or approved domains.
+	// Indicates if email notification delivery for this organization is restricted to verified domains.
 	NotificationDeliveryRestrictionEnabledSetting NotificationRestrictionSettingValue `json:"notificationDeliveryRestrictionEnabledSetting"`
 	// The billing email for the organization.
-	OrganizationBillingEmail *string `json:"organizationBillingEmail,omitempty"`
+	OrganizationBillingEmail *string `json:"organizationBillingEmail"`
 	// A list of packages under the owner.
-	Packages *PackageConnection `json:"packages,omitempty"`
+	Packages *PackageConnection `json:"packages"`
 	// A list of users who have been invited to join this organization.
-	PendingMembers *UserConnection `json:"pendingMembers,omitempty"`
+	PendingMembers *UserConnection `json:"pendingMembers"`
 	// A list of repositories and gists this profile owner can pin to their profile.
-	PinnableItems *PinnableItemConnection `json:"pinnableItems,omitempty"`
+	PinnableItems *PinnableItemConnection `json:"pinnableItems"`
 	// A list of repositories and gists this profile owner has pinned to their profile
-	PinnedItems *PinnableItemConnection `json:"pinnedItems,omitempty"`
+	PinnedItems *PinnableItemConnection `json:"pinnedItems"`
 	// Returns how many more items this profile owner can pin to their profile.
 	PinnedItemsRemaining int `json:"pinnedItemsRemaining"`
 	// Find project by number.
-	Project *Project `json:"project,omitempty"`
-	// Find a project by project (beta) number.
-	ProjectNext *ProjectNext `json:"projectNext,omitempty"`
+	Project *Project `json:"project"`
 	// A list of projects under the owner.
-	Projects *ProjectConnection `json:"projects,omitempty"`
-	// A list of projects (beta) under the owner.
-	ProjectsNext *ProjectNextConnection `json:"projectsNext,omitempty"`
+	Projects *ProjectConnection `json:"projects"`
 	// The HTTP path listing organization's projects
 	ProjectsResourcePath string `json:"projectsResourcePath"`
 	// The HTTP URL listing organization's projects
 	ProjectsURL string `json:"projectsUrl"`
 	// A list of repositories that the user owns.
-	Repositories *RepositoryConnection `json:"repositories,omitempty"`
+	Repositories *RepositoryConnection `json:"repositories"`
 	// Find Repository.
-	Repository *Repository `json:"repository,omitempty"`
-	// Discussion comments this user has authored.
-	RepositoryDiscussionComments *DiscussionCommentConnection `json:"repositoryDiscussionComments,omitempty"`
-	// Discussions this user has started.
-	RepositoryDiscussions *DiscussionConnection `json:"repositoryDiscussions,omitempty"`
-	// A list of all repository migrations for this organization.
-	RepositoryMigrations *RepositoryMigrationConnection `json:"repositoryMigrations,omitempty"`
+	Repository *Repository `json:"repository"`
 	// When true the organization requires all members, billing managers, and outside collaborators to enable two-factor authentication.
-	RequiresTwoFactorAuthentication *bool `json:"requiresTwoFactorAuthentication,omitempty"`
+	RequiresTwoFactorAuthentication *bool `json:"requiresTwoFactorAuthentication"`
 	// The HTTP path for this organization.
 	ResourcePath string `json:"resourcePath"`
 	// The Organization's SAML identity providers
-	SamlIdentityProvider *OrganizationIdentityProvider `json:"samlIdentityProvider,omitempty"`
-	// List of users and organizations this entity is sponsoring.
-	Sponsoring *SponsorConnection `json:"sponsoring,omitempty"`
-	// List of sponsors for this user or organization.
-	Sponsors *SponsorConnection `json:"sponsors,omitempty"`
-	// Events involving this sponsorable, such as new sponsorships.
-	SponsorsActivities *SponsorsActivityConnection `json:"sponsorsActivities,omitempty"`
+	SamlIdentityProvider *OrganizationIdentityProvider `json:"samlIdentityProvider"`
 	// The GitHub Sponsors listing for this user or organization.
-	SponsorsListing *SponsorsListing `json:"sponsorsListing,omitempty"`
-	// The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active.
-	SponsorshipForViewerAsSponsor *Sponsorship `json:"sponsorshipForViewerAsSponsor,omitempty"`
-	// The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active.
-	SponsorshipForViewerAsSponsorable *Sponsorship `json:"sponsorshipForViewerAsSponsorable,omitempty"`
-	// List of sponsorship updates sent from this sponsorable to sponsors.
-	SponsorshipNewsletters *SponsorshipNewsletterConnection `json:"sponsorshipNewsletters,omitempty"`
+	SponsorsListing *SponsorsListing `json:"sponsorsListing"`
+	// The viewer's sponsorship of this entity.
+	SponsorshipForViewerAsSponsor *Sponsorship `json:"sponsorshipForViewerAsSponsor"`
 	// This object's sponsorships as the maintainer.
-	SponsorshipsAsMaintainer *SponsorshipConnection `json:"sponsorshipsAsMaintainer,omitempty"`
+	SponsorshipsAsMaintainer *SponsorshipConnection `json:"sponsorshipsAsMaintainer"`
 	// This object's sponsorships as the sponsor.
-	SponsorshipsAsSponsor *SponsorshipConnection `json:"sponsorshipsAsSponsor,omitempty"`
+	SponsorshipsAsSponsor *SponsorshipConnection `json:"sponsorshipsAsSponsor"`
 	// Find an organization's team by its slug.
-	Team *Team `json:"team,omitempty"`
+	Team *Team `json:"team"`
 	// A list of teams in this organization.
-	Teams *TeamConnection `json:"teams,omitempty"`
+	Teams *TeamConnection `json:"teams"`
 	// The HTTP path listing organization's teams
 	TeamsResourcePath string `json:"teamsResourcePath"`
 	// The HTTP URL listing organization's teams
 	TeamsURL string `json:"teamsUrl"`
 	// The organization's Twitter username.
-	TwitterUsername *string `json:"twitterUsername,omitempty"`
+	TwitterUsername *string `json:"twitterUsername"`
 	// Identifies the date and time when the object was last updated.
 	UpdatedAt time.Time `json:"updatedAt"`
 	// The HTTP URL for this organization.
@@ -8341,39 +7114,35 @@ type Organization struct {
 	// True if the viewer is sponsoring this user/organization.
 	ViewerIsSponsoring bool `json:"viewerIsSponsoring"`
 	// The organization's public profile URL.
-	WebsiteURL *string `json:"websiteUrl,omitempty"`
-}
-
-func (Organization) IsIPAllowListOwner()                  {}
-func (Organization) IsVerifiableDomainOwner()             {}
-func (Organization) IsAuditEntryActor()                   {}
-func (Organization) IsSearchResultItem()                  {}
-func (Organization) IsAssignee()                          {}
-func (Organization) IsPermissionGranter()                 {}
-func (Organization) IsSponsorableItem()                   {}
-func (Organization) IsReactor()                           {}
-func (Organization) IsNode()                              {}
-func (Organization) IsActor()                             {}
-func (Organization) IsPackageOwner()                      {}
-func (Organization) IsProjectOwner()                      {}
-func (Organization) IsProjectNextOwner()                  {}
-func (Organization) IsRepositoryDiscussionAuthor()        {}
-func (Organization) IsRepositoryDiscussionCommentAuthor() {}
-func (Organization) IsRepositoryOwner()                   {}
-func (Organization) IsUniformResourceLocatable()          {}
-func (Organization) IsMemberStatusable()                  {}
-func (Organization) IsProfileOwner()                      {}
-func (Organization) IsSponsorable()                       {}
-func (Organization) IsSponsor()                           {}
+	WebsiteURL *string `json:"websiteUrl"`
+}
+
+func (Organization) IsPermissionGranter()        {}
+func (Organization) IsSearchResultItem()         {}
+func (Organization) IsSponsor()                  {}
+func (Organization) IsVerifiableDomainOwner()    {}
+func (Organization) IsAuditEntryActor()          {}
+func (Organization) IsAssignee()                 {}
+func (Organization) IsNode()                     {}
+func (Organization) IsActor()                    {}
+func (Organization) IsPackageOwner()             {}
+func (Organization) IsProjectOwner()             {}
+func (Organization) IsRepositoryOwner()          {}
+func (Organization) IsUniformResourceLocatable() {}
+func (Organization) IsMemberStatusable()         {}
+func (Organization) IsProfileOwner()             {}
+func (Organization) IsSponsorable()              {}
+func (Organization) IsSponsorableItem()          {}
+func (Organization) IsIPAllowListOwner()         {}
 
 // The connection type for OrganizationAuditEntry.
 type OrganizationAuditEntryConnection struct {
 	// A list of edges.
-	Edges []*OrganizationAuditEntryEdge `json:"edges,omitempty"`
+	Edges []*OrganizationAuditEntryEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []OrganizationAuditEntry `json:"nodes,omitempty"`
+	Nodes []OrganizationAuditEntry `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -8383,17 +7152,17 @@ type OrganizationAuditEntryEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node OrganizationAuditEntry `json:"node,omitempty"`
+	Node OrganizationAuditEntry `json:"node"`
 }
 
-// A list of organizations managed by an enterprise.
+// The connection type for Organization.
 type OrganizationConnection struct {
 	// A list of edges.
-	Edges []*OrganizationEdge `json:"edges,omitempty"`
+	Edges []*OrganizationEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*Organization `json:"nodes,omitempty"`
+	Nodes []*Organization `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -8403,48 +7172,26 @@ type OrganizationEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *Organization `json:"node,omitempty"`
-}
-
-// The connection type for User.
-type OrganizationEnterpriseOwnerConnection struct {
-	// A list of edges.
-	Edges []*OrganizationEnterpriseOwnerEdge `json:"edges,omitempty"`
-	// A list of nodes.
-	Nodes []*User `json:"nodes,omitempty"`
-	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
-	// Identifies the total count of items in the connection.
-	TotalCount int `json:"totalCount"`
-}
-
-// An enterprise owner in the context of an organization that is part of the enterprise.
-type OrganizationEnterpriseOwnerEdge struct {
-	// A cursor for use in pagination.
-	Cursor string `json:"cursor"`
-	// The item at the end of the edge.
-	Node *User `json:"node,omitempty"`
-	// The role of the owner with respect to the organization.
-	OrganizationRole RoleInOrganization `json:"organizationRole"`
+	Node *Organization `json:"node"`
 }
 
 // An Identity Provider configured to provision SAML and SCIM identities for Organizations
 type OrganizationIdentityProvider struct {
 	// The digest algorithm used to sign SAML requests for the Identity Provider.
-	DigestMethod *string `json:"digestMethod,omitempty"`
+	DigestMethod *string `json:"digestMethod"`
 	// External Identities provisioned by this Identity Provider
-	ExternalIdentities *ExternalIdentityConnection `json:"externalIdentities,omitempty"`
+	ExternalIdentities *ExternalIdentityConnection `json:"externalIdentities"`
 	ID                 string                      `json:"id"`
 	// The x509 certificate used by the Identity Provider to sign assertions and responses.
-	IdpCertificate *string `json:"idpCertificate,omitempty"`
+	IdpCertificate *string `json:"idpCertificate"`
 	// The Issuer Entity ID for the SAML Identity Provider
-	Issuer *string `json:"issuer,omitempty"`
+	Issuer *string `json:"issuer"`
 	// Organization this Identity Provider belongs to
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The signature algorithm used to sign SAML requests for the Identity Provider.
-	SignatureMethod *string `json:"signatureMethod,omitempty"`
+	SignatureMethod *string `json:"signatureMethod"`
 	// The URL endpoint for the Identity Provider's SAML SSO.
-	SsoURL *string `json:"ssoUrl,omitempty"`
+	SsoURL *string `json:"ssoUrl"`
 }
 
 func (OrganizationIdentityProvider) IsNode() {}
@@ -8454,16 +7201,16 @@ type OrganizationInvitation struct {
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// The email address of the user invited to the organization.
-	Email *string `json:"email,omitempty"`
+	Email *string `json:"email"`
 	ID    string  `json:"id"`
 	// The type of invitation that was sent (e.g. email, user).
 	InvitationType OrganizationInvitationType `json:"invitationType"`
 	// The user who was invited to the organization.
-	Invitee *User `json:"invitee,omitempty"`
+	Invitee *User `json:"invitee"`
 	// The user who created the invitation.
-	Inviter *User `json:"inviter,omitempty"`
+	Inviter *User `json:"inviter"`
 	// The organization the invite is for
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The user's pending role in the organization (e.g. member, owner).
 	Role OrganizationInvitationRole `json:"role"`
 }
@@ -8473,11 +7220,11 @@ func (OrganizationInvitation) IsNode() {}
 // The connection type for OrganizationInvitation.
 type OrganizationInvitationConnection struct {
 	// A list of edges.
-	Edges []*OrganizationInvitationEdge `json:"edges,omitempty"`
+	Edges []*OrganizationInvitationEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*OrganizationInvitation `json:"nodes,omitempty"`
+	Nodes []*OrganizationInvitation `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -8487,17 +7234,17 @@ type OrganizationInvitationEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *OrganizationInvitation `json:"node,omitempty"`
+	Node *OrganizationInvitation `json:"node"`
 }
 
 // The connection type for User.
 type OrganizationMemberConnection struct {
 	// A list of edges.
-	Edges []*OrganizationMemberEdge `json:"edges,omitempty"`
+	Edges []*OrganizationMemberEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*User `json:"nodes,omitempty"`
+	Nodes []*User `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -8507,11 +7254,11 @@ type OrganizationMemberEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer.
-	HasTwoFactorEnabled *bool `json:"hasTwoFactorEnabled,omitempty"`
+	HasTwoFactorEnabled *bool `json:"hasTwoFactorEnabled"`
 	// The item at the end of the edge.
-	Node *User `json:"node,omitempty"`
+	Node *User `json:"node"`
 	// The role this user has in the organization.
-	Role *OrganizationMemberRole `json:"role,omitempty"`
+	Role *OrganizationMemberRole `json:"role"`
 }
 
 // Ordering options for organization connections.
@@ -8529,7 +7276,7 @@ type OrganizationTeamsHovercardContext struct {
 	// An octicon to accompany this context
 	Octicon string `json:"octicon"`
 	// Teams in this organization the user is a member of that are relevant
-	RelevantTeams *TeamConnection `json:"relevantTeams,omitempty"`
+	RelevantTeams *TeamConnection `json:"relevantTeams"`
 	// The path for the full team list for this user
 	TeamsResourcePath string `json:"teamsResourcePath"`
 	// The URL for the full team list for this user
@@ -8547,7 +7294,7 @@ type OrganizationsHovercardContext struct {
 	// An octicon to accompany this context
 	Octicon string `json:"octicon"`
 	// Organizations this user is a member of that are relevant
-	RelevantOrganizations *OrganizationConnection `json:"relevantOrganizations,omitempty"`
+	RelevantOrganizations *OrganizationConnection `json:"relevantOrganizations"`
 	// The total number of organizations this user is in
 	TotalOrganizationCount int `json:"totalOrganizationCount"`
 }
@@ -8558,19 +7305,19 @@ func (OrganizationsHovercardContext) IsHovercardContext() {}
 type Package struct {
 	ID string `json:"id"`
 	// Find the latest version for the package.
-	LatestVersion *PackageVersion `json:"latestVersion,omitempty"`
+	LatestVersion *PackageVersion `json:"latestVersion"`
 	// Identifies the name of the package.
 	Name string `json:"name"`
 	// Identifies the type of the package.
 	PackageType PackageType `json:"packageType"`
 	// The repository this package belongs to.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// Statistics about package activity.
-	Statistics *PackageStatistics `json:"statistics,omitempty"`
+	Statistics *PackageStatistics `json:"statistics"`
 	// Find package version by version string.
-	Version *PackageVersion `json:"version,omitempty"`
+	Version *PackageVersion `json:"version"`
 	// list of versions for this package
-	Versions *PackageVersionConnection `json:"versions,omitempty"`
+	Versions *PackageVersionConnection `json:"versions"`
 }
 
 func (Package) IsNode() {}
@@ -8578,11 +7325,11 @@ func (Package) IsNode() {}
 // The connection type for Package.
 type PackageConnection struct {
 	// A list of edges.
-	Edges []*PackageEdge `json:"edges,omitempty"`
+	Edges []*PackageEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*Package `json:"nodes,omitempty"`
+	Nodes []*Package `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -8592,28 +7339,28 @@ type PackageEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *Package `json:"node,omitempty"`
+	Node *Package `json:"node"`
 }
 
 // A file in a package version.
 type PackageFile struct {
 	ID string `json:"id"`
 	// MD5 hash of the file.
-	Md5 *string `json:"md5,omitempty"`
+	Md5 *string `json:"md5"`
 	// Name of the file.
 	Name string `json:"name"`
 	// The package version this file belongs to.
-	PackageVersion *PackageVersion `json:"packageVersion,omitempty"`
+	PackageVersion *PackageVersion `json:"packageVersion"`
 	// SHA1 hash of the file.
-	Sha1 *string `json:"sha1,omitempty"`
+	Sha1 *string `json:"sha1"`
 	// SHA256 hash of the file.
-	Sha256 *string `json:"sha256,omitempty"`
+	Sha256 *string `json:"sha256"`
 	// Size of the file in bytes.
-	Size *int `json:"size,omitempty"`
+	Size *int `json:"size"`
 	// Identifies the date and time when the object was last updated.
 	UpdatedAt time.Time `json:"updatedAt"`
 	// URL to download the asset.
-	URL *string `json:"url,omitempty"`
+	URL *string `json:"url"`
 }
 
 func (PackageFile) IsNode() {}
@@ -8621,11 +7368,11 @@ func (PackageFile) IsNode() {}
 // The connection type for PackageFile.
 type PackageFileConnection struct {
 	// A list of edges.
-	Edges []*PackageFileEdge `json:"edges,omitempty"`
+	Edges []*PackageFileEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*PackageFile `json:"nodes,omitempty"`
+	Nodes []*PackageFile `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -8635,23 +7382,23 @@ type PackageFileEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *PackageFile `json:"node,omitempty"`
+	Node *PackageFile `json:"node"`
 }
 
 // Ways in which lists of package files can be ordered upon return.
 type PackageFileOrder struct {
 	// The field in which to order package files by.
-	Field *PackageFileOrderField `json:"field,omitempty"`
+	Field *PackageFileOrderField `json:"field"`
 	// The direction in which to order package files by the specified field.
-	Direction *OrderDirection `json:"direction,omitempty"`
+	Direction *OrderDirection `json:"direction"`
 }
 
 // Ways in which lists of packages can be ordered upon return.
 type PackageOrder struct {
 	// The field in which to order packages by.
-	Field *PackageOrderField `json:"field,omitempty"`
+	Field *PackageOrderField `json:"field"`
 	// The direction in which to order packages by the specified field.
-	Direction *OrderDirection `json:"direction,omitempty"`
+	Direction *OrderDirection `json:"direction"`
 }
 
 // Represents a object that contains package activity statistics such as downloads.
@@ -8666,7 +7413,7 @@ type PackageTag struct {
 	// Identifies the tag name of the version.
 	Name string `json:"name"`
 	// Version that the tag is associated with.
-	Version *PackageVersion `json:"version,omitempty"`
+	Version *PackageVersion `json:"version"`
 }
 
 func (PackageTag) IsNode() {}
@@ -8674,22 +7421,22 @@ func (PackageTag) IsNode() {}
 // Information about a specific package version.
 type PackageVersion struct {
 	// List of files associated with this package version
-	Files *PackageFileConnection `json:"files,omitempty"`
+	Files *PackageFileConnection `json:"files"`
 	ID    string                 `json:"id"`
 	// The package associated with this version.
-	Package *Package `json:"package,omitempty"`
+	Package *Package `json:"package"`
 	// The platform this version was built for.
-	Platform *string `json:"platform,omitempty"`
+	Platform *string `json:"platform"`
 	// Whether or not this version is a pre-release.
 	PreRelease bool `json:"preRelease"`
 	// The README of this package version.
-	Readme *string `json:"readme,omitempty"`
+	Readme *string `json:"readme"`
 	// The release associated with this package version.
-	Release *Release `json:"release,omitempty"`
+	Release *Release `json:"release"`
 	// Statistics about package activity.
-	Statistics *PackageVersionStatistics `json:"statistics,omitempty"`
+	Statistics *PackageVersionStatistics `json:"statistics"`
 	// The package version summary.
-	Summary *string `json:"summary,omitempty"`
+	Summary *string `json:"summary"`
 	// The version string.
 	Version string `json:"version"`
 }
@@ -8699,11 +7446,11 @@ func (PackageVersion) IsNode() {}
 // The connection type for PackageVersion.
 type PackageVersionConnection struct {
 	// A list of edges.
-	Edges []*PackageVersionEdge `json:"edges,omitempty"`
+	Edges []*PackageVersionEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*PackageVersion `json:"nodes,omitempty"`
+	Nodes []*PackageVersion `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -8713,15 +7460,15 @@ type PackageVersionEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *PackageVersion `json:"node,omitempty"`
+	Node *PackageVersion `json:"node"`
 }
 
 // Ways in which lists of package versions can be ordered upon return.
 type PackageVersionOrder struct {
 	// The field in which to order package versions by.
-	Field *PackageVersionOrderField `json:"field,omitempty"`
+	Field *PackageVersionOrderField `json:"field"`
 	// The direction in which to order package versions by the specified field.
-	Direction *OrderDirection `json:"direction,omitempty"`
+	Direction *OrderDirection `json:"direction"`
 }
 
 // Represents a object that contains package version activity statistics such as downloads.
@@ -8733,23 +7480,23 @@ type PackageVersionStatistics struct {
 // Information about pagination in a connection.
 type PageInfo struct {
 	// When paginating forwards, the cursor to continue.
-	EndCursor *string `json:"endCursor,omitempty"`
+	EndCursor *string `json:"endCursor"`
 	// When paginating forwards, are there more items?
 	HasNextPage bool `json:"hasNextPage"`
 	// When paginating backwards, are there more items?
 	HasPreviousPage bool `json:"hasPreviousPage"`
 	// When paginating backwards, the cursor to continue.
-	StartCursor *string `json:"startCursor,omitempty"`
+	StartCursor *string `json:"startCursor"`
 }
 
 // A level of permission and source for a user's access to a repository.
 type PermissionSource struct {
 	// The organization the repository belongs to.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The level of access this source has granted to the user.
 	Permission DefaultRepositoryPermissionField `json:"permission"`
 	// The source of this permission.
-	Source PermissionGranter `json:"source,omitempty"`
+	Source PermissionGranter `json:"source"`
 }
 
 // Autogenerated input type of PinIssue
@@ -8757,25 +7504,25 @@ type PinIssueInput struct {
 	// The ID of the issue to be pinned
 	IssueID string `json:"issueId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of PinIssue
 type PinIssuePayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The issue that was pinned
-	Issue *Issue `json:"issue,omitempty"`
+	Issue *Issue `json:"issue"`
 }
 
 // The connection type for PinnableItem.
 type PinnableItemConnection struct {
 	// A list of edges.
-	Edges []*PinnableItemEdge `json:"edges,omitempty"`
+	Edges []*PinnableItemEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []PinnableItem `json:"nodes,omitempty"`
+	Nodes []PinnableItem `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -8785,81 +7532,35 @@ type PinnableItemEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node PinnableItem `json:"node,omitempty"`
-}
-
-// A Pinned Discussion is a discussion pinned to a repository's index page.
-type PinnedDiscussion struct {
-	// Identifies the date and time when the object was created.
-	CreatedAt time.Time `json:"createdAt"`
-	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
-	// The discussion that was pinned.
-	Discussion *Discussion `json:"discussion,omitempty"`
-	// Color stops of the chosen gradient
-	GradientStopColors []string `json:"gradientStopColors,omitempty"`
-	ID                 string   `json:"id"`
-	// Background texture pattern
-	Pattern PinnedDiscussionPattern `json:"pattern"`
-	// The actor that pinned this discussion.
-	PinnedBy Actor `json:"pinnedBy,omitempty"`
-	// Preconfigured background gradient option
-	PreconfiguredGradient *PinnedDiscussionGradient `json:"preconfiguredGradient,omitempty"`
-	// The repository associated with this node.
-	Repository *Repository `json:"repository,omitempty"`
-	// Identifies the date and time when the object was last updated.
-	UpdatedAt time.Time `json:"updatedAt"`
-}
-
-func (PinnedDiscussion) IsNode()           {}
-func (PinnedDiscussion) IsRepositoryNode() {}
-
-// The connection type for PinnedDiscussion.
-type PinnedDiscussionConnection struct {
-	// A list of edges.
-	Edges []*PinnedDiscussionEdge `json:"edges,omitempty"`
-	// A list of nodes.
-	Nodes []*PinnedDiscussion `json:"nodes,omitempty"`
-	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
-	// Identifies the total count of items in the connection.
-	TotalCount int `json:"totalCount"`
-}
-
-// An edge in a connection.
-type PinnedDiscussionEdge struct {
-	// A cursor for use in pagination.
-	Cursor string `json:"cursor"`
-	// The item at the end of the edge.
-	Node *PinnedDiscussion `json:"node,omitempty"`
+	Node PinnableItem `json:"node"`
 }
 
 // Represents a 'pinned' event on a given issue or pull request.
 type PinnedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
 	// Identifies the issue associated with the event.
-	Issue *Issue `json:"issue,omitempty"`
+	Issue *Issue `json:"issue"`
 }
 
-func (PinnedEvent) IsIssueTimelineItems()       {}
-func (PinnedEvent) IsPullRequestTimelineItems() {}
 func (PinnedEvent) IsNode()                     {}
+func (PinnedEvent) IsPullRequestTimelineItems() {}
+func (PinnedEvent) IsIssueTimelineItems()       {}
 
 // A Pinned Issue is a issue pinned to a repository's index page.
 type PinnedIssue struct {
 	// Identifies the primary key from the database.
-	DatabaseID *int   `json:"databaseId,omitempty"`
+	DatabaseID *int   `json:"databaseId"`
 	ID         string `json:"id"`
 	// The issue that was pinned.
-	Issue *Issue `json:"issue,omitempty"`
+	Issue *Issue `json:"issue"`
 	// The actor that pinned this issue.
-	PinnedBy Actor `json:"pinnedBy,omitempty"`
+	PinnedBy Actor `json:"pinnedBy"`
 	// The repository that this issue was pinned to.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 }
 
 func (PinnedIssue) IsNode() {}
@@ -8867,11 +7568,11 @@ func (PinnedIssue) IsNode() {}
 // The connection type for PinnedIssue.
 type PinnedIssueConnection struct {
 	// A list of edges.
-	Edges []*PinnedIssueEdge `json:"edges,omitempty"`
+	Edges []*PinnedIssueEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*PinnedIssue `json:"nodes,omitempty"`
+	Nodes []*PinnedIssue `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -8881,7 +7582,7 @@ type PinnedIssueEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *PinnedIssue `json:"node,omitempty"`
+	Node *PinnedIssue `json:"node"`
 }
 
 // Audit log entry for a private_repository_forking.disable event.
@@ -8889,52 +7590,52 @@ type PrivateRepositoryForkingDisableAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	// The HTTP path for this enterprise.
-	EnterpriseResourcePath *string `json:"enterpriseResourcePath,omitempty"`
+	EnterpriseResourcePath *string `json:"enterpriseResourcePath"`
 	// The slug of the enterprise.
-	EnterpriseSlug *string `json:"enterpriseSlug,omitempty"`
+	EnterpriseSlug *string `json:"enterpriseSlug"`
 	// The HTTP URL for this enterprise.
-	EnterpriseURL *string `json:"enterpriseUrl,omitempty"`
+	EnterpriseURL *string `json:"enterpriseUrl"`
 	ID            string  `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The repository associated with the action
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The name of the repository
-	RepositoryName *string `json:"repositoryName,omitempty"`
+	RepositoryName *string `json:"repositoryName"`
 	// The HTTP path for the repository
-	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
+	RepositoryResourcePath *string `json:"repositoryResourcePath"`
 	// The HTTP URL for the repository
-	RepositoryURL *string `json:"repositoryUrl,omitempty"`
+	RepositoryURL *string `json:"repositoryUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (PrivateRepositoryForkingDisableAuditEntry) IsNode()                       {}
@@ -8949,52 +7650,52 @@ type PrivateRepositoryForkingEnableAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	// The HTTP path for this enterprise.
-	EnterpriseResourcePath *string `json:"enterpriseResourcePath,omitempty"`
+	EnterpriseResourcePath *string `json:"enterpriseResourcePath"`
 	// The slug of the enterprise.
-	EnterpriseSlug *string `json:"enterpriseSlug,omitempty"`
+	EnterpriseSlug *string `json:"enterpriseSlug"`
 	// The HTTP URL for this enterprise.
-	EnterpriseURL *string `json:"enterpriseUrl,omitempty"`
+	EnterpriseURL *string `json:"enterpriseUrl"`
 	ID            string  `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The repository associated with the action
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The name of the repository
-	RepositoryName *string `json:"repositoryName,omitempty"`
+	RepositoryName *string `json:"repositoryName"`
 	// The HTTP path for the repository
-	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
+	RepositoryResourcePath *string `json:"repositoryResourcePath"`
 	// The HTTP URL for the repository
-	RepositoryURL *string `json:"repositoryUrl,omitempty"`
+	RepositoryURL *string `json:"repositoryUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (PrivateRepositoryForkingEnableAuditEntry) IsNode()                       {}
@@ -9009,38 +7710,38 @@ type ProfileItemShowcase struct {
 	// Whether or not the owner has pinned any repositories or gists.
 	HasPinnedItems bool `json:"hasPinnedItems"`
 	// The repositories and gists in the showcase. If the profile owner has any pinned items, those will be returned. Otherwise, the profile owner's popular repositories will be returned.
-	Items *PinnableItemConnection `json:"items,omitempty"`
+	Items *PinnableItemConnection `json:"items"`
 }
 
 // Projects manage issues, pull requests and notes within a project owner.
 type Project struct {
 	// The project's description body.
-	Body *string `json:"body,omitempty"`
+	Body *string `json:"body"`
 	// The projects description body rendered to HTML.
 	BodyHTML string `json:"bodyHTML"`
 	// `true` if the object is closed (definition of closed may depend on type)
 	Closed bool `json:"closed"`
 	// Identifies the date and time when the object was closed.
-	ClosedAt *time.Time `json:"closedAt,omitempty"`
+	ClosedAt *time.Time `json:"closedAt"`
 	// List of columns in the project
-	Columns *ProjectColumnConnection `json:"columns,omitempty"`
+	Columns *ProjectColumnConnection `json:"columns"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// The actor who originally created the project.
-	Creator Actor `json:"creator,omitempty"`
+	Creator Actor `json:"creator"`
 	// Identifies the primary key from the database.
-	DatabaseID *int   `json:"databaseId,omitempty"`
+	DatabaseID *int   `json:"databaseId"`
 	ID         string `json:"id"`
 	// The project's name.
 	Name string `json:"name"`
 	// The project's number.
 	Number int `json:"number"`
 	// The project's owner. Currently limited to repositories, organizations, and users.
-	Owner ProjectOwner `json:"owner,omitempty"`
+	Owner ProjectOwner `json:"owner"`
 	// List of pending cards in this project
-	PendingCards *ProjectCardConnection `json:"pendingCards,omitempty"`
+	PendingCards *ProjectCardConnection `json:"pendingCards"`
 	// Project progress details.
-	Progress *ProjectProgress `json:"progress,omitempty"`
+	Progress *ProjectProgress `json:"progress"`
 	// The HTTP path for this project
 	ResourcePath string `json:"resourcePath"`
 	// Whether the project is open or closed.
@@ -9064,26 +7765,26 @@ type ProjectCard struct {
 	// in a pending state and has yet to be associated with a column. Once cards are
 	// associated with a column, they will not become pending in the future.
 	//
-	Column *ProjectColumn `json:"column,omitempty"`
+	Column *ProjectColumn `json:"column"`
 	// The card content item
-	Content ProjectCardItem `json:"content,omitempty"`
+	Content ProjectCardItem `json:"content"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// The actor who created this card
-	Creator Actor `json:"creator,omitempty"`
+	Creator Actor `json:"creator"`
 	// Identifies the primary key from the database.
-	DatabaseID *int   `json:"databaseId,omitempty"`
+	DatabaseID *int   `json:"databaseId"`
 	ID         string `json:"id"`
 	// Whether the card is archived
 	IsArchived bool `json:"isArchived"`
 	// The card note
-	Note *string `json:"note,omitempty"`
+	Note *string `json:"note"`
 	// The project that contains this card.
-	Project *Project `json:"project,omitempty"`
+	Project *Project `json:"project"`
 	// The HTTP path for this card
 	ResourcePath string `json:"resourcePath"`
 	// The state of ProjectCard
-	State *ProjectCardState `json:"state,omitempty"`
+	State *ProjectCardState `json:"state"`
 	// Identifies the date and time when the object was last updated.
 	UpdatedAt time.Time `json:"updatedAt"`
 	// The HTTP URL for this card
@@ -9095,11 +7796,11 @@ func (ProjectCard) IsNode() {}
 // The connection type for ProjectCard.
 type ProjectCardConnection struct {
 	// A list of edges.
-	Edges []*ProjectCardEdge `json:"edges,omitempty"`
+	Edges []*ProjectCardEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*ProjectCard `json:"nodes,omitempty"`
+	Nodes []*ProjectCard `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -9109,24 +7810,24 @@ type ProjectCardEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *ProjectCard `json:"node,omitempty"`
+	Node *ProjectCard `json:"node"`
 }
 
 // A column inside a project.
 type ProjectColumn struct {
 	// List of cards in the column
-	Cards *ProjectCardConnection `json:"cards,omitempty"`
+	Cards *ProjectCardConnection `json:"cards"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the primary key from the database.
-	DatabaseID *int   `json:"databaseId,omitempty"`
+	DatabaseID *int   `json:"databaseId"`
 	ID         string `json:"id"`
 	// The project column's name.
 	Name string `json:"name"`
 	// The project that contains this column.
-	Project *Project `json:"project,omitempty"`
+	Project *Project `json:"project"`
 	// The semantic purpose of the column
-	Purpose *ProjectColumnPurpose `json:"purpose,omitempty"`
+	Purpose *ProjectColumnPurpose `json:"purpose"`
 	// The HTTP path for this project column
 	ResourcePath string `json:"resourcePath"`
 	// Identifies the date and time when the object was last updated.
@@ -9140,11 +7841,11 @@ func (ProjectColumn) IsNode() {}
 // The connection type for ProjectColumn.
 type ProjectColumnConnection struct {
 	// A list of edges.
-	Edges []*ProjectColumnEdge `json:"edges,omitempty"`
+	Edges []*ProjectColumnEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*ProjectColumn `json:"nodes,omitempty"`
+	Nodes []*ProjectColumn `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -9154,17 +7855,17 @@ type ProjectColumnEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *ProjectColumn `json:"node,omitempty"`
+	Node *ProjectColumn `json:"node"`
 }
 
 // A list of projects associated with the owner.
 type ProjectConnection struct {
 	// A list of edges.
-	Edges []*ProjectEdge `json:"edges,omitempty"`
+	Edges []*ProjectEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*Project `json:"nodes,omitempty"`
+	Nodes []*Project `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -9174,200 +7875,7 @@ type ProjectEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *Project `json:"node,omitempty"`
-}
-
-// New projects that manage issues, pull requests and drafts using tables and boards.
-type ProjectNext struct {
-	// Returns true if the project is closed.
-	Closed bool `json:"closed"`
-	// Identifies the date and time when the object was closed.
-	ClosedAt *time.Time `json:"closedAt,omitempty"`
-	// Identifies the date and time when the object was created.
-	CreatedAt time.Time `json:"createdAt"`
-	// The actor who originally created the project.
-	Creator Actor `json:"creator,omitempty"`
-	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
-	// The project's description.
-	Description *string `json:"description,omitempty"`
-	// List of fields in the project
-	Fields *ProjectNextFieldConnection `json:"fields,omitempty"`
-	ID     string                      `json:"id"`
-	// List of items in the project
-	Items *ProjectNextItemConnection `json:"items,omitempty"`
-	// The project's number.
-	Number int `json:"number"`
-	// The project's owner. Currently limited to organizations and users.
-	Owner ProjectNextOwner `json:"owner,omitempty"`
-	// Returns true if the project is public.
-	Public bool `json:"public"`
-	// The repositories the project is linked to.
-	Repositories *RepositoryConnection `json:"repositories,omitempty"`
-	// The HTTP path for this project
-	ResourcePath string `json:"resourcePath"`
-	// The project's short description.
-	ShortDescription *string `json:"shortDescription,omitempty"`
-	// The project's name.
-	Title *string `json:"title,omitempty"`
-	// Identifies the date and time when the object was last updated.
-	UpdatedAt time.Time `json:"updatedAt"`
-	// The HTTP URL for this project
-	URL string `json:"url"`
-	// Check if the current viewer can update this object.
-	ViewerCanUpdate bool `json:"viewerCanUpdate"`
-}
-
-func (ProjectNext) IsNode()      {}
-func (ProjectNext) IsClosable()  {}
-func (ProjectNext) IsUpdatable() {}
-
-// The connection type for ProjectNext.
-type ProjectNextConnection struct {
-	// A list of edges.
-	Edges []*ProjectNextEdge `json:"edges,omitempty"`
-	// A list of nodes.
-	Nodes []*ProjectNext `json:"nodes,omitempty"`
-	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
-	// Identifies the total count of items in the connection.
-	TotalCount int `json:"totalCount"`
-}
-
-// An edge in a connection.
-type ProjectNextEdge struct {
-	// A cursor for use in pagination.
-	Cursor string `json:"cursor"`
-	// The item at the end of the edge.
-	Node *ProjectNext `json:"node,omitempty"`
-}
-
-// A field inside a project.
-type ProjectNextField struct {
-	// Identifies the date and time when the object was created.
-	CreatedAt time.Time `json:"createdAt"`
-	// The field's type.
-	DataType ProjectNextFieldType `json:"dataType"`
-	// Identifies the primary key from the database.
-	DatabaseID *int   `json:"databaseId,omitempty"`
-	ID         string `json:"id"`
-	// The project field's name.
-	Name string `json:"name"`
-	// The project that contains this field.
-	Project *ProjectNext `json:"project,omitempty"`
-	// The field's settings.
-	Settings *string `json:"settings,omitempty"`
-	// Identifies the date and time when the object was last updated.
-	UpdatedAt time.Time `json:"updatedAt"`
-}
-
-func (ProjectNextField) IsProjectNextFieldCommon() {}
-func (ProjectNextField) IsNode()                   {}
-
-// The connection type for ProjectNextField.
-type ProjectNextFieldConnection struct {
-	// A list of edges.
-	Edges []*ProjectNextFieldEdge `json:"edges,omitempty"`
-	// A list of nodes.
-	Nodes []*ProjectNextField `json:"nodes,omitempty"`
-	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
-	// Identifies the total count of items in the connection.
-	TotalCount int `json:"totalCount"`
-}
-
-// An edge in a connection.
-type ProjectNextFieldEdge struct {
-	// A cursor for use in pagination.
-	Cursor string `json:"cursor"`
-	// The item at the end of the edge.
-	Node *ProjectNextField `json:"node,omitempty"`
-}
-
-// An item within a new Project.
-type ProjectNextItem struct {
-	// The content of the referenced issue or pull request
-	Content ProjectNextItemContent `json:"content,omitempty"`
-	// Identifies the date and time when the object was created.
-	CreatedAt time.Time `json:"createdAt"`
-	// The actor who created the item.
-	Creator Actor `json:"creator,omitempty"`
-	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
-	// List of field values
-	FieldValues *ProjectNextItemFieldValueConnection `json:"fieldValues,omitempty"`
-	ID          string                               `json:"id"`
-	// Whether the item is archived.
-	IsArchived bool `json:"isArchived"`
-	// The project that contains this item.
-	Project *ProjectNext `json:"project,omitempty"`
-	// The title of the item
-	Title *string `json:"title,omitempty"`
-	// Identifies the date and time when the object was last updated.
-	UpdatedAt time.Time `json:"updatedAt"`
-}
-
-func (ProjectNextItem) IsNode() {}
-
-// The connection type for ProjectNextItem.
-type ProjectNextItemConnection struct {
-	// A list of edges.
-	Edges []*ProjectNextItemEdge `json:"edges,omitempty"`
-	// A list of nodes.
-	Nodes []*ProjectNextItem `json:"nodes,omitempty"`
-	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
-	// Identifies the total count of items in the connection.
-	TotalCount int `json:"totalCount"`
-}
-
-// An edge in a connection.
-type ProjectNextItemEdge struct {
-	// A cursor for use in pagination.
-	Cursor string `json:"cursor"`
-	// The item at the end of the edge.
-	Node *ProjectNextItem `json:"node,omitempty"`
-}
-
-// An value of a field in an item of a new Project.
-type ProjectNextItemFieldValue struct {
-	// Identifies the date and time when the object was created.
-	CreatedAt time.Time `json:"createdAt"`
-	// The actor who created the item.
-	Creator Actor `json:"creator,omitempty"`
-	// Identifies the primary key from the database.
-	DatabaseID *int   `json:"databaseId,omitempty"`
-	ID         string `json:"id"`
-	// The project field that contains this value.
-	ProjectField *ProjectNextField `json:"projectField,omitempty"`
-	// The project item that contains this value.
-	ProjectItem *ProjectNextItem `json:"projectItem,omitempty"`
-	// Identifies the date and time when the object was last updated.
-	UpdatedAt time.Time `json:"updatedAt"`
-	// The value of a field
-	Value *string `json:"value,omitempty"`
-}
-
-func (ProjectNextItemFieldValue) IsNode() {}
-
-// The connection type for ProjectNextItemFieldValue.
-type ProjectNextItemFieldValueConnection struct {
-	// A list of edges.
-	Edges []*ProjectNextItemFieldValueEdge `json:"edges,omitempty"`
-	// A list of nodes.
-	Nodes []*ProjectNextItemFieldValue `json:"nodes,omitempty"`
-	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
-	// Identifies the total count of items in the connection.
-	TotalCount int `json:"totalCount"`
-}
-
-// An edge in a connection.
-type ProjectNextItemFieldValueEdge struct {
-	// A cursor for use in pagination.
-	Cursor string `json:"cursor"`
-	// The item at the end of the edge.
-	Node *ProjectNextItemFieldValue `json:"node,omitempty"`
+	Node *Project `json:"node"`
 }
 
 // Ways in which lists of projects can be ordered upon return.
@@ -9399,18 +7907,18 @@ type ProjectProgress struct {
 // A user's public key.
 type PublicKey struct {
 	// The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
-	AccessedAt *time.Time `json:"accessedAt,omitempty"`
+	AccessedAt *time.Time `json:"accessedAt"`
 	// Identifies the date and time when the key was created. Keys created before March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
-	CreatedAt *time.Time `json:"createdAt,omitempty"`
+	CreatedAt *time.Time `json:"createdAt"`
 	// The fingerprint for this PublicKey.
 	Fingerprint string `json:"fingerprint"`
 	ID          string `json:"id"`
 	// Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
-	IsReadOnly *bool `json:"isReadOnly,omitempty"`
+	IsReadOnly *bool `json:"isReadOnly"`
 	// The public key string.
 	Key string `json:"key"`
 	// Identifies the date and time when the key was updated. Keys created before March 5th, 2014 may have inaccurate values. Values will be null for keys not owned by the user.
-	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
+	UpdatedAt *time.Time `json:"updatedAt"`
 }
 
 func (PublicKey) IsNode() {}
@@ -9418,11 +7926,11 @@ func (PublicKey) IsNode() {}
 // The connection type for PublicKey.
 type PublicKeyConnection struct {
 	// A list of edges.
-	Edges []*PublicKeyEdge `json:"edges,omitempty"`
+	Edges []*PublicKeyEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*PublicKey `json:"nodes,omitempty"`
+	Nodes []*PublicKey `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -9432,31 +7940,31 @@ type PublicKeyEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *PublicKey `json:"node,omitempty"`
+	Node *PublicKey `json:"node"`
 }
 
 // A repository pull request.
 type PullRequest struct {
 	// Reason that the conversation was locked.
-	ActiveLockReason *LockReason `json:"activeLockReason,omitempty"`
+	ActiveLockReason *LockReason `json:"activeLockReason"`
 	// The number of additions in this pull request.
 	Additions int `json:"additions"`
 	// A list of Users assigned to this object.
-	Assignees *UserConnection `json:"assignees,omitempty"`
+	Assignees *UserConnection `json:"assignees"`
 	// The actor who authored the comment.
-	Author Actor `json:"author,omitempty"`
+	Author Actor `json:"author"`
 	// Author's association with the subject of the comment.
 	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation"`
 	// Returns the auto-merge request object if one exists for this pull request.
-	AutoMergeRequest *AutoMergeRequest `json:"autoMergeRequest,omitempty"`
+	AutoMergeRequest *AutoMergeRequest `json:"autoMergeRequest"`
 	// Identifies the base Ref associated with the pull request.
-	BaseRef *Ref `json:"baseRef,omitempty"`
+	BaseRef *Ref `json:"baseRef"`
 	// Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
 	BaseRefName string `json:"baseRefName"`
 	// Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
 	BaseRefOid string `json:"baseRefOid"`
 	// The repository associated with this pull request's base Ref.
-	BaseRepository *Repository `json:"baseRepository,omitempty"`
+	BaseRepository *Repository `json:"baseRepository"`
 	// The body as Markdown.
 	Body string `json:"body"`
 	// The body rendered to HTML.
@@ -9472,37 +7980,35 @@ type PullRequest struct {
 	// `true` if the pull request is closed
 	Closed bool `json:"closed"`
 	// Identifies the date and time when the object was closed.
-	ClosedAt *time.Time `json:"closedAt,omitempty"`
-	// List of issues that were may be closed by this pull request
-	ClosingIssuesReferences *IssueConnection `json:"closingIssuesReferences,omitempty"`
+	ClosedAt *time.Time `json:"closedAt"`
 	// A list of comments associated with the pull request.
-	Comments *IssueCommentConnection `json:"comments,omitempty"`
+	Comments *IssueCommentConnection `json:"comments"`
 	// A list of commits present in this pull request's head branch not present in the base branch.
-	Commits *PullRequestCommitConnection `json:"commits,omitempty"`
+	Commits *PullRequestCommitConnection `json:"commits"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Check if this comment was created via an email reply.
 	CreatedViaEmail bool `json:"createdViaEmail"`
 	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
+	DatabaseID *int `json:"databaseId"`
 	// The number of deletions in this pull request.
 	Deletions int `json:"deletions"`
 	// The actor who edited this pull request's body.
-	Editor Actor `json:"editor,omitempty"`
+	Editor Actor `json:"editor"`
 	// Lists the files changed within this pull request.
-	Files *PullRequestChangedFileConnection `json:"files,omitempty"`
+	Files *PullRequestChangedFileConnection `json:"files"`
 	// Identifies the head Ref associated with the pull request.
-	HeadRef *Ref `json:"headRef,omitempty"`
+	HeadRef *Ref `json:"headRef"`
 	// Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
 	HeadRefName string `json:"headRefName"`
 	// Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
 	HeadRefOid string `json:"headRefOid"`
 	// The repository associated with this pull request's head Ref.
-	HeadRepository *Repository `json:"headRepository,omitempty"`
+	HeadRepository *Repository `json:"headRepository"`
 	// The owner of the repository associated with this pull request's head Ref.
-	HeadRepositoryOwner RepositoryOwner `json:"headRepositoryOwner,omitempty"`
+	HeadRepositoryOwner RepositoryOwner `json:"headRepositoryOwner"`
 	// The hovercard information for this issue
-	Hovercard *Hovercard `json:"hovercard,omitempty"`
+	Hovercard *Hovercard `json:"hovercard"`
 	ID        string     `json:"id"`
 	// Check if this comment was edited and includes an edit with the creation data
 	IncludesCreatedEdit bool `json:"includesCreatedEdit"`
@@ -9511,55 +8017,49 @@ type PullRequest struct {
 	// Identifies if the pull request is a draft.
 	IsDraft bool `json:"isDraft"`
 	// Is this pull request read by the viewer
-	IsReadByViewer *bool `json:"isReadByViewer,omitempty"`
+	IsReadByViewer *bool `json:"isReadByViewer"`
 	// A list of labels associated with the object.
-	Labels *LabelConnection `json:"labels,omitempty"`
+	Labels *LabelConnection `json:"labels"`
 	// The moment the editor made the last edit
-	LastEditedAt *time.Time `json:"lastEditedAt,omitempty"`
+	LastEditedAt *time.Time `json:"lastEditedAt"`
 	// A list of latest reviews per user associated with the pull request.
-	LatestOpinionatedReviews *PullRequestReviewConnection `json:"latestOpinionatedReviews,omitempty"`
+	LatestOpinionatedReviews *PullRequestReviewConnection `json:"latestOpinionatedReviews"`
 	// A list of latest reviews per user associated with the pull request that are not also pending review.
-	LatestReviews *PullRequestReviewConnection `json:"latestReviews,omitempty"`
+	LatestReviews *PullRequestReviewConnection `json:"latestReviews"`
 	// `true` if the pull request is locked
 	Locked bool `json:"locked"`
 	// Indicates whether maintainers can modify the pull request.
 	MaintainerCanModify bool `json:"maintainerCanModify"`
 	// The commit that was created when this pull request was merged.
-	MergeCommit *Commit `json:"mergeCommit,omitempty"`
+	MergeCommit *Commit `json:"mergeCommit"`
 	// Whether or not the pull request can be merged based on the existence of merge conflicts.
 	Mergeable MergeableState `json:"mergeable"`
 	// Whether or not the pull request was merged.
 	Merged bool `json:"merged"`
 	// The date and time that the pull request was merged.
-	MergedAt *time.Time `json:"mergedAt,omitempty"`
+	MergedAt *time.Time `json:"mergedAt"`
 	// The actor who merged the pull request.
-	MergedBy Actor `json:"mergedBy,omitempty"`
+	MergedBy Actor `json:"mergedBy"`
 	// Identifies the milestone associated with the pull request.
-	Milestone *Milestone `json:"milestone,omitempty"`
+	Milestone *Milestone `json:"milestone"`
 	// Identifies the pull request number.
 	Number int `json:"number"`
 	// A list of Users that are participating in the Pull Request conversation.
-	Participants *UserConnection `json:"participants,omitempty"`
+	Participants *UserConnection `json:"participants"`
 	// The permalink to the pull request.
 	Permalink string `json:"permalink"`
 	// The commit that GitHub automatically generated to test if this pull request could be merged. This field will not return a value if the pull request is merged, or if the test merge commit is still being generated. See the `mergeable` field for more details on the mergeability of the pull request.
-	PotentialMergeCommit *Commit `json:"potentialMergeCommit,omitempty"`
+	PotentialMergeCommit *Commit `json:"potentialMergeCommit"`
 	// List of project cards associated with this pull request.
-	ProjectCards *ProjectCardConnection `json:"projectCards,omitempty"`
-	// Find a project by project (beta) number.
-	ProjectNext *ProjectNext `json:"projectNext,omitempty"`
-	// List of project (beta) items associated with this pull request.
-	ProjectNextItems *ProjectNextItemConnection `json:"projectNextItems,omitempty"`
-	// A list of projects (beta) under the owner.
-	ProjectsNext *ProjectNextConnection `json:"projectsNext,omitempty"`
+	ProjectCards *ProjectCardConnection `json:"projectCards"`
 	// Identifies when the comment was published at.
-	PublishedAt *time.Time `json:"publishedAt,omitempty"`
+	PublishedAt *time.Time `json:"publishedAt"`
 	// A list of reactions grouped by content left on the subject.
-	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`
+	ReactionGroups []*ReactionGroup `json:"reactionGroups"`
 	// A list of Reactions left on the Issue.
-	Reactions *ReactionConnection `json:"reactions,omitempty"`
+	Reactions *ReactionConnection `json:"reactions"`
 	// The repository associated with this node.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The HTTP path for this pull request.
 	ResourcePath string `json:"resourcePath"`
 	// The HTTP path for reverting this pull request.
@@ -9567,31 +8067,29 @@ type PullRequest struct {
 	// The HTTP URL for reverting this pull request.
 	RevertURL string `json:"revertUrl"`
 	// The current status of this pull request with respect to code review.
-	ReviewDecision *PullRequestReviewDecision `json:"reviewDecision,omitempty"`
+	ReviewDecision *PullRequestReviewDecision `json:"reviewDecision"`
 	// A list of review requests associated with the pull request.
-	ReviewRequests *ReviewRequestConnection `json:"reviewRequests,omitempty"`
+	ReviewRequests *ReviewRequestConnection `json:"reviewRequests"`
 	// The list of all review threads for this pull request.
-	ReviewThreads *PullRequestReviewThreadConnection `json:"reviewThreads,omitempty"`
+	ReviewThreads *PullRequestReviewThreadConnection `json:"reviewThreads"`
 	// A list of reviews associated with the pull request.
-	Reviews *PullRequestReviewConnection `json:"reviews,omitempty"`
+	Reviews *PullRequestReviewConnection `json:"reviews"`
 	// Identifies the state of the pull request.
 	State PullRequestState `json:"state"`
 	// A list of reviewer suggestions based on commit history and past review comments.
-	SuggestedReviewers []*SuggestedReviewer `json:"suggestedReviewers,omitempty"`
+	SuggestedReviewers []*SuggestedReviewer `json:"suggestedReviewers"`
 	// A list of events, comments, commits, etc. associated with the pull request.
-	Timeline *PullRequestTimelineConnection `json:"timeline,omitempty"`
+	Timeline *PullRequestTimelineConnection `json:"timeline"`
 	// A list of events, comments, commits, etc. associated with the pull request.
-	TimelineItems *PullRequestTimelineItemsConnection `json:"timelineItems,omitempty"`
+	TimelineItems *PullRequestTimelineItemsConnection `json:"timelineItems"`
 	// Identifies the pull request title.
 	Title string `json:"title"`
-	// Identifies the pull request title rendered to HTML.
-	TitleHTML string `json:"titleHTML"`
 	// Identifies the date and time when the object was last updated.
 	UpdatedAt time.Time `json:"updatedAt"`
 	// The HTTP URL for this pull request.
 	URL string `json:"url"`
 	// A list of edits to this content.
-	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`
+	UserContentEdits *UserContentEditConnection `json:"userContentEdits"`
 	// Whether or not the viewer can apply suggestion.
 	ViewerCanApplySuggestion bool `json:"viewerCanApplySuggestion"`
 	// Check if the viewer can restore the deleted head ref.
@@ -9600,8 +8098,6 @@ type PullRequest struct {
 	ViewerCanDisableAutoMerge bool `json:"viewerCanDisableAutoMerge"`
 	// Whether or not the viewer can enable auto-merge
 	ViewerCanEnableAutoMerge bool `json:"viewerCanEnableAutoMerge"`
-	// Indicates whether the viewer can bypass branch protections and merge the pull request immediately
-	ViewerCanMergeAsAdmin bool `json:"viewerCanMergeAsAdmin"`
 	// Can user react to this subject
 	ViewerCanReact bool `json:"viewerCanReact"`
 	// Check if the viewer is able to change their subscription status for the repository.
@@ -9609,27 +8105,24 @@ type PullRequest struct {
 	// Check if the current viewer can update this object.
 	ViewerCanUpdate bool `json:"viewerCanUpdate"`
 	// Reasons why the current viewer can not update this comment.
-	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons,omitempty"`
+	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons"`
 	// Did the viewer author this comment.
 	ViewerDidAuthor bool `json:"viewerDidAuthor"`
 	// The latest review given from the viewer.
-	ViewerLatestReview *PullRequestReview `json:"viewerLatestReview,omitempty"`
+	ViewerLatestReview *PullRequestReview `json:"viewerLatestReview"`
 	// The person who has requested the viewer for review on this pull request.
-	ViewerLatestReviewRequest *ReviewRequest `json:"viewerLatestReviewRequest,omitempty"`
+	ViewerLatestReviewRequest *ReviewRequest `json:"viewerLatestReviewRequest"`
 	// The merge body text for the viewer and method.
 	ViewerMergeBodyText string `json:"viewerMergeBodyText"`
 	// The merge headline text for the viewer and method.
 	ViewerMergeHeadlineText string `json:"viewerMergeHeadlineText"`
 	// Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
-	ViewerSubscription *SubscriptionState `json:"viewerSubscription,omitempty"`
+	ViewerSubscription *SubscriptionState `json:"viewerSubscription"`
 }
 
+func (PullRequest) IsReferencedSubject()        {}
 func (PullRequest) IsMilestoneItem()            {}
-func (PullRequest) IsProjectNextItemContent()   {}
 func (PullRequest) IsCloser()                   {}
-func (PullRequest) IsRenamedTitleSubject()      {}
-func (PullRequest) IsSearchResultItem()         {}
-func (PullRequest) IsProjectCardItem()          {}
 func (PullRequest) IsNode()                     {}
 func (PullRequest) IsAssignable()               {}
 func (PullRequest) IsClosable()                 {}
@@ -9642,9 +8135,10 @@ func (PullRequest) IsReactable()                {}
 func (PullRequest) IsRepositoryNode()           {}
 func (PullRequest) IsSubscribable()             {}
 func (PullRequest) IsUniformResourceLocatable() {}
-func (PullRequest) IsProjectNextOwner()         {}
+func (PullRequest) IsSearchResultItem()         {}
 func (PullRequest) IsIssueOrPullRequest()       {}
-func (PullRequest) IsReferencedSubject()        {}
+func (PullRequest) IsProjectCardItem()          {}
+func (PullRequest) IsRenamedTitleSubject()      {}
 
 // A file changed in a pull request.
 type PullRequestChangedFile struct {
@@ -9661,11 +8155,11 @@ type PullRequestChangedFile struct {
 // The connection type for PullRequestChangedFile.
 type PullRequestChangedFileConnection struct {
 	// A list of edges.
-	Edges []*PullRequestChangedFileEdge `json:"edges,omitempty"`
+	Edges []*PullRequestChangedFileEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*PullRequestChangedFile `json:"nodes,omitempty"`
+	Nodes []*PullRequestChangedFile `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -9675,16 +8169,16 @@ type PullRequestChangedFileEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *PullRequestChangedFile `json:"node,omitempty"`
+	Node *PullRequestChangedFile `json:"node"`
 }
 
 // Represents a Git commit part of a pull request.
 type PullRequestCommit struct {
 	// The Git commit object
-	Commit *Commit `json:"commit,omitempty"`
+	Commit *Commit `json:"commit"`
 	ID     string  `json:"id"`
 	// The pull request this commit belongs to
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 	// The HTTP path for this pull request commit
 	ResourcePath string `json:"resourcePath"`
 	// The HTTP URL for this pull request commit
@@ -9698,32 +8192,32 @@ func (PullRequestCommit) IsUniformResourceLocatable() {}
 // Represents a commit comment thread part of a pull request.
 type PullRequestCommitCommentThread struct {
 	// The comments that exist in this thread.
-	Comments *CommitCommentConnection `json:"comments,omitempty"`
+	Comments *CommitCommentConnection `json:"comments"`
 	// The commit the comments were made on.
-	Commit *Commit `json:"commit,omitempty"`
+	Commit *Commit `json:"commit"`
 	ID     string  `json:"id"`
 	// The file the comments were made on.
-	Path *string `json:"path,omitempty"`
+	Path *string `json:"path"`
 	// The position in the diff for the commit that the comment was made on.
-	Position *int `json:"position,omitempty"`
+	Position *int `json:"position"`
 	// The pull request this commit comment thread belongs to
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 	// The repository associated with this node.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 }
 
-func (PullRequestCommitCommentThread) IsPullRequestTimelineItems() {}
-func (PullRequestCommitCommentThread) IsRepositoryNode()           {}
 func (PullRequestCommitCommentThread) IsNode()                     {}
+func (PullRequestCommitCommentThread) IsRepositoryNode()           {}
+func (PullRequestCommitCommentThread) IsPullRequestTimelineItems() {}
 
 // The connection type for PullRequestCommit.
 type PullRequestCommitConnection struct {
 	// A list of edges.
-	Edges []*PullRequestCommitEdge `json:"edges,omitempty"`
+	Edges []*PullRequestCommitEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*PullRequestCommit `json:"nodes,omitempty"`
+	Nodes []*PullRequestCommit `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -9733,17 +8227,17 @@ type PullRequestCommitEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *PullRequestCommit `json:"node,omitempty"`
+	Node *PullRequestCommit `json:"node"`
 }
 
 // The connection type for PullRequest.
 type PullRequestConnection struct {
 	// A list of edges.
-	Edges []*PullRequestEdge `json:"edges,omitempty"`
+	Edges []*PullRequestEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*PullRequest `json:"nodes,omitempty"`
+	Nodes []*PullRequest `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -9751,9 +8245,9 @@ type PullRequestConnection struct {
 // This aggregates pull requests opened by a user within one repository.
 type PullRequestContributionsByRepository struct {
 	// The pull request contributions.
-	Contributions *CreatedPullRequestContributionConnection `json:"contributions,omitempty"`
+	Contributions *CreatedPullRequestContributionConnection `json:"contributions"`
 	// The repository in which the pull requests were opened.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 }
 
 // An edge in a connection.
@@ -9761,7 +8255,7 @@ type PullRequestEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *PullRequest `json:"node,omitempty"`
+	Node *PullRequest `json:"node"`
 }
 
 // Ways in which lists of issues can be ordered upon return.
@@ -9775,7 +8269,7 @@ type PullRequestOrder struct {
 // A review object for a given pull request.
 type PullRequestReview struct {
 	// The actor who authored the comment.
-	Author Actor `json:"author,omitempty"`
+	Author Actor `json:"author"`
 	// Author's association with the subject of the comment.
 	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation"`
 	// Indicates whether the author of this review has push access to the repository.
@@ -9787,46 +8281,46 @@ type PullRequestReview struct {
 	// The body of this review rendered as plain text.
 	BodyText string `json:"bodyText"`
 	// A list of review comments for the current pull request review.
-	Comments *PullRequestReviewCommentConnection `json:"comments,omitempty"`
+	Comments *PullRequestReviewCommentConnection `json:"comments"`
 	// Identifies the commit associated with this pull request review.
-	Commit *Commit `json:"commit,omitempty"`
+	Commit *Commit `json:"commit"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Check if this comment was created via an email reply.
 	CreatedViaEmail bool `json:"createdViaEmail"`
 	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
+	DatabaseID *int `json:"databaseId"`
 	// The actor who edited the comment.
-	Editor Actor  `json:"editor,omitempty"`
+	Editor Actor  `json:"editor"`
 	ID     string `json:"id"`
 	// Check if this comment was edited and includes an edit with the creation data
 	IncludesCreatedEdit bool `json:"includesCreatedEdit"`
 	// The moment the editor made the last edit
-	LastEditedAt *time.Time `json:"lastEditedAt,omitempty"`
+	LastEditedAt *time.Time `json:"lastEditedAt"`
 	// A list of teams that this review was made on behalf of.
-	OnBehalfOf *TeamConnection `json:"onBehalfOf,omitempty"`
+	OnBehalfOf *TeamConnection `json:"onBehalfOf"`
 	// Identifies when the comment was published at.
-	PublishedAt *time.Time `json:"publishedAt,omitempty"`
+	PublishedAt *time.Time `json:"publishedAt"`
 	// Identifies the pull request associated with this pull request review.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 	// A list of reactions grouped by content left on the subject.
-	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`
+	ReactionGroups []*ReactionGroup `json:"reactionGroups"`
 	// A list of Reactions left on the Issue.
-	Reactions *ReactionConnection `json:"reactions,omitempty"`
+	Reactions *ReactionConnection `json:"reactions"`
 	// The repository associated with this node.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The HTTP path permalink for this PullRequestReview.
 	ResourcePath string `json:"resourcePath"`
 	// Identifies the current state of the pull request review.
 	State PullRequestReviewState `json:"state"`
 	// Identifies when the Pull Request Review was submitted
-	SubmittedAt *time.Time `json:"submittedAt,omitempty"`
+	SubmittedAt *time.Time `json:"submittedAt"`
 	// Identifies the date and time when the object was last updated.
 	UpdatedAt time.Time `json:"updatedAt"`
 	// The HTTP URL permalink for this PullRequestReview.
 	URL string `json:"url"`
 	// A list of edits to this content.
-	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`
+	UserContentEdits *UserContentEditConnection `json:"userContentEdits"`
 	// Check if the current viewer can delete this object.
 	ViewerCanDelete bool `json:"viewerCanDelete"`
 	// Can user react to this subject
@@ -9834,13 +8328,12 @@ type PullRequestReview struct {
 	// Check if the current viewer can update this object.
 	ViewerCanUpdate bool `json:"viewerCanUpdate"`
 	// Reasons why the current viewer can not update this comment.
-	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons,omitempty"`
+	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons"`
 	// Did the viewer author this comment.
 	ViewerDidAuthor bool `json:"viewerDidAuthor"`
 }
 
 func (PullRequestReview) IsPullRequestTimelineItems() {}
-func (PullRequestReview) IsPullRequestTimelineItem()  {}
 func (PullRequestReview) IsNode()                     {}
 func (PullRequestReview) IsComment()                  {}
 func (PullRequestReview) IsDeletable()                {}
@@ -9848,11 +8341,12 @@ func (PullRequestReview) IsUpdatable()                {}
 func (PullRequestReview) IsUpdatableComment()         {}
 func (PullRequestReview) IsReactable()                {}
 func (PullRequestReview) IsRepositoryNode()           {}
+func (PullRequestReview) IsPullRequestTimelineItem()  {}
 
 // A review comment associated with a given repository pull request.
 type PullRequestReviewComment struct {
 	// The actor who authored the comment.
-	Author Actor `json:"author,omitempty"`
+	Author Actor `json:"author"`
 	// Author's association with the subject of the comment.
 	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation"`
 	// The comment body of this review comment.
@@ -9862,30 +8356,30 @@ type PullRequestReviewComment struct {
 	// The comment body of this review comment rendered as plain text.
 	BodyText string `json:"bodyText"`
 	// Identifies the commit associated with the comment.
-	Commit *Commit `json:"commit,omitempty"`
+	Commit *Commit `json:"commit"`
 	// Identifies when the comment was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Check if this comment was created via an email reply.
 	CreatedViaEmail bool `json:"createdViaEmail"`
 	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
+	DatabaseID *int `json:"databaseId"`
 	// The diff hunk to which the comment applies.
 	DiffHunk string `json:"diffHunk"`
 	// Identifies when the comment was created in a draft state.
 	DraftedAt time.Time `json:"draftedAt"`
 	// The actor who edited the comment.
-	Editor Actor  `json:"editor,omitempty"`
+	Editor Actor  `json:"editor"`
 	ID     string `json:"id"`
 	// Check if this comment was edited and includes an edit with the creation data
 	IncludesCreatedEdit bool `json:"includesCreatedEdit"`
 	// Returns whether or not a comment has been minimized.
 	IsMinimized bool `json:"isMinimized"`
 	// The moment the editor made the last edit
-	LastEditedAt *time.Time `json:"lastEditedAt,omitempty"`
+	LastEditedAt *time.Time `json:"lastEditedAt"`
 	// Returns why the comment was minimized.
-	MinimizedReason *string `json:"minimizedReason,omitempty"`
+	MinimizedReason *string `json:"minimizedReason"`
 	// Identifies the original commit associated with the comment.
-	OriginalCommit *Commit `json:"originalCommit,omitempty"`
+	OriginalCommit *Commit `json:"originalCommit"`
 	// The original line index in the diff to which the comment applies.
 	OriginalPosition int `json:"originalPosition"`
 	// Identifies when the comment body is outdated
@@ -9893,21 +8387,21 @@ type PullRequestReviewComment struct {
 	// The path to which the comment applies.
 	Path string `json:"path"`
 	// The line index in the diff to which the comment applies.
-	Position *int `json:"position,omitempty"`
+	Position *int `json:"position"`
 	// Identifies when the comment was published at.
-	PublishedAt *time.Time `json:"publishedAt,omitempty"`
+	PublishedAt *time.Time `json:"publishedAt"`
 	// The pull request associated with this review comment.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 	// The pull request review associated with this review comment.
-	PullRequestReview *PullRequestReview `json:"pullRequestReview,omitempty"`
+	PullRequestReview *PullRequestReview `json:"pullRequestReview"`
 	// A list of reactions grouped by content left on the subject.
-	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`
+	ReactionGroups []*ReactionGroup `json:"reactionGroups"`
 	// A list of Reactions left on the Issue.
-	Reactions *ReactionConnection `json:"reactions,omitempty"`
+	Reactions *ReactionConnection `json:"reactions"`
 	// The comment this is a reply to.
-	ReplyTo *PullRequestReviewComment `json:"replyTo,omitempty"`
+	ReplyTo *PullRequestReviewComment `json:"replyTo"`
 	// The repository associated with this node.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The HTTP path permalink for this review comment.
 	ResourcePath string `json:"resourcePath"`
 	// Identifies the state of the comment.
@@ -9917,7 +8411,7 @@ type PullRequestReviewComment struct {
 	// The HTTP URL permalink for this review comment.
 	URL string `json:"url"`
 	// A list of edits to this content.
-	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`
+	UserContentEdits *UserContentEditConnection `json:"userContentEdits"`
 	// Check if the current viewer can delete this object.
 	ViewerCanDelete bool `json:"viewerCanDelete"`
 	// Check if the current viewer can minimize this object.
@@ -9927,7 +8421,7 @@ type PullRequestReviewComment struct {
 	// Check if the current viewer can update this object.
 	ViewerCanUpdate bool `json:"viewerCanUpdate"`
 	// Reasons why the current viewer can not update this comment.
-	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons,omitempty"`
+	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons"`
 	// Did the viewer author this comment.
 	ViewerDidAuthor bool `json:"viewerDidAuthor"`
 }
@@ -9945,11 +8439,11 @@ func (PullRequestReviewComment) IsPullRequestTimelineItem() {}
 // The connection type for PullRequestReviewComment.
 type PullRequestReviewCommentConnection struct {
 	// A list of edges.
-	Edges []*PullRequestReviewCommentEdge `json:"edges,omitempty"`
+	Edges []*PullRequestReviewCommentEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*PullRequestReviewComment `json:"nodes,omitempty"`
+	Nodes []*PullRequestReviewComment `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -9959,17 +8453,17 @@ type PullRequestReviewCommentEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *PullRequestReviewComment `json:"node,omitempty"`
+	Node *PullRequestReviewComment `json:"node"`
 }
 
 // The connection type for PullRequestReview.
 type PullRequestReviewConnection struct {
 	// A list of edges.
-	Edges []*PullRequestReviewEdge `json:"edges,omitempty"`
+	Edges []*PullRequestReviewEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*PullRequestReview `json:"nodes,omitempty"`
+	Nodes []*PullRequestReview `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -9977,9 +8471,9 @@ type PullRequestReviewConnection struct {
 // This aggregates pull request reviews made by a user within one repository.
 type PullRequestReviewContributionsByRepository struct {
 	// The pull request review contributions.
-	Contributions *CreatedPullRequestReviewContributionConnection `json:"contributions,omitempty"`
+	Contributions *CreatedPullRequestReviewContributionConnection `json:"contributions"`
 	// The repository in which the pull request reviews were made.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 }
 
 // An edge in a connection.
@@ -9987,40 +8481,40 @@ type PullRequestReviewEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *PullRequestReview `json:"node,omitempty"`
+	Node *PullRequestReview `json:"node"`
 }
 
 // A threaded list of comments for a given pull request.
 type PullRequestReviewThread struct {
 	// A list of pull request comments associated with the thread.
-	Comments *PullRequestReviewCommentConnection `json:"comments,omitempty"`
+	Comments *PullRequestReviewCommentConnection `json:"comments"`
 	// The side of the diff on which this thread was placed.
 	DiffSide DiffSide `json:"diffSide"`
 	ID       string   `json:"id"`
-	// Whether or not the thread has been collapsed (resolved)
+	// Whether or not the thread has been collapsed (outdated or resolved)
 	IsCollapsed bool `json:"isCollapsed"`
 	// Indicates whether this thread was outdated by newer changes.
 	IsOutdated bool `json:"isOutdated"`
 	// Whether this thread has been resolved
 	IsResolved bool `json:"isResolved"`
 	// The line in the file to which this thread refers
-	Line *int `json:"line,omitempty"`
+	Line *int `json:"line"`
 	// The original line in the file to which this thread refers.
-	OriginalLine *int `json:"originalLine,omitempty"`
+	OriginalLine *int `json:"originalLine"`
 	// The original start line in the file to which this thread refers (multi-line only).
-	OriginalStartLine *int `json:"originalStartLine,omitempty"`
+	OriginalStartLine *int `json:"originalStartLine"`
 	// Identifies the file path of this thread.
 	Path string `json:"path"`
 	// Identifies the pull request associated with this thread.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 	// Identifies the repository associated with this thread.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The user who resolved this thread
-	ResolvedBy *User `json:"resolvedBy,omitempty"`
+	ResolvedBy *User `json:"resolvedBy"`
 	// The side of the diff that the first line of the thread starts on (multi-line only)
-	StartDiffSide *DiffSide `json:"startDiffSide,omitempty"`
+	StartDiffSide *DiffSide `json:"startDiffSide"`
 	// The start line in the file to which this thread refers (multi-line only)
-	StartLine *int `json:"startLine,omitempty"`
+	StartLine *int `json:"startLine"`
 	// Indicates whether the current viewer can reply to this thread.
 	ViewerCanReply bool `json:"viewerCanReply"`
 	// Whether or not the viewer can resolve this thread
@@ -10030,17 +8524,17 @@ type PullRequestReviewThread struct {
 }
 
 func (PullRequestReviewThread) IsPullRequestTimelineItems() {}
-func (PullRequestReviewThread) IsPullRequestTimelineItem()  {}
 func (PullRequestReviewThread) IsNode()                     {}
+func (PullRequestReviewThread) IsPullRequestTimelineItem()  {}
 
 // Review comment threads for a pull request review.
 type PullRequestReviewThreadConnection struct {
 	// A list of edges.
-	Edges []*PullRequestReviewThreadEdge `json:"edges,omitempty"`
+	Edges []*PullRequestReviewThreadEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*PullRequestReviewThread `json:"nodes,omitempty"`
+	Nodes []*PullRequestReviewThread `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -10050,7 +8544,7 @@ type PullRequestReviewThreadEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *PullRequestReviewThread `json:"node,omitempty"`
+	Node *PullRequestReviewThread `json:"node"`
 }
 
 // Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
@@ -10058,31 +8552,21 @@ type PullRequestRevisionMarker struct {
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// The last commit the viewer has seen.
-	LastSeenCommit *Commit `json:"lastSeenCommit,omitempty"`
+	LastSeenCommit *Commit `json:"lastSeenCommit"`
 	// The pull request to which the marker belongs.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 }
 
 func (PullRequestRevisionMarker) IsPullRequestTimelineItems() {}
 
-// A repository pull request template.
-type PullRequestTemplate struct {
-	// The body of the template
-	Body *string `json:"body,omitempty"`
-	// The filename of the template
-	Filename *string `json:"filename,omitempty"`
-	// The repository the template belongs to
-	Repository *Repository `json:"repository,omitempty"`
-}
-
 // The connection type for PullRequestTimelineItem.
 type PullRequestTimelineConnection struct {
 	// A list of edges.
-	Edges []*PullRequestTimelineItemEdge `json:"edges,omitempty"`
+	Edges []*PullRequestTimelineItemEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []PullRequestTimelineItem `json:"nodes,omitempty"`
+	Nodes []PullRequestTimelineItem `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -10092,21 +8576,21 @@ type PullRequestTimelineItemEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node PullRequestTimelineItem `json:"node,omitempty"`
+	Node PullRequestTimelineItem `json:"node"`
 }
 
 // The connection type for PullRequestTimelineItems.
 type PullRequestTimelineItemsConnection struct {
 	// A list of edges.
-	Edges []*PullRequestTimelineItemsEdge `json:"edges,omitempty"`
+	Edges []*PullRequestTimelineItemsEdge `json:"edges"`
 	// Identifies the count of items after applying `before` and `after` filters.
 	FilteredCount int `json:"filteredCount"`
 	// A list of nodes.
-	Nodes []PullRequestTimelineItems `json:"nodes,omitempty"`
+	Nodes []PullRequestTimelineItems `json:"nodes"`
 	// Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
 	PageCount int `json:"pageCount"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 	// Identifies the date and time when the timeline was last updated.
@@ -10118,22 +8602,22 @@ type PullRequestTimelineItemsEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node PullRequestTimelineItems `json:"node,omitempty"`
+	Node PullRequestTimelineItems `json:"node"`
 }
 
 // A Git push.
 type Push struct {
 	ID string `json:"id"`
 	// The SHA after the push
-	NextSha *string `json:"nextSha,omitempty"`
+	NextSha *string `json:"nextSha"`
 	// The permalink for this push.
 	Permalink string `json:"permalink"`
 	// The SHA before the push
-	PreviousSha *string `json:"previousSha,omitempty"`
-	// The actor who pushed
-	Pusher Actor `json:"pusher,omitempty"`
+	PreviousSha *string `json:"previousSha"`
+	// The user who pushed
+	Pusher *User `json:"pusher"`
 	// The repository that was pushed to
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 }
 
 func (Push) IsNode() {}
@@ -10141,9 +8625,9 @@ func (Push) IsNode() {}
 // A team, user or app who has the ability to push to a protected branch.
 type PushAllowance struct {
 	// The actor that can push.
-	Actor PushAllowanceActor `json:"actor,omitempty"`
+	Actor PushAllowanceActor `json:"actor"`
 	// Identifies the branch protection rule associated with the allowed user or team.
-	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule,omitempty"`
+	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule"`
 	ID                   string                `json:"id"`
 }
 
@@ -10152,11 +8636,11 @@ func (PushAllowance) IsNode() {}
 // The connection type for PushAllowance.
 type PushAllowanceConnection struct {
 	// A list of edges.
-	Edges []*PushAllowanceEdge `json:"edges,omitempty"`
+	Edges []*PushAllowanceEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*PushAllowance `json:"nodes,omitempty"`
+	Nodes []*PushAllowance `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -10166,7 +8650,7 @@ type PushAllowanceEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *PushAllowance `json:"node,omitempty"`
+	Node *PushAllowance `json:"node"`
 }
 
 // Represents the client's rate limit.
@@ -10188,11 +8672,11 @@ type RateLimit struct {
 // The connection type for User.
 type ReactingUserConnection struct {
 	// A list of edges.
-	Edges []*ReactingUserEdge `json:"edges,omitempty"`
+	Edges []*ReactingUserEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*User `json:"nodes,omitempty"`
+	Nodes []*User `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -10201,7 +8685,7 @@ type ReactingUserConnection struct {
 type ReactingUserEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
-	Node   *User  `json:"node,omitempty"`
+	Node   *User  `json:"node"`
 	// The moment when the user made the reaction.
 	ReactedAt time.Time `json:"reactedAt"`
 }
@@ -10213,12 +8697,12 @@ type Reaction struct {
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the primary key from the database.
-	DatabaseID *int   `json:"databaseId,omitempty"`
+	DatabaseID *int   `json:"databaseId"`
 	ID         string `json:"id"`
 	// The reactable piece of content
-	Reactable Reactable `json:"reactable,omitempty"`
+	Reactable Reactable `json:"reactable"`
 	// Identifies the user who created this reaction.
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 }
 
 func (Reaction) IsNode() {}
@@ -10226,11 +8710,11 @@ func (Reaction) IsNode() {}
 // A list of reactions that have been left on the subject.
 type ReactionConnection struct {
 	// A list of edges.
-	Edges []*ReactionEdge `json:"edges,omitempty"`
+	Edges []*ReactionEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*Reaction `json:"nodes,omitempty"`
+	Nodes []*Reaction `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 	// Whether or not the authenticated user has left a reaction on the subject.
@@ -10242,7 +8726,7 @@ type ReactionEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *Reaction `json:"node,omitempty"`
+	Node *Reaction `json:"node"`
 }
 
 // A group of emoji reactions to a particular piece of content.
@@ -10250,13 +8734,11 @@ type ReactionGroup struct {
 	// Identifies the emoji reaction.
 	Content ReactionContent `json:"content"`
 	// Identifies when the reaction was created.
-	CreatedAt *time.Time `json:"createdAt,omitempty"`
-	// Reactors to the reaction subject with the emotion represented by this reaction group.
-	Reactors *ReactorConnection `json:"reactors,omitempty"`
+	CreatedAt *time.Time `json:"createdAt"`
 	// The subject that was reacted to.
-	Subject Reactable `json:"subject,omitempty"`
+	Subject Reactable `json:"subject"`
 	// Users who have reacted to the reaction subject with the emotion represented by this reaction group
-	Users *ReactingUserConnection `json:"users,omitempty"`
+	Users *ReactingUserConnection `json:"users"`
 	// Whether or not the authenticated user has left a reaction on the subject.
 	ViewerHasReacted bool `json:"viewerHasReacted"`
 }
@@ -10269,64 +8751,42 @@ type ReactionOrder struct {
 	Direction OrderDirection `json:"direction"`
 }
 
-// The connection type for Reactor.
-type ReactorConnection struct {
-	// A list of edges.
-	Edges []*ReactorEdge `json:"edges,omitempty"`
-	// A list of nodes.
-	Nodes []Reactor `json:"nodes,omitempty"`
-	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
-	// Identifies the total count of items in the connection.
-	TotalCount int `json:"totalCount"`
-}
-
-// Represents an author of a reaction.
-type ReactorEdge struct {
-	// A cursor for use in pagination.
-	Cursor string `json:"cursor"`
-	// The author of the reaction.
-	Node Reactor `json:"node,omitempty"`
-	// The moment when the user made the reaction.
-	ReactedAt time.Time `json:"reactedAt"`
-}
-
 // Represents a 'ready_for_review' event on a given pull request.
 type ReadyForReviewEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
 	// PullRequest referenced by event.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 	// The HTTP path for this ready for review event.
 	ResourcePath string `json:"resourcePath"`
 	// The HTTP URL for this ready for review event.
 	URL string `json:"url"`
 }
 
-func (ReadyForReviewEvent) IsPullRequestTimelineItems() {}
 func (ReadyForReviewEvent) IsNode()                     {}
 func (ReadyForReviewEvent) IsUniformResourceLocatable() {}
+func (ReadyForReviewEvent) IsPullRequestTimelineItems() {}
 
 // Represents a Git reference.
 type Ref struct {
 	// A list of pull requests with this ref as the head ref.
-	AssociatedPullRequests *PullRequestConnection `json:"associatedPullRequests,omitempty"`
+	AssociatedPullRequests *PullRequestConnection `json:"associatedPullRequests"`
 	// Branch protection rules for this ref
-	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule,omitempty"`
+	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule"`
 	ID                   string                `json:"id"`
 	// The ref name.
 	Name string `json:"name"`
 	// The ref's prefix, such as `refs/heads/` or `refs/tags/`.
 	Prefix string `json:"prefix"`
 	// Branch protection rules that are viewable by non-admins
-	RefUpdateRule *RefUpdateRule `json:"refUpdateRule,omitempty"`
+	RefUpdateRule *RefUpdateRule `json:"refUpdateRule"`
 	// The repository the ref belongs to.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The object the ref points to. Returns null when object does not exist.
-	Target GitObject `json:"target,omitempty"`
+	Target GitObject `json:"target"`
 }
 
 func (Ref) IsNode() {}
@@ -10334,11 +8794,11 @@ func (Ref) IsNode() {}
 // The connection type for Ref.
 type RefConnection struct {
 	// A list of edges.
-	Edges []*RefEdge `json:"edges,omitempty"`
+	Edges []*RefEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*Ref `json:"nodes,omitempty"`
+	Nodes []*Ref `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -10348,7 +8808,7 @@ type RefEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *Ref `json:"node,omitempty"`
+	Node *Ref `json:"node"`
 }
 
 // Ways in which lists of git refs can be ordered upon return.
@@ -10368,13 +8828,11 @@ type RefUpdateRule struct {
 	// Identifies the protection rule pattern.
 	Pattern string `json:"pattern"`
 	// Number of approving reviews required to update matching branches.
-	RequiredApprovingReviewCount *int `json:"requiredApprovingReviewCount,omitempty"`
+	RequiredApprovingReviewCount *int `json:"requiredApprovingReviewCount"`
 	// List of required status check contexts that must pass for commits to be accepted to matching branches.
-	RequiredStatusCheckContexts []*string `json:"requiredStatusCheckContexts,omitempty"`
+	RequiredStatusCheckContexts []*string `json:"requiredStatusCheckContexts"`
 	// Are reviews from code owners required to update matching branches.
 	RequiresCodeOwnerReviews bool `json:"requiresCodeOwnerReviews"`
-	// Are conversations required to be resolved before merging.
-	RequiresConversationResolution bool `json:"requiresConversationResolution"`
 	// Are merge commits prohibited from being pushed to this branch.
 	RequiresLinearHistory bool `json:"requiresLinearHistory"`
 	// Are commits required to be signed.
@@ -10388,11 +8846,11 @@ type RefUpdateRule struct {
 // Represents a 'referenced' event on a given `ReferencedSubject`.
 type ReferencedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the commit associated with the 'referenced' event.
-	Commit *Commit `json:"commit,omitempty"`
+	Commit *Commit `json:"commit"`
 	// Identifies the repository associated with the 'referenced' event.
-	CommitRepository *Repository `json:"commitRepository,omitempty"`
+	CommitRepository *Repository `json:"commitRepository"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
@@ -10401,29 +8859,29 @@ type ReferencedEvent struct {
 	// Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference.
 	IsDirectReference bool `json:"isDirectReference"`
 	// Object referenced by event.
-	Subject ReferencedSubject `json:"subject,omitempty"`
+	Subject ReferencedSubject `json:"subject"`
 }
 
-func (ReferencedEvent) IsIssueTimelineItems()       {}
+func (ReferencedEvent) IsNode()                     {}
 func (ReferencedEvent) IsPullRequestTimelineItems() {}
-func (ReferencedEvent) IsPullRequestTimelineItem()  {}
+func (ReferencedEvent) IsIssueTimelineItems()       {}
 func (ReferencedEvent) IsIssueTimelineItem()        {}
-func (ReferencedEvent) IsNode()                     {}
+func (ReferencedEvent) IsPullRequestTimelineItem()  {}
 
 // Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes
 type RegenerateEnterpriseIdentityProviderRecoveryCodesInput struct {
 	// The ID of the enterprise on which to set an identity provider.
 	EnterpriseID string `json:"enterpriseId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes
 type RegenerateEnterpriseIdentityProviderRecoveryCodesPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The identity provider for the enterprise.
-	IdentityProvider *EnterpriseIdentityProvider `json:"identityProvider,omitempty"`
+	IdentityProvider *EnterpriseIdentityProvider `json:"identityProvider"`
 }
 
 // Autogenerated input type of RegenerateVerifiableDomainToken
@@ -10431,49 +8889,27 @@ type RegenerateVerifiableDomainTokenInput struct {
 	// The ID of the verifiable domain to regenerate the verification token of.
 	ID string `json:"id"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of RegenerateVerifiableDomainToken
 type RegenerateVerifiableDomainTokenPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The verification token that was generated.
-	VerificationToken *string `json:"verificationToken,omitempty"`
-}
-
-// Autogenerated input type of RejectDeployments
-type RejectDeploymentsInput struct {
-	// The node ID of the workflow run containing the pending deployments.
-	WorkflowRunID string `json:"workflowRunId"`
-	// The ids of environments to reject deployments
-	EnvironmentIds []string `json:"environmentIds,omitempty"`
-	// Optional comment for rejecting deployments
-	Comment *string `json:"comment,omitempty"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of RejectDeployments
-type RejectDeploymentsPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The affected deployments.
-	Deployments []*Deployment `json:"deployments,omitempty"`
+	VerificationToken *string `json:"verificationToken"`
 }
 
 // A release contains the content for a release.
 type Release struct {
 	// The author of the release
-	Author *User `json:"author,omitempty"`
+	Author *User `json:"author"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
-	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
 	// The description of the release.
-	Description *string `json:"description,omitempty"`
+	Description *string `json:"description"`
 	// The description of this release rendered to HTML.
-	DescriptionHTML *string `json:"descriptionHTML,omitempty"`
+	DescriptionHTML *string `json:"descriptionHTML"`
 	ID              string  `json:"id"`
 	// Whether or not the release is a draft
 	IsDraft bool `json:"isDraft"`
@@ -10481,41 +8917,32 @@ type Release struct {
 	IsLatest bool `json:"isLatest"`
 	// Whether or not the release is a prerelease
 	IsPrerelease bool `json:"isPrerelease"`
-	// A list of users mentioned in the release description
-	Mentions *UserConnection `json:"mentions,omitempty"`
 	// The title of the release.
-	Name *string `json:"name,omitempty"`
+	Name *string `json:"name"`
 	// Identifies the date and time when the release was created.
-	PublishedAt *time.Time `json:"publishedAt,omitempty"`
-	// A list of reactions grouped by content left on the subject.
-	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`
-	// A list of Reactions left on the Issue.
-	Reactions *ReactionConnection `json:"reactions,omitempty"`
+	PublishedAt *time.Time `json:"publishedAt"`
 	// List of releases assets which are dependent on this release.
-	ReleaseAssets *ReleaseAssetConnection `json:"releaseAssets,omitempty"`
+	ReleaseAssets *ReleaseAssetConnection `json:"releaseAssets"`
 	// The repository that the release belongs to.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The HTTP path for this issue
 	ResourcePath string `json:"resourcePath"`
 	// A description of the release, rendered to HTML without any links in it.
-	ShortDescriptionHTML *string `json:"shortDescriptionHTML,omitempty"`
+	ShortDescriptionHTML *string `json:"shortDescriptionHTML"`
 	// The Git tag the release points to
-	Tag *Ref `json:"tag,omitempty"`
+	Tag *Ref `json:"tag"`
 	// The tag commit for this release.
-	TagCommit *Commit `json:"tagCommit,omitempty"`
+	TagCommit *Commit `json:"tagCommit"`
 	// The name of the release's Git tag
 	TagName string `json:"tagName"`
 	// Identifies the date and time when the object was last updated.
 	UpdatedAt time.Time `json:"updatedAt"`
 	// The HTTP URL for this issue
 	URL string `json:"url"`
-	// Can user react to this subject
-	ViewerCanReact bool `json:"viewerCanReact"`
 }
 
 func (Release) IsNode()                     {}
 func (Release) IsUniformResourceLocatable() {}
-func (Release) IsReactable()                {}
 
 // A release asset contains the content for a release asset.
 type ReleaseAsset struct {
@@ -10531,13 +8958,13 @@ type ReleaseAsset struct {
 	// Identifies the title of the release asset.
 	Name string `json:"name"`
 	// Release that the asset is associated with
-	Release *Release `json:"release,omitempty"`
+	Release *Release `json:"release"`
 	// The size (in bytes) of the asset
 	Size int `json:"size"`
 	// Identifies the date and time when the object was last updated.
 	UpdatedAt time.Time `json:"updatedAt"`
 	// The user that performed the upload
-	UploadedBy *User `json:"uploadedBy,omitempty"`
+	UploadedBy *User `json:"uploadedBy"`
 	// Identifies the URL of the release asset.
 	URL string `json:"url"`
 }
@@ -10547,11 +8974,11 @@ func (ReleaseAsset) IsNode() {}
 // The connection type for ReleaseAsset.
 type ReleaseAssetConnection struct {
 	// A list of edges.
-	Edges []*ReleaseAssetEdge `json:"edges,omitempty"`
+	Edges []*ReleaseAssetEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*ReleaseAsset `json:"nodes,omitempty"`
+	Nodes []*ReleaseAsset `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -10561,17 +8988,17 @@ type ReleaseAssetEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *ReleaseAsset `json:"node,omitempty"`
+	Node *ReleaseAsset `json:"node"`
 }
 
 // The connection type for Release.
 type ReleaseConnection struct {
 	// A list of edges.
-	Edges []*ReleaseEdge `json:"edges,omitempty"`
+	Edges []*ReleaseEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*Release `json:"nodes,omitempty"`
+	Nodes []*Release `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -10581,7 +9008,7 @@ type ReleaseEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *Release `json:"node,omitempty"`
+	Node *Release `json:"node"`
 }
 
 // Ways in which lists of releases can be ordered upon return.
@@ -10597,17 +9024,17 @@ type RemoveAssigneesFromAssignableInput struct {
 	// The id of the assignable object to remove assignees from.
 	AssignableID string `json:"assignableId"`
 	// The id of users to remove as assignees.
-	AssigneeIds []string `json:"assigneeIds,omitempty"`
+	AssigneeIds []string `json:"assigneeIds"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of RemoveAssigneesFromAssignable
 type RemoveAssigneesFromAssignablePayload struct {
 	// The item that was unassigned.
-	Assignable Assignable `json:"assignable,omitempty"`
+	Assignable Assignable `json:"assignable"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated input type of RemoveEnterpriseAdmin
@@ -10617,21 +9044,21 @@ type RemoveEnterpriseAdminInput struct {
 	// The login of the user to remove as an administrator.
 	Login string `json:"login"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of RemoveEnterpriseAdmin
 type RemoveEnterpriseAdminPayload struct {
 	// The user who was removed as an administrator.
-	Admin *User `json:"admin,omitempty"`
+	Admin *User `json:"admin"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The updated enterprise.
-	Enterprise *Enterprise `json:"enterprise,omitempty"`
+	Enterprise *Enterprise `json:"enterprise"`
 	// A message confirming the result of removing an administrator.
-	Message *string `json:"message,omitempty"`
+	Message *string `json:"message"`
 	// The viewer performing the mutation.
-	Viewer *User `json:"viewer,omitempty"`
+	Viewer *User `json:"viewer"`
 }
 
 // Autogenerated input type of RemoveEnterpriseIdentityProvider
@@ -10639,15 +9066,15 @@ type RemoveEnterpriseIdentityProviderInput struct {
 	// The ID of the enterprise from which to remove the identity provider.
 	EnterpriseID string `json:"enterpriseId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of RemoveEnterpriseIdentityProvider
 type RemoveEnterpriseIdentityProviderPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The identity provider that was removed from the enterprise.
-	IdentityProvider *EnterpriseIdentityProvider `json:"identityProvider,omitempty"`
+	IdentityProvider *EnterpriseIdentityProvider `json:"identityProvider"`
 }
 
 // Autogenerated input type of RemoveEnterpriseOrganization
@@ -10657,19 +9084,19 @@ type RemoveEnterpriseOrganizationInput struct {
 	// The ID of the organization to remove from the enterprise.
 	OrganizationID string `json:"organizationId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of RemoveEnterpriseOrganization
 type RemoveEnterpriseOrganizationPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The updated enterprise.
-	Enterprise *Enterprise `json:"enterprise,omitempty"`
+	Enterprise *Enterprise `json:"enterprise"`
 	// The organization that was removed from the enterprise.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The viewer performing the mutation.
-	Viewer *User `json:"viewer,omitempty"`
+	Viewer *User `json:"viewer"`
 }
 
 // Autogenerated input type of RemoveEnterpriseSupportEntitlement
@@ -10679,15 +9106,15 @@ type RemoveEnterpriseSupportEntitlementInput struct {
 	// The login of a member who will lose the support entitlement.
 	Login string `json:"login"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of RemoveEnterpriseSupportEntitlement
 type RemoveEnterpriseSupportEntitlementPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// A message confirming the result of removing the support entitlement.
-	Message *string `json:"message,omitempty"`
+	Message *string `json:"message"`
 }
 
 // Autogenerated input type of RemoveLabelsFromLabelable
@@ -10695,17 +9122,17 @@ type RemoveLabelsFromLabelableInput struct {
 	// The id of the Labelable to remove labels from.
 	LabelableID string `json:"labelableId"`
 	// The ids of labels to remove.
-	LabelIds []string `json:"labelIds,omitempty"`
+	LabelIds []string `json:"labelIds"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of RemoveLabelsFromLabelable
 type RemoveLabelsFromLabelablePayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The Labelable the labels were removed from.
-	Labelable Labelable `json:"labelable,omitempty"`
+	Labelable Labelable `json:"labelable"`
 }
 
 // Autogenerated input type of RemoveOutsideCollaborator
@@ -10715,15 +9142,15 @@ type RemoveOutsideCollaboratorInput struct {
 	// The ID of the organization to remove the outside collaborator from.
 	OrganizationID string `json:"organizationId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of RemoveOutsideCollaborator
 type RemoveOutsideCollaboratorPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The user that was removed as an outside collaborator.
-	RemovedUser *User `json:"removedUser,omitempty"`
+	RemovedUser *User `json:"removedUser"`
 }
 
 // Autogenerated input type of RemoveReaction
@@ -10733,17 +9160,17 @@ type RemoveReactionInput struct {
 	// The name of the emoji reaction to remove.
 	Content ReactionContent `json:"content"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of RemoveReaction
 type RemoveReactionPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The reaction object.
-	Reaction *Reaction `json:"reaction,omitempty"`
+	Reaction *Reaction `json:"reaction"`
 	// The reactable subject.
-	Subject Reactable `json:"subject,omitempty"`
+	Subject Reactable `json:"subject"`
 }
 
 // Autogenerated input type of RemoveStar
@@ -10751,52 +9178,36 @@ type RemoveStarInput struct {
 	// The Starrable ID to unstar.
 	StarrableID string `json:"starrableId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of RemoveStar
 type RemoveStarPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The starrable.
-	Starrable Starrable `json:"starrable,omitempty"`
-}
-
-// Autogenerated input type of RemoveUpvote
-type RemoveUpvoteInput struct {
-	// The Node ID of the discussion or comment to remove upvote.
-	SubjectID string `json:"subjectId"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of RemoveUpvote
-type RemoveUpvotePayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The votable subject.
-	Subject Votable `json:"subject,omitempty"`
+	Starrable Starrable `json:"starrable"`
 }
 
 // Represents a 'removed_from_project' event on a given issue or pull request.
 type RemovedFromProjectEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the primary key from the database.
-	DatabaseID *int   `json:"databaseId,omitempty"`
+	DatabaseID *int   `json:"databaseId"`
 	ID         string `json:"id"`
 }
 
-func (RemovedFromProjectEvent) IsIssueTimelineItems()       {}
 func (RemovedFromProjectEvent) IsNode()                     {}
 func (RemovedFromProjectEvent) IsPullRequestTimelineItems() {}
+func (RemovedFromProjectEvent) IsIssueTimelineItems()       {}
 
 // Represents a 'renamed' event on a given issue or pull request
 type RenamedTitleEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the current title of the issue or pull request.
@@ -10805,29 +9216,29 @@ type RenamedTitleEvent struct {
 	// Identifies the previous title of the issue or pull request.
 	PreviousTitle string `json:"previousTitle"`
 	// Subject that was renamed.
-	Subject RenamedTitleSubject `json:"subject,omitempty"`
+	Subject RenamedTitleSubject `json:"subject"`
 }
 
-func (RenamedTitleEvent) IsIssueTimelineItems()       {}
+func (RenamedTitleEvent) IsNode()                     {}
 func (RenamedTitleEvent) IsPullRequestTimelineItems() {}
-func (RenamedTitleEvent) IsPullRequestTimelineItem()  {}
+func (RenamedTitleEvent) IsIssueTimelineItems()       {}
 func (RenamedTitleEvent) IsIssueTimelineItem()        {}
-func (RenamedTitleEvent) IsNode()                     {}
+func (RenamedTitleEvent) IsPullRequestTimelineItem()  {}
 
 // Autogenerated input type of ReopenIssue
 type ReopenIssueInput struct {
 	// ID of the issue to be opened.
 	IssueID string `json:"issueId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of ReopenIssue
 type ReopenIssuePayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The issue that was opened.
-	Issue *Issue `json:"issue,omitempty"`
+	Issue *Issue `json:"issue"`
 }
 
 // Autogenerated input type of ReopenPullRequest
@@ -10835,81 +9246,81 @@ type ReopenPullRequestInput struct {
 	// ID of the pull request to be reopened.
 	PullRequestID string `json:"pullRequestId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of ReopenPullRequest
 type ReopenPullRequestPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The pull request that was reopened.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 }
 
 // Represents a 'reopened' event on any `Closable`.
 type ReopenedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Object that was reopened.
-	Closable Closable `json:"closable,omitempty"`
+	Closable Closable `json:"closable"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
 }
 
-func (ReopenedEvent) IsIssueTimelineItems()       {}
 func (ReopenedEvent) IsPullRequestTimelineItems() {}
-func (ReopenedEvent) IsPullRequestTimelineItem()  {}
+func (ReopenedEvent) IsIssueTimelineItems()       {}
 func (ReopenedEvent) IsIssueTimelineItem()        {}
 func (ReopenedEvent) IsNode()                     {}
+func (ReopenedEvent) IsPullRequestTimelineItem()  {}
 
 // Audit log entry for a repo.access event.
 type RepoAccessAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The repository associated with the action
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The name of the repository
-	RepositoryName *string `json:"repositoryName,omitempty"`
+	RepositoryName *string `json:"repositoryName"`
 	// The HTTP path for the repository
-	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
+	RepositoryResourcePath *string `json:"repositoryResourcePath"`
 	// The HTTP URL for the repository
-	RepositoryURL *string `json:"repositoryUrl,omitempty"`
+	RepositoryURL *string `json:"repositoryUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 	// The visibility of the repository
-	Visibility *RepoAccessAuditEntryVisibility `json:"visibility,omitempty"`
+	Visibility *RepoAccessAuditEntryVisibility `json:"visibility"`
 }
 
 func (RepoAccessAuditEntry) IsNode()                       {}
@@ -10923,48 +9334,48 @@ type RepoAddMemberAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The repository associated with the action
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The name of the repository
-	RepositoryName *string `json:"repositoryName,omitempty"`
+	RepositoryName *string `json:"repositoryName"`
 	// The HTTP path for the repository
-	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
+	RepositoryResourcePath *string `json:"repositoryResourcePath"`
 	// The HTTP URL for the repository
-	RepositoryURL *string `json:"repositoryUrl,omitempty"`
+	RepositoryURL *string `json:"repositoryUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 	// The visibility of the repository
-	Visibility *RepoAddMemberAuditEntryVisibility `json:"visibility,omitempty"`
+	Visibility *RepoAddMemberAuditEntryVisibility `json:"visibility"`
 }
 
 func (RepoAddMemberAuditEntry) IsNode()                       {}
@@ -10978,50 +9389,50 @@ type RepoAddTopicAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The repository associated with the action
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The name of the repository
-	RepositoryName *string `json:"repositoryName,omitempty"`
+	RepositoryName *string `json:"repositoryName"`
 	// The HTTP path for the repository
-	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
+	RepositoryResourcePath *string `json:"repositoryResourcePath"`
 	// The HTTP URL for the repository
-	RepositoryURL *string `json:"repositoryUrl,omitempty"`
+	RepositoryURL *string `json:"repositoryUrl"`
 	// The name of the topic added to the repository
-	Topic *Topic `json:"topic,omitempty"`
+	Topic *Topic `json:"topic"`
 	// The name of the topic added to the repository
-	TopicName *string `json:"topicName,omitempty"`
+	TopicName *string `json:"topicName"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (RepoAddTopicAuditEntry) IsNode()                       {}
@@ -11036,48 +9447,48 @@ type RepoArchivedAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The repository associated with the action
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The name of the repository
-	RepositoryName *string `json:"repositoryName,omitempty"`
+	RepositoryName *string `json:"repositoryName"`
 	// The HTTP path for the repository
-	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
+	RepositoryResourcePath *string `json:"repositoryResourcePath"`
 	// The HTTP URL for the repository
-	RepositoryURL *string `json:"repositoryUrl,omitempty"`
+	RepositoryURL *string `json:"repositoryUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 	// The visibility of the repository
-	Visibility *RepoArchivedAuditEntryVisibility `json:"visibility,omitempty"`
+	Visibility *RepoArchivedAuditEntryVisibility `json:"visibility"`
 }
 
 func (RepoArchivedAuditEntry) IsNode()                       {}
@@ -11091,156 +9502,156 @@ type RepoChangeMergeSettingAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// Whether the change was to enable (true) or disable (false) the merge type
-	IsEnabled *bool `json:"isEnabled,omitempty"`
+	IsEnabled *bool `json:"isEnabled"`
 	// The merge method affected by the change
-	MergeType *RepoChangeMergeSettingAuditEntryMergeType `json:"mergeType,omitempty"`
+	MergeType *RepoChangeMergeSettingAuditEntryMergeType `json:"mergeType"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The repository associated with the action
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The name of the repository
-	RepositoryName *string `json:"repositoryName,omitempty"`
+	RepositoryName *string `json:"repositoryName"`
 	// The HTTP path for the repository
-	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
+	RepositoryResourcePath *string `json:"repositoryResourcePath"`
 	// The HTTP URL for the repository
-	RepositoryURL *string `json:"repositoryUrl,omitempty"`
+	RepositoryURL *string `json:"repositoryUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
-func (RepoChangeMergeSettingAuditEntry) IsOrganizationAuditEntry()     {}
 func (RepoChangeMergeSettingAuditEntry) IsNode()                       {}
 func (RepoChangeMergeSettingAuditEntry) IsAuditEntry()                 {}
 func (RepoChangeMergeSettingAuditEntry) IsRepositoryAuditEntryData()   {}
 func (RepoChangeMergeSettingAuditEntry) IsOrganizationAuditEntryData() {}
+func (RepoChangeMergeSettingAuditEntry) IsOrganizationAuditEntry()     {}
 
 // Audit log entry for a repo.config.disable_anonymous_git_access event.
 type RepoConfigDisableAnonymousGitAccessAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The repository associated with the action
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The name of the repository
-	RepositoryName *string `json:"repositoryName,omitempty"`
+	RepositoryName *string `json:"repositoryName"`
 	// The HTTP path for the repository
-	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
+	RepositoryResourcePath *string `json:"repositoryResourcePath"`
 	// The HTTP URL for the repository
-	RepositoryURL *string `json:"repositoryUrl,omitempty"`
+	RepositoryURL *string `json:"repositoryUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
-func (RepoConfigDisableAnonymousGitAccessAuditEntry) IsOrganizationAuditEntry()     {}
 func (RepoConfigDisableAnonymousGitAccessAuditEntry) IsNode()                       {}
 func (RepoConfigDisableAnonymousGitAccessAuditEntry) IsAuditEntry()                 {}
 func (RepoConfigDisableAnonymousGitAccessAuditEntry) IsOrganizationAuditEntryData() {}
 func (RepoConfigDisableAnonymousGitAccessAuditEntry) IsRepositoryAuditEntryData()   {}
+func (RepoConfigDisableAnonymousGitAccessAuditEntry) IsOrganizationAuditEntry()     {}
 
 // Audit log entry for a repo.config.disable_collaborators_only event.
 type RepoConfigDisableCollaboratorsOnlyAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The repository associated with the action
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The name of the repository
-	RepositoryName *string `json:"repositoryName,omitempty"`
+	RepositoryName *string `json:"repositoryName"`
 	// The HTTP path for the repository
-	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
+	RepositoryResourcePath *string `json:"repositoryResourcePath"`
 	// The HTTP URL for the repository
-	RepositoryURL *string `json:"repositoryUrl,omitempty"`
+	RepositoryURL *string `json:"repositoryUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (RepoConfigDisableCollaboratorsOnlyAuditEntry) IsNode()                       {}
@@ -11254,46 +9665,46 @@ type RepoConfigDisableContributorsOnlyAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The repository associated with the action
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The name of the repository
-	RepositoryName *string `json:"repositoryName,omitempty"`
+	RepositoryName *string `json:"repositoryName"`
 	// The HTTP path for the repository
-	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
+	RepositoryResourcePath *string `json:"repositoryResourcePath"`
 	// The HTTP URL for the repository
-	RepositoryURL *string `json:"repositoryUrl,omitempty"`
+	RepositoryURL *string `json:"repositoryUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (RepoConfigDisableContributorsOnlyAuditEntry) IsNode()                       {}
@@ -11307,46 +9718,46 @@ type RepoConfigDisableSockpuppetDisallowedAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The repository associated with the action
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The name of the repository
-	RepositoryName *string `json:"repositoryName,omitempty"`
+	RepositoryName *string `json:"repositoryName"`
 	// The HTTP path for the repository
-	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
+	RepositoryResourcePath *string `json:"repositoryResourcePath"`
 	// The HTTP URL for the repository
-	RepositoryURL *string `json:"repositoryUrl,omitempty"`
+	RepositoryURL *string `json:"repositoryUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (RepoConfigDisableSockpuppetDisallowedAuditEntry) IsNode()                       {}
@@ -11360,46 +9771,46 @@ type RepoConfigEnableAnonymousGitAccessAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The repository associated with the action
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The name of the repository
-	RepositoryName *string `json:"repositoryName,omitempty"`
+	RepositoryName *string `json:"repositoryName"`
 	// The HTTP path for the repository
-	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
+	RepositoryResourcePath *string `json:"repositoryResourcePath"`
 	// The HTTP URL for the repository
-	RepositoryURL *string `json:"repositoryUrl,omitempty"`
+	RepositoryURL *string `json:"repositoryUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (RepoConfigEnableAnonymousGitAccessAuditEntry) IsNode()                       {}
@@ -11413,46 +9824,46 @@ type RepoConfigEnableCollaboratorsOnlyAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The repository associated with the action
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The name of the repository
-	RepositoryName *string `json:"repositoryName,omitempty"`
+	RepositoryName *string `json:"repositoryName"`
 	// The HTTP path for the repository
-	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
+	RepositoryResourcePath *string `json:"repositoryResourcePath"`
 	// The HTTP URL for the repository
-	RepositoryURL *string `json:"repositoryUrl,omitempty"`
+	RepositoryURL *string `json:"repositoryUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (RepoConfigEnableCollaboratorsOnlyAuditEntry) IsNode()                       {}
@@ -11466,46 +9877,46 @@ type RepoConfigEnableContributorsOnlyAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The repository associated with the action
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The name of the repository
-	RepositoryName *string `json:"repositoryName,omitempty"`
+	RepositoryName *string `json:"repositoryName"`
 	// The HTTP path for the repository
-	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
+	RepositoryResourcePath *string `json:"repositoryResourcePath"`
 	// The HTTP URL for the repository
-	RepositoryURL *string `json:"repositoryUrl,omitempty"`
+	RepositoryURL *string `json:"repositoryUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (RepoConfigEnableContributorsOnlyAuditEntry) IsNode()                       {}
@@ -11519,46 +9930,46 @@ type RepoConfigEnableSockpuppetDisallowedAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The repository associated with the action
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The name of the repository
-	RepositoryName *string `json:"repositoryName,omitempty"`
+	RepositoryName *string `json:"repositoryName"`
 	// The HTTP path for the repository
-	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
+	RepositoryResourcePath *string `json:"repositoryResourcePath"`
 	// The HTTP URL for the repository
-	RepositoryURL *string `json:"repositoryUrl,omitempty"`
+	RepositoryURL *string `json:"repositoryUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (RepoConfigEnableSockpuppetDisallowedAuditEntry) IsNode()                       {}
@@ -11572,213 +9983,213 @@ type RepoConfigLockAnonymousGitAccessAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The repository associated with the action
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The name of the repository
-	RepositoryName *string `json:"repositoryName,omitempty"`
+	RepositoryName *string `json:"repositoryName"`
 	// The HTTP path for the repository
-	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
+	RepositoryResourcePath *string `json:"repositoryResourcePath"`
 	// The HTTP URL for the repository
-	RepositoryURL *string `json:"repositoryUrl,omitempty"`
+	RepositoryURL *string `json:"repositoryUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
-func (RepoConfigLockAnonymousGitAccessAuditEntry) IsOrganizationAuditEntry()     {}
 func (RepoConfigLockAnonymousGitAccessAuditEntry) IsNode()                       {}
 func (RepoConfigLockAnonymousGitAccessAuditEntry) IsAuditEntry()                 {}
 func (RepoConfigLockAnonymousGitAccessAuditEntry) IsOrganizationAuditEntryData() {}
 func (RepoConfigLockAnonymousGitAccessAuditEntry) IsRepositoryAuditEntryData()   {}
+func (RepoConfigLockAnonymousGitAccessAuditEntry) IsOrganizationAuditEntry()     {}
 
 // Audit log entry for a repo.config.unlock_anonymous_git_access event.
 type RepoConfigUnlockAnonymousGitAccessAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The repository associated with the action
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The name of the repository
-	RepositoryName *string `json:"repositoryName,omitempty"`
+	RepositoryName *string `json:"repositoryName"`
 	// The HTTP path for the repository
-	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
+	RepositoryResourcePath *string `json:"repositoryResourcePath"`
 	// The HTTP URL for the repository
-	RepositoryURL *string `json:"repositoryUrl,omitempty"`
+	RepositoryURL *string `json:"repositoryUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
+func (RepoConfigUnlockAnonymousGitAccessAuditEntry) IsOrganizationAuditEntry()     {}
 func (RepoConfigUnlockAnonymousGitAccessAuditEntry) IsNode()                       {}
 func (RepoConfigUnlockAnonymousGitAccessAuditEntry) IsAuditEntry()                 {}
 func (RepoConfigUnlockAnonymousGitAccessAuditEntry) IsOrganizationAuditEntryData() {}
 func (RepoConfigUnlockAnonymousGitAccessAuditEntry) IsRepositoryAuditEntryData()   {}
-func (RepoConfigUnlockAnonymousGitAccessAuditEntry) IsOrganizationAuditEntry()     {}
 
 // Audit log entry for a repo.create event.
 type RepoCreateAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	// The name of the parent repository for this forked repository.
-	ForkParentName *string `json:"forkParentName,omitempty"`
+	ForkParentName *string `json:"forkParentName"`
 	// The name of the root repository for this network.
-	ForkSourceName *string `json:"forkSourceName,omitempty"`
+	ForkSourceName *string `json:"forkSourceName"`
 	ID             string  `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The repository associated with the action
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The name of the repository
-	RepositoryName *string `json:"repositoryName,omitempty"`
+	RepositoryName *string `json:"repositoryName"`
 	// The HTTP path for the repository
-	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
+	RepositoryResourcePath *string `json:"repositoryResourcePath"`
 	// The HTTP URL for the repository
-	RepositoryURL *string `json:"repositoryUrl,omitempty"`
+	RepositoryURL *string `json:"repositoryUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 	// The visibility of the repository
-	Visibility *RepoCreateAuditEntryVisibility `json:"visibility,omitempty"`
+	Visibility *RepoCreateAuditEntryVisibility `json:"visibility"`
 }
 
-func (RepoCreateAuditEntry) IsOrganizationAuditEntry()     {}
 func (RepoCreateAuditEntry) IsNode()                       {}
 func (RepoCreateAuditEntry) IsAuditEntry()                 {}
 func (RepoCreateAuditEntry) IsRepositoryAuditEntryData()   {}
 func (RepoCreateAuditEntry) IsOrganizationAuditEntryData() {}
+func (RepoCreateAuditEntry) IsOrganizationAuditEntry()     {}
 
 // Audit log entry for a repo.destroy event.
 type RepoDestroyAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The repository associated with the action
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The name of the repository
-	RepositoryName *string `json:"repositoryName,omitempty"`
+	RepositoryName *string `json:"repositoryName"`
 	// The HTTP path for the repository
-	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
+	RepositoryResourcePath *string `json:"repositoryResourcePath"`
 	// The HTTP URL for the repository
-	RepositoryURL *string `json:"repositoryUrl,omitempty"`
+	RepositoryURL *string `json:"repositoryUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 	// The visibility of the repository
-	Visibility *RepoDestroyAuditEntryVisibility `json:"visibility,omitempty"`
+	Visibility *RepoDestroyAuditEntryVisibility `json:"visibility"`
 }
 
 func (RepoDestroyAuditEntry) IsNode()                       {}
@@ -11792,48 +10203,48 @@ type RepoRemoveMemberAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The repository associated with the action
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The name of the repository
-	RepositoryName *string `json:"repositoryName,omitempty"`
+	RepositoryName *string `json:"repositoryName"`
 	// The HTTP path for the repository
-	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
+	RepositoryResourcePath *string `json:"repositoryResourcePath"`
 	// The HTTP URL for the repository
-	RepositoryURL *string `json:"repositoryUrl,omitempty"`
+	RepositoryURL *string `json:"repositoryUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 	// The visibility of the repository
-	Visibility *RepoRemoveMemberAuditEntryVisibility `json:"visibility,omitempty"`
+	Visibility *RepoRemoveMemberAuditEntryVisibility `json:"visibility"`
 }
 
 func (RepoRemoveMemberAuditEntry) IsNode()                       {}
@@ -11847,50 +10258,50 @@ type RepoRemoveTopicAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The repository associated with the action
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The name of the repository
-	RepositoryName *string `json:"repositoryName,omitempty"`
+	RepositoryName *string `json:"repositoryName"`
 	// The HTTP path for the repository
-	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
+	RepositoryResourcePath *string `json:"repositoryResourcePath"`
 	// The HTTP URL for the repository
-	RepositoryURL *string `json:"repositoryUrl,omitempty"`
+	RepositoryURL *string `json:"repositoryUrl"`
 	// The name of the topic added to the repository
-	Topic *Topic `json:"topic,omitempty"`
+	Topic *Topic `json:"topic"`
 	// The name of the topic added to the repository
-	TopicName *string `json:"topicName,omitempty"`
+	TopicName *string `json:"topicName"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (RepoRemoveTopicAuditEntry) IsNode()                       {}
@@ -11903,57 +10314,41 @@ func (RepoRemoveTopicAuditEntry) IsOrganizationAuditEntry()     {}
 // A repository contains the content for a project.
 type Repository struct {
 	// A list of users that can be assigned to issues in this repository.
-	AssignableUsers *UserConnection `json:"assignableUsers,omitempty"`
-	// Whether or not Auto-merge can be enabled on pull requests in this repository.
-	AutoMergeAllowed bool `json:"autoMergeAllowed"`
+	AssignableUsers *UserConnection `json:"assignableUsers"`
 	// A list of branch protection rules for this repository.
-	BranchProtectionRules *BranchProtectionRuleConnection `json:"branchProtectionRules,omitempty"`
+	BranchProtectionRules *BranchProtectionRuleConnection `json:"branchProtectionRules"`
 	// Returns the code of conduct for this repository
-	CodeOfConduct *CodeOfConduct `json:"codeOfConduct,omitempty"`
-	// Information extracted from the repository's `CODEOWNERS` file.
-	Codeowners *RepositoryCodeowners `json:"codeowners,omitempty"`
+	CodeOfConduct *CodeOfConduct `json:"codeOfConduct"`
 	// A list of collaborators associated with the repository.
-	Collaborators *RepositoryCollaboratorConnection `json:"collaborators,omitempty"`
+	Collaborators *RepositoryCollaboratorConnection `json:"collaborators"`
 	// A list of commit comments associated with the repository.
-	CommitComments *CommitCommentConnection `json:"commitComments,omitempty"`
+	CommitComments *CommitCommentConnection `json:"commitComments"`
 	// Returns a list of contact links associated to the repository
-	ContactLinks []*RepositoryContactLink `json:"contactLinks,omitempty"`
+	ContactLinks []*RepositoryContactLink `json:"contactLinks"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
+	DatabaseID *int `json:"databaseId"`
 	// The Ref associated with the repository's default branch.
-	DefaultBranchRef *Ref `json:"defaultBranchRef,omitempty"`
+	DefaultBranchRef *Ref `json:"defaultBranchRef"`
 	// Whether or not branches are automatically deleted when merged in this repository.
 	DeleteBranchOnMerge bool `json:"deleteBranchOnMerge"`
 	// A list of deploy keys that are on this repository.
-	DeployKeys *DeployKeyConnection `json:"deployKeys,omitempty"`
+	DeployKeys *DeployKeyConnection `json:"deployKeys"`
 	// Deployments associated with the repository
-	Deployments *DeploymentConnection `json:"deployments,omitempty"`
+	Deployments *DeploymentConnection `json:"deployments"`
 	// The description of the repository.
-	Description *string `json:"description,omitempty"`
+	Description *string `json:"description"`
 	// The description of the repository rendered to HTML.
 	DescriptionHTML string `json:"descriptionHTML"`
-	// Returns a single discussion from the current repository by number.
-	Discussion *Discussion `json:"discussion,omitempty"`
-	// A list of discussion categories that are available in the repository.
-	DiscussionCategories *DiscussionCategoryConnection `json:"discussionCategories,omitempty"`
-	// A list of discussions that have been opened in the repository.
-	Discussions *DiscussionConnection `json:"discussions,omitempty"`
 	// The number of kilobytes this repository occupies on disk.
-	DiskUsage *int `json:"diskUsage,omitempty"`
-	// Returns a single active environment from the current repository by name.
-	Environment *Environment `json:"environment,omitempty"`
-	// A list of environments that are in this repository.
-	Environments *EnvironmentConnection `json:"environments,omitempty"`
+	DiskUsage *int `json:"diskUsage"`
 	// Returns how many forks there are of this repository in the whole network.
 	ForkCount int `json:"forkCount"`
-	// Whether this repository allows forks.
-	ForkingAllowed bool `json:"forkingAllowed"`
 	// A list of direct forked repositories.
-	Forks *RepositoryConnection `json:"forks,omitempty"`
+	Forks *RepositoryConnection `json:"forks"`
 	// The funding links for this repository
-	FundingLinks []*FundingLink `json:"fundingLinks,omitempty"`
+	FundingLinks []*FundingLink `json:"fundingLinks"`
 	// Indicates if the repository has issues feature enabled.
 	HasIssuesEnabled bool `json:"hasIssuesEnabled"`
 	// Indicates if the repository has the Projects feature enabled.
@@ -11961,10 +10356,10 @@ type Repository struct {
 	// Indicates if the repository has wiki feature enabled.
 	HasWikiEnabled bool `json:"hasWikiEnabled"`
 	// The repository's URL.
-	HomepageURL *string `json:"homepageUrl,omitempty"`
+	HomepageURL *string `json:"homepageUrl"`
 	ID          string  `json:"id"`
 	// The interaction ability settings for this repository.
-	InteractionAbility *RepositoryInteractionAbility `json:"interactionAbility,omitempty"`
+	InteractionAbility *RepositoryInteractionAbility `json:"interactionAbility"`
 	// Indicates if the repository is unmaintained.
 	IsArchived bool `json:"isArchived"`
 	// Returns true if blank issue creation is allowed
@@ -11984,97 +10379,89 @@ type Repository struct {
 	// Identifies if the repository is private or internal.
 	IsPrivate bool `json:"isPrivate"`
 	// Returns true if this repository has a security policy
-	IsSecurityPolicyEnabled *bool `json:"isSecurityPolicyEnabled,omitempty"`
+	IsSecurityPolicyEnabled *bool `json:"isSecurityPolicyEnabled"`
 	// Identifies if the repository is a template that can be used to generate new repositories.
 	IsTemplate bool `json:"isTemplate"`
 	// Is this repository a user configuration repository?
 	IsUserConfigurationRepository bool `json:"isUserConfigurationRepository"`
 	// Returns a single issue from the current repository by number.
-	Issue *Issue `json:"issue,omitempty"`
+	Issue *Issue `json:"issue"`
 	// Returns a single issue-like object from the current repository by number.
-	IssueOrPullRequest IssueOrPullRequest `json:"issueOrPullRequest,omitempty"`
+	IssueOrPullRequest IssueOrPullRequest `json:"issueOrPullRequest"`
 	// Returns a list of issue templates associated to the repository
-	IssueTemplates []*IssueTemplate `json:"issueTemplates,omitempty"`
+	IssueTemplates []*IssueTemplate `json:"issueTemplates"`
 	// A list of issues that have been opened in the repository.
-	Issues *IssueConnection `json:"issues,omitempty"`
+	Issues *IssueConnection `json:"issues"`
 	// Returns a single label by name
-	Label *Label `json:"label,omitempty"`
+	Label *Label `json:"label"`
 	// A list of labels associated with the repository.
-	Labels *LabelConnection `json:"labels,omitempty"`
+	Labels *LabelConnection `json:"labels"`
 	// A list containing a breakdown of the language composition of the repository.
-	Languages *LanguageConnection `json:"languages,omitempty"`
+	Languages *LanguageConnection `json:"languages"`
 	// Get the latest release for the repository if one exists.
-	LatestRelease *Release `json:"latestRelease,omitempty"`
+	LatestRelease *Release `json:"latestRelease"`
 	// The license associated with the repository
-	LicenseInfo *License `json:"licenseInfo,omitempty"`
+	LicenseInfo *License `json:"licenseInfo"`
 	// The reason the repository has been locked.
-	LockReason *RepositoryLockReason `json:"lockReason,omitempty"`
+	LockReason *RepositoryLockReason `json:"lockReason"`
 	// A list of Users that can be mentioned in the context of the repository.
-	MentionableUsers *UserConnection `json:"mentionableUsers,omitempty"`
+	MentionableUsers *UserConnection `json:"mentionableUsers"`
 	// Whether or not PRs are merged with a merge commit on this repository.
 	MergeCommitAllowed bool `json:"mergeCommitAllowed"`
 	// Returns a single milestone from the current repository by number.
-	Milestone *Milestone `json:"milestone,omitempty"`
+	Milestone *Milestone `json:"milestone"`
 	// A list of milestones associated with the repository.
-	Milestones *MilestoneConnection `json:"milestones,omitempty"`
+	Milestones *MilestoneConnection `json:"milestones"`
 	// The repository's original mirror URL.
-	MirrorURL *string `json:"mirrorUrl,omitempty"`
+	MirrorURL *string `json:"mirrorUrl"`
 	// The name of the repository.
 	Name string `json:"name"`
 	// The repository's name with owner.
 	NameWithOwner string `json:"nameWithOwner"`
 	// A Git object in the repository
-	Object GitObject `json:"object,omitempty"`
+	Object GitObject `json:"object"`
 	// The image used to represent this repository in Open Graph data.
 	OpenGraphImageURL string `json:"openGraphImageUrl"`
 	// The User owner of the repository.
-	Owner RepositoryOwner `json:"owner,omitempty"`
+	Owner RepositoryOwner `json:"owner"`
 	// A list of packages under the owner.
-	Packages *PackageConnection `json:"packages,omitempty"`
+	Packages *PackageConnection `json:"packages"`
 	// The repository parent, if this is a fork.
-	Parent *Repository `json:"parent,omitempty"`
-	// A list of discussions that have been pinned in this repository.
-	PinnedDiscussions *PinnedDiscussionConnection `json:"pinnedDiscussions,omitempty"`
+	Parent *Repository `json:"parent"`
 	// A list of pinned issues for this repository.
-	PinnedIssues *PinnedIssueConnection `json:"pinnedIssues,omitempty"`
+	PinnedIssues *PinnedIssueConnection `json:"pinnedIssues"`
 	// The primary language of the repository's code.
-	PrimaryLanguage *Language `json:"primaryLanguage,omitempty"`
+	PrimaryLanguage *Language `json:"primaryLanguage"`
 	// Find project by number.
-	Project *Project `json:"project,omitempty"`
-	// Finds and returns the Project (beta) according to the provided Project (beta) number.
-	ProjectNext *ProjectNext `json:"projectNext,omitempty"`
+	Project *Project `json:"project"`
 	// A list of projects under the owner.
-	Projects *ProjectConnection `json:"projects,omitempty"`
-	// List of projects (beta) linked to this repository.
-	ProjectsNext *ProjectNextConnection `json:"projectsNext,omitempty"`
+	Projects *ProjectConnection `json:"projects"`
 	// The HTTP path listing the repository's projects
 	ProjectsResourcePath string `json:"projectsResourcePath"`
 	// The HTTP URL listing the repository's projects
 	ProjectsURL string `json:"projectsUrl"`
 	// Returns a single pull request from the current repository by number.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
-	// Returns a list of pull request templates associated to the repository
-	PullRequestTemplates []*PullRequestTemplate `json:"pullRequestTemplates,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 	// A list of pull requests that have been opened in the repository.
-	PullRequests *PullRequestConnection `json:"pullRequests,omitempty"`
+	PullRequests *PullRequestConnection `json:"pullRequests"`
 	// Identifies when the repository was last pushed to.
-	PushedAt *time.Time `json:"pushedAt,omitempty"`
+	PushedAt *time.Time `json:"pushedAt"`
 	// Whether or not rebase-merging is enabled on this repository.
 	RebaseMergeAllowed bool `json:"rebaseMergeAllowed"`
 	// Fetch a given ref from the repository
-	Ref *Ref `json:"ref,omitempty"`
+	Ref *Ref `json:"ref"`
 	// Fetch a list of refs from the repository
-	Refs *RefConnection `json:"refs,omitempty"`
+	Refs *RefConnection `json:"refs"`
 	// Lookup a single release given various criteria.
-	Release *Release `json:"release,omitempty"`
+	Release *Release `json:"release"`
 	// List of releases which are dependent on this repository.
-	Releases *ReleaseConnection `json:"releases,omitempty"`
+	Releases *ReleaseConnection `json:"releases"`
 	// A list of applied repository-topic associations for this repository.
-	RepositoryTopics *RepositoryTopicConnection `json:"repositoryTopics,omitempty"`
+	RepositoryTopics *RepositoryTopicConnection `json:"repositoryTopics"`
 	// The HTTP path for this repository
 	ResourcePath string `json:"resourcePath"`
 	// The security policy URL.
-	SecurityPolicyURL *string `json:"securityPolicyUrl,omitempty"`
+	SecurityPolicyURL *string `json:"securityPolicyUrl"`
 	// A description of the repository, rendered to HTML without any links in it.
 	ShortDescriptionHTML string `json:"shortDescriptionHTML"`
 	// Whether or not squash-merging is enabled on this repository.
@@ -12085,13 +10472,13 @@ type Repository struct {
 	//
 	StargazerCount int `json:"stargazerCount"`
 	// A list of users who have starred this starrable.
-	Stargazers *StargazerConnection `json:"stargazers,omitempty"`
+	Stargazers *StargazerConnection `json:"stargazers"`
 	// Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit.
-	Submodules *SubmoduleConnection `json:"submodules,omitempty"`
+	Submodules *SubmoduleConnection `json:"submodules"`
 	// Temporary authentication token for cloning this repository.
-	TempCloneToken *string `json:"tempCloneToken,omitempty"`
+	TempCloneToken *string `json:"tempCloneToken"`
 	// The repository from which this repository was generated, if any.
-	TemplateRepository *Repository `json:"templateRepository,omitempty"`
+	TemplateRepository *Repository `json:"templateRepository"`
 	// Identifies the date and time when the object was last updated.
 	UpdatedAt time.Time `json:"updatedAt"`
 	// The HTTP URL for this repository
@@ -12107,28 +10494,25 @@ type Repository struct {
 	// Indicates whether the viewer can update the topics of this repository.
 	ViewerCanUpdateTopics bool `json:"viewerCanUpdateTopics"`
 	// The last commit email for the viewer.
-	ViewerDefaultCommitEmail *string `json:"viewerDefaultCommitEmail,omitempty"`
+	ViewerDefaultCommitEmail *string `json:"viewerDefaultCommitEmail"`
 	// The last used merge method by the viewer or the default for the repository.
 	ViewerDefaultMergeMethod PullRequestMergeMethod `json:"viewerDefaultMergeMethod"`
 	// Returns a boolean indicating whether the viewing user has starred this starrable.
 	ViewerHasStarred bool `json:"viewerHasStarred"`
 	// The users permission level on the repository. Will return null if authenticated as an GitHub App.
-	ViewerPermission *RepositoryPermission `json:"viewerPermission,omitempty"`
+	ViewerPermission *RepositoryPermission `json:"viewerPermission"`
 	// A list of emails this viewer can commit with.
-	ViewerPossibleCommitEmails []string `json:"viewerPossibleCommitEmails,omitempty"`
+	ViewerPossibleCommitEmails []string `json:"viewerPossibleCommitEmails"`
 	// Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
-	ViewerSubscription *SubscriptionState `json:"viewerSubscription,omitempty"`
-	// Indicates the repository's visibility level.
-	Visibility RepositoryVisibility `json:"visibility"`
+	ViewerSubscription *SubscriptionState `json:"viewerSubscription"`
 	// A list of vulnerability alerts that are on this repository.
-	VulnerabilityAlerts *RepositoryVulnerabilityAlertConnection `json:"vulnerabilityAlerts,omitempty"`
+	VulnerabilityAlerts *RepositoryVulnerabilityAlertConnection `json:"vulnerabilityAlerts"`
 	// A list of users watching the repository.
-	Watchers *UserConnection `json:"watchers,omitempty"`
+	Watchers *UserConnection `json:"watchers"`
 }
 
-func (Repository) IsPinnableItem()             {}
-func (Repository) IsSearchResultItem()         {}
 func (Repository) IsPermissionGranter()        {}
+func (Repository) IsSearchResultItem()         {}
 func (Repository) IsNode()                     {}
 func (Repository) IsProjectOwner()             {}
 func (Repository) IsPackageOwner()             {}
@@ -12136,39 +10520,16 @@ func (Repository) IsSubscribable()             {}
 func (Repository) IsStarrable()                {}
 func (Repository) IsUniformResourceLocatable() {}
 func (Repository) IsRepositoryInfo()           {}
-
-// Information extracted from a repository's `CODEOWNERS` file.
-type RepositoryCodeowners struct {
-	// Any problems that were encountered while parsing the `CODEOWNERS` file.
-	Errors []*RepositoryCodeownersError `json:"errors,omitempty"`
-}
-
-// An error in a `CODEOWNERS` file.
-type RepositoryCodeownersError struct {
-	// The column number where the error occurs.
-	Column int `json:"column"`
-	// A short string describing the type of error.
-	Kind string `json:"kind"`
-	// The line number where the error occurs.
-	Line int `json:"line"`
-	// A complete description of the error, combining information from other fields.
-	Message string `json:"message"`
-	// The path to the file when the error occurs.
-	Path string `json:"path"`
-	// The content of the line where the error occurs.
-	Source string `json:"source"`
-	// A suggestion of how to fix the error.
-	Suggestion *string `json:"suggestion,omitempty"`
-}
+func (Repository) IsPinnableItem()             {}
 
 // The connection type for User.
 type RepositoryCollaboratorConnection struct {
 	// A list of edges.
-	Edges []*RepositoryCollaboratorEdge `json:"edges,omitempty"`
+	Edges []*RepositoryCollaboratorEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*User `json:"nodes,omitempty"`
+	Nodes []*User `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -12177,21 +10538,21 @@ type RepositoryCollaboratorConnection struct {
 type RepositoryCollaboratorEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
-	Node   *User  `json:"node,omitempty"`
+	Node   *User  `json:"node"`
 	// The permission the user has on the repository.
 	Permission RepositoryPermission `json:"permission"`
 	// A list of sources for the user's access to the repository.
-	PermissionSources []*PermissionSource `json:"permissionSources,omitempty"`
+	PermissionSources []*PermissionSource `json:"permissionSources"`
 }
 
 // A list of repositories owned by the subject.
 type RepositoryConnection struct {
 	// A list of edges.
-	Edges []*RepositoryEdge `json:"edges,omitempty"`
+	Edges []*RepositoryEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*Repository `json:"nodes,omitempty"`
+	Nodes []*Repository `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 	// The total size in kilobytes of all repositories in the connection.
@@ -12213,13 +10574,13 @@ type RepositoryEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *Repository `json:"node,omitempty"`
+	Node *Repository `json:"node"`
 }
 
 // Repository interaction limit that applies to this object.
 type RepositoryInteractionAbility struct {
 	// The time the currently active limit expires.
-	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
+	ExpiresAt *time.Time `json:"expiresAt"`
 	// The current limit that is enabled on this object.
 	Limit RepositoryInteractionLimit `json:"limit"`
 	// The origin of the currently active interaction limit.
@@ -12229,30 +10590,30 @@ type RepositoryInteractionAbility struct {
 // An invitation for a user to be added to a repository.
 type RepositoryInvitation struct {
 	// The email address that received the invitation.
-	Email *string `json:"email,omitempty"`
+	Email *string `json:"email"`
 	ID    string  `json:"id"`
 	// The user who received the invitation.
-	Invitee *User `json:"invitee,omitempty"`
+	Invitee *User `json:"invitee"`
 	// The user who created the invitation.
-	Inviter *User `json:"inviter,omitempty"`
+	Inviter *User `json:"inviter"`
 	// The permalink for this repository invitation.
 	Permalink string `json:"permalink"`
 	// The permission granted on this repository by this invitation.
 	Permission RepositoryPermission `json:"permission"`
 	// The Repository the user is invited to.
-	Repository RepositoryInfo `json:"repository,omitempty"`
+	Repository RepositoryInfo `json:"repository"`
 }
 
 func (RepositoryInvitation) IsNode() {}
 
-// A list of repository invitations.
+// The connection type for RepositoryInvitation.
 type RepositoryInvitationConnection struct {
 	// A list of edges.
-	Edges []*RepositoryInvitationEdge `json:"edges,omitempty"`
+	Edges []*RepositoryInvitationEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*RepositoryInvitation `json:"nodes,omitempty"`
+	Nodes []*RepositoryInvitation `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -12262,7 +10623,7 @@ type RepositoryInvitationEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *RepositoryInvitation `json:"node,omitempty"`
+	Node *RepositoryInvitation `json:"node"`
 }
 
 // Ordering options for repository invitation connections.
@@ -12273,54 +10634,6 @@ type RepositoryInvitationOrder struct {
 	Direction OrderDirection `json:"direction"`
 }
 
-// An Octoshift repository migration.
-type RepositoryMigration struct {
-	// The Octoshift migration flag to continue on error.
-	ContinueOnError bool `json:"continueOnError"`
-	// Identifies the date and time when the object was created.
-	CreatedAt time.Time `json:"createdAt"`
-	// The reason the migration failed.
-	FailureReason *string `json:"failureReason,omitempty"`
-	ID            string  `json:"id"`
-	// The Octoshift migration source.
-	MigrationSource *MigrationSource `json:"migrationSource,omitempty"`
-	// The Octoshift migration source URL.
-	SourceURL string `json:"sourceUrl"`
-	// The Octoshift migration state.
-	State MigrationState `json:"state"`
-}
-
-func (RepositoryMigration) IsNode()      {}
-func (RepositoryMigration) IsMigration() {}
-
-// The connection type for RepositoryMigration.
-type RepositoryMigrationConnection struct {
-	// A list of edges.
-	Edges []*RepositoryMigrationEdge `json:"edges,omitempty"`
-	// A list of nodes.
-	Nodes []*RepositoryMigration `json:"nodes,omitempty"`
-	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
-	// Identifies the total count of items in the connection.
-	TotalCount int `json:"totalCount"`
-}
-
-// Represents a repository migration.
-type RepositoryMigrationEdge struct {
-	// A cursor for use in pagination.
-	Cursor string `json:"cursor"`
-	// The item at the end of the edge.
-	Node *RepositoryMigration `json:"node,omitempty"`
-}
-
-// Ordering options for repository migrations.
-type RepositoryMigrationOrder struct {
-	// The field to order repository migrations by.
-	Field RepositoryMigrationOrderField `json:"field"`
-	// The ordering direction.
-	Direction RepositoryMigrationOrderDirection `json:"direction"`
-}
-
 // Ordering options for repository connections
 type RepositoryOrder struct {
 	// The field to order repositories by.
@@ -12335,7 +10648,7 @@ type RepositoryTopic struct {
 	// The HTTP path for this repository-topic.
 	ResourcePath string `json:"resourcePath"`
 	// The topic.
-	Topic *Topic `json:"topic,omitempty"`
+	Topic *Topic `json:"topic"`
 	// The HTTP URL for this repository-topic.
 	URL string `json:"url"`
 }
@@ -12346,11 +10659,11 @@ func (RepositoryTopic) IsUniformResourceLocatable() {}
 // The connection type for RepositoryTopic.
 type RepositoryTopicConnection struct {
 	// A list of edges.
-	Edges []*RepositoryTopicEdge `json:"edges,omitempty"`
+	Edges []*RepositoryTopicEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*RepositoryTopic `json:"nodes,omitempty"`
+	Nodes []*RepositoryTopic `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -12360,7 +10673,7 @@ type RepositoryTopicEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *RepositoryTopic `json:"node,omitempty"`
+	Node *RepositoryTopic `json:"node"`
 }
 
 // Audit log entry for a repository_visibility_change.disable event.
@@ -12368,44 +10681,44 @@ type RepositoryVisibilityChangeDisableAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	// The HTTP path for this enterprise.
-	EnterpriseResourcePath *string `json:"enterpriseResourcePath,omitempty"`
+	EnterpriseResourcePath *string `json:"enterpriseResourcePath"`
 	// The slug of the enterprise.
-	EnterpriseSlug *string `json:"enterpriseSlug,omitempty"`
+	EnterpriseSlug *string `json:"enterpriseSlug"`
 	// The HTTP URL for this enterprise.
-	EnterpriseURL *string `json:"enterpriseUrl,omitempty"`
+	EnterpriseURL *string `json:"enterpriseUrl"`
 	ID            string  `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (RepositoryVisibilityChangeDisableAuditEntry) IsNode()                       {}
@@ -12419,83 +10732,75 @@ type RepositoryVisibilityChangeEnableAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	// The HTTP path for this enterprise.
-	EnterpriseResourcePath *string `json:"enterpriseResourcePath,omitempty"`
+	EnterpriseResourcePath *string `json:"enterpriseResourcePath"`
 	// The slug of the enterprise.
-	EnterpriseSlug *string `json:"enterpriseSlug,omitempty"`
+	EnterpriseSlug *string `json:"enterpriseSlug"`
 	// The HTTP URL for this enterprise.
-	EnterpriseURL *string `json:"enterpriseUrl,omitempty"`
+	EnterpriseURL *string `json:"enterpriseUrl"`
 	ID            string  `json:"id"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
-func (RepositoryVisibilityChangeEnableAuditEntry) IsOrganizationAuditEntry()     {}
 func (RepositoryVisibilityChangeEnableAuditEntry) IsNode()                       {}
 func (RepositoryVisibilityChangeEnableAuditEntry) IsAuditEntry()                 {}
 func (RepositoryVisibilityChangeEnableAuditEntry) IsEnterpriseAuditEntryData()   {}
 func (RepositoryVisibilityChangeEnableAuditEntry) IsOrganizationAuditEntryData() {}
+func (RepositoryVisibilityChangeEnableAuditEntry) IsOrganizationAuditEntry()     {}
 
-// A Dependabot alert for a repository with a dependency affected by a security vulnerability.
+// A alert for a repository with an affected vulnerability.
 type RepositoryVulnerabilityAlert struct {
 	// When was the alert created?
 	CreatedAt time.Time `json:"createdAt"`
 	// The reason the alert was dismissed
-	DismissReason *string `json:"dismissReason,omitempty"`
+	DismissReason *string `json:"dismissReason"`
 	// When was the alert dismissed?
-	DismissedAt *time.Time `json:"dismissedAt,omitempty"`
+	DismissedAt *time.Time `json:"dismissedAt"`
 	// The user who dismissed the alert
-	Dismisser *User `json:"dismisser,omitempty"`
-	// The reason the alert was marked as fixed.
-	FixReason *string `json:"fixReason,omitempty"`
-	// When was the alert fixed?
-	FixedAt *time.Time `json:"fixedAt,omitempty"`
-	ID      string     `json:"id"`
-	// Identifies the alert number.
-	Number int `json:"number"`
+	Dismisser *User  `json:"dismisser"`
+	ID        string `json:"id"`
 	// The associated repository
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The associated security advisory
-	SecurityAdvisory *SecurityAdvisory `json:"securityAdvisory,omitempty"`
+	SecurityAdvisory *SecurityAdvisory `json:"securityAdvisory"`
 	// The associated security vulnerability
-	SecurityVulnerability *SecurityVulnerability `json:"securityVulnerability,omitempty"`
-	// Identifies the state of the alert.
-	State RepositoryVulnerabilityAlertState `json:"state"`
+	SecurityVulnerability *SecurityVulnerability `json:"securityVulnerability"`
 	// The vulnerable manifest filename
 	VulnerableManifestFilename string `json:"vulnerableManifestFilename"`
 	// The vulnerable manifest path
 	VulnerableManifestPath string `json:"vulnerableManifestPath"`
 	// The vulnerable requirements
-	VulnerableRequirements *string `json:"vulnerableRequirements,omitempty"`
+	VulnerableRequirements *string `json:"vulnerableRequirements"`
 }
 
 func (RepositoryVulnerabilityAlert) IsNode()           {}
@@ -12504,11 +10809,11 @@ func (RepositoryVulnerabilityAlert) IsRepositoryNode() {}
 // The connection type for RepositoryVulnerabilityAlert.
 type RepositoryVulnerabilityAlertConnection struct {
 	// A list of edges.
-	Edges []*RepositoryVulnerabilityAlertEdge `json:"edges,omitempty"`
+	Edges []*RepositoryVulnerabilityAlertEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*RepositoryVulnerabilityAlert `json:"nodes,omitempty"`
+	Nodes []*RepositoryVulnerabilityAlert `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -12518,7 +10823,7 @@ type RepositoryVulnerabilityAlertEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *RepositoryVulnerabilityAlert `json:"node,omitempty"`
+	Node *RepositoryVulnerabilityAlert `json:"node"`
 }
 
 // Autogenerated input type of RequestReviews
@@ -12526,41 +10831,25 @@ type RequestReviewsInput struct {
 	// The Node ID of the pull request to modify.
 	PullRequestID string `json:"pullRequestId"`
 	// The Node IDs of the user to request.
-	UserIds []string `json:"userIds,omitempty"`
+	UserIds []string `json:"userIds"`
 	// The Node IDs of the team to request.
-	TeamIds []string `json:"teamIds,omitempty"`
+	TeamIds []string `json:"teamIds"`
 	// Add users to the set rather than replace.
-	Union *bool `json:"union,omitempty"`
+	Union *bool `json:"union"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of RequestReviews
 type RequestReviewsPayload struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The pull request that is getting requests.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 	// The edge from the pull request to the requested reviewers.
-	RequestedReviewersEdge *UserEdge `json:"requestedReviewersEdge,omitempty"`
-}
-
-// Represents a required status check for a protected branch, but not any specific run of that check.
-type RequiredStatusCheckDescription struct {
-	// The App that must provide this status in order for it to be accepted.
-	App *App `json:"app,omitempty"`
-	// The name of this status.
-	Context string `json:"context"`
-}
-
-// Specifies the attributes for a new or updated required status check.
-type RequiredStatusCheckInput struct {
-	// Status check context that must pass for commits to be accepted to the matching branch.
-	Context string `json:"context"`
-	// The ID of the App that must set the status in order for it to be accepted. Omit this value to use whichever app has recently been setting this status, or use "any" to allow any app to set the status.
-	AppID *string `json:"appId,omitempty"`
+	RequestedReviewersEdge *UserEdge `json:"requestedReviewersEdge"`
 }
 
 // Autogenerated input type of RerequestCheckSuite
@@ -12570,15 +10859,15 @@ type RerequestCheckSuiteInput struct {
 	// The Node ID of the check suite.
 	CheckSuiteID string `json:"checkSuiteId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of RerequestCheckSuite
 type RerequestCheckSuitePayload struct {
 	// The requested check suite.
-	CheckSuite *CheckSuite `json:"checkSuite,omitempty"`
+	CheckSuite *CheckSuite `json:"checkSuite"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated input type of ResolveReviewThread
@@ -12586,15 +10875,15 @@ type ResolveReviewThreadInput struct {
 	// The ID of the thread to resolve
 	ThreadID string `json:"threadId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of ResolveReviewThread
 type ResolveReviewThreadPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The thread to resolve.
-	Thread *PullRequestReviewThread `json:"thread,omitempty"`
+	Thread *PullRequestReviewThread `json:"thread"`
 }
 
 // Represents a private contribution a user made on GitHub.
@@ -12612,20 +10901,20 @@ type RestrictedContribution struct {
 	URL string `json:"url"`
 	// The user who made this contribution.
 	//
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 }
 
-func (RestrictedContribution) IsContribution()                               {}
-func (RestrictedContribution) IsCreatedIssueOrRestrictedContribution()       {}
 func (RestrictedContribution) IsCreatedRepositoryOrRestrictedContribution()  {}
 func (RestrictedContribution) IsCreatedPullRequestOrRestrictedContribution() {}
+func (RestrictedContribution) IsCreatedIssueOrRestrictedContribution()       {}
+func (RestrictedContribution) IsContribution()                               {}
 
 // A team or user who has the ability to dismiss a review on a protected branch.
 type ReviewDismissalAllowance struct {
 	// The actor that can dismiss.
-	Actor ReviewDismissalAllowanceActor `json:"actor,omitempty"`
+	Actor ReviewDismissalAllowanceActor `json:"actor"`
 	// Identifies the branch protection rule associated with the allowed user or team.
-	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule,omitempty"`
+	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule"`
 	ID                   string                `json:"id"`
 }
 
@@ -12634,11 +10923,11 @@ func (ReviewDismissalAllowance) IsNode() {}
 // The connection type for ReviewDismissalAllowance.
 type ReviewDismissalAllowanceConnection struct {
 	// A list of edges.
-	Edges []*ReviewDismissalAllowanceEdge `json:"edges,omitempty"`
+	Edges []*ReviewDismissalAllowanceEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*ReviewDismissalAllowance `json:"nodes,omitempty"`
+	Nodes []*ReviewDismissalAllowance `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -12648,52 +10937,52 @@ type ReviewDismissalAllowanceEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *ReviewDismissalAllowance `json:"node,omitempty"`
+	Node *ReviewDismissalAllowance `json:"node"`
 }
 
 // Represents a 'review_dismissed' event on a given issue or pull request.
 type ReviewDismissedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
+	DatabaseID *int `json:"databaseId"`
 	// Identifies the optional message associated with the 'review_dismissed' event.
-	DismissalMessage *string `json:"dismissalMessage,omitempty"`
+	DismissalMessage *string `json:"dismissalMessage"`
 	// Identifies the optional message associated with the event, rendered to HTML.
-	DismissalMessageHTML *string `json:"dismissalMessageHTML,omitempty"`
+	DismissalMessageHTML *string `json:"dismissalMessageHTML"`
 	ID                   string  `json:"id"`
 	// Identifies the previous state of the review with the 'review_dismissed' event.
 	PreviousReviewState PullRequestReviewState `json:"previousReviewState"`
 	// PullRequest referenced by event.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 	// Identifies the commit which caused the review to become stale.
-	PullRequestCommit *PullRequestCommit `json:"pullRequestCommit,omitempty"`
+	PullRequestCommit *PullRequestCommit `json:"pullRequestCommit"`
 	// The HTTP path for this review dismissed event.
 	ResourcePath string `json:"resourcePath"`
 	// Identifies the review associated with the 'review_dismissed' event.
-	Review *PullRequestReview `json:"review,omitempty"`
+	Review *PullRequestReview `json:"review"`
 	// The HTTP URL for this review dismissed event.
 	URL string `json:"url"`
 }
 
 func (ReviewDismissedEvent) IsPullRequestTimelineItems() {}
-func (ReviewDismissedEvent) IsPullRequestTimelineItem()  {}
 func (ReviewDismissedEvent) IsNode()                     {}
 func (ReviewDismissedEvent) IsUniformResourceLocatable() {}
+func (ReviewDismissedEvent) IsPullRequestTimelineItem()  {}
 
 // A request for a user to review a pull request.
 type ReviewRequest struct {
 	// Whether this request was created for a code owner
 	AsCodeOwner bool `json:"asCodeOwner"`
 	// Identifies the primary key from the database.
-	DatabaseID *int   `json:"databaseId,omitempty"`
+	DatabaseID *int   `json:"databaseId"`
 	ID         string `json:"id"`
 	// Identifies the pull request associated with this review request.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 	// The reviewer that is requested.
-	RequestedReviewer RequestedReviewer `json:"requestedReviewer,omitempty"`
+	RequestedReviewer RequestedReviewer `json:"requestedReviewer"`
 }
 
 func (ReviewRequest) IsNode() {}
@@ -12701,11 +10990,11 @@ func (ReviewRequest) IsNode() {}
 // The connection type for ReviewRequest.
 type ReviewRequestConnection struct {
 	// A list of edges.
-	Edges []*ReviewRequestEdge `json:"edges,omitempty"`
+	Edges []*ReviewRequestEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*ReviewRequest `json:"nodes,omitempty"`
+	Nodes []*ReviewRequest `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -12715,94 +11004,56 @@ type ReviewRequestEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *ReviewRequest `json:"node,omitempty"`
+	Node *ReviewRequest `json:"node"`
 }
 
 // Represents an 'review_request_removed' event on a given pull request.
 type ReviewRequestRemovedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
 	// PullRequest referenced by event.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 	// Identifies the reviewer whose review request was removed.
-	RequestedReviewer RequestedReviewer `json:"requestedReviewer,omitempty"`
+	RequestedReviewer RequestedReviewer `json:"requestedReviewer"`
 }
 
+func (ReviewRequestRemovedEvent) IsNode()                     {}
 func (ReviewRequestRemovedEvent) IsPullRequestTimelineItems() {}
 func (ReviewRequestRemovedEvent) IsPullRequestTimelineItem()  {}
-func (ReviewRequestRemovedEvent) IsNode()                     {}
 
 // Represents an 'review_requested' event on a given pull request.
 type ReviewRequestedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
 	// PullRequest referenced by event.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 	// Identifies the reviewer whose review was requested.
-	RequestedReviewer RequestedReviewer `json:"requestedReviewer,omitempty"`
+	RequestedReviewer RequestedReviewer `json:"requestedReviewer"`
 }
 
-func (ReviewRequestedEvent) IsNode()                     {}
 func (ReviewRequestedEvent) IsPullRequestTimelineItems() {}
+func (ReviewRequestedEvent) IsNode()                     {}
 func (ReviewRequestedEvent) IsPullRequestTimelineItem()  {}
 
 // A hovercard context with a message describing the current code review state of the pull
 // request.
-//
-type ReviewStatusHovercardContext struct {
-	// A string describing this context
-	Message string `json:"message"`
-	// An octicon to accompany this context
-	Octicon string `json:"octicon"`
-	// The current status of the pull request with respect to code review.
-	ReviewDecision *PullRequestReviewDecision `json:"reviewDecision,omitempty"`
-}
-
-func (ReviewStatusHovercardContext) IsHovercardContext() {}
-
-// Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
-type RevokeEnterpriseOrganizationsMigratorRoleInput struct {
-	// The ID of the enterprise to which all organizations managed by it will be granted the migrator role.
-	EnterpriseID string `json:"enterpriseId"`
-	// The login of the user to revoke the migrator role
-	Login string `json:"login"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
-type RevokeEnterpriseOrganizationsMigratorRolePayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The organizations that had the migrator role revoked for the given user.
-	Organizations *OrganizationConnection `json:"organizations,omitempty"`
-}
-
-// Autogenerated input type of RevokeMigratorRole
-type RevokeMigratorRoleInput struct {
-	// The ID of the organization that the user/team belongs to.
-	OrganizationID string `json:"organizationId"`
-	// The user login or Team slug to revoke the migrator role from.
-	Actor string `json:"actor"`
-	// Specifies the type of the actor, can be either USER or TEAM.
-	ActorType ActorType `json:"actorType"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+//
+type ReviewStatusHovercardContext struct {
+	// A string describing this context
+	Message string `json:"message"`
+	// An octicon to accompany this context
+	Octicon string `json:"octicon"`
+	// The current status of the pull request with respect to code review.
+	ReviewDecision *PullRequestReviewDecision `json:"reviewDecision"`
 }
 
-// Autogenerated return type of RevokeMigratorRole
-type RevokeMigratorRolePayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// Did the operation succeed?
-	Success *bool `json:"success,omitempty"`
-}
+func (ReviewStatusHovercardContext) IsHovercardContext() {}
 
 // A Saved Reply is text a user can use to reply quickly.
 type SavedReply struct {
@@ -12811,12 +11062,12 @@ type SavedReply struct {
 	// The saved reply body rendered to HTML.
 	BodyHTML string `json:"bodyHTML"`
 	// Identifies the primary key from the database.
-	DatabaseID *int   `json:"databaseId,omitempty"`
+	DatabaseID *int   `json:"databaseId"`
 	ID         string `json:"id"`
 	// The title of the saved reply.
 	Title string `json:"title"`
 	// The user that saved this reply.
-	User Actor `json:"user,omitempty"`
+	User Actor `json:"user"`
 }
 
 func (SavedReply) IsNode() {}
@@ -12824,11 +11075,11 @@ func (SavedReply) IsNode() {}
 // The connection type for SavedReply.
 type SavedReplyConnection struct {
 	// A list of edges.
-	Edges []*SavedReplyEdge `json:"edges,omitempty"`
+	Edges []*SavedReplyEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*SavedReply `json:"nodes,omitempty"`
+	Nodes []*SavedReply `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -12838,7 +11089,7 @@ type SavedReplyEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *SavedReply `json:"node,omitempty"`
+	Node *SavedReply `json:"node"`
 }
 
 // Ordering options for saved reply connections.
@@ -12853,16 +11104,14 @@ type SavedReplyOrder struct {
 type SearchResultItemConnection struct {
 	// The number of pieces of code that matched the search query.
 	CodeCount int `json:"codeCount"`
-	// The number of discussions that matched the search query.
-	DiscussionCount int `json:"discussionCount"`
 	// A list of edges.
-	Edges []*SearchResultItemEdge `json:"edges,omitempty"`
+	Edges []*SearchResultItemEdge `json:"edges"`
 	// The number of issues that matched the search query.
 	IssueCount int `json:"issueCount"`
 	// A list of nodes.
-	Nodes []SearchResultItem `json:"nodes,omitempty"`
+	Nodes []SearchResultItem `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// The number of repositories that matched the search query.
 	RepositoryCount int `json:"repositoryCount"`
 	// The number of users that matched the search query.
@@ -12876,36 +11125,36 @@ type SearchResultItemEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node SearchResultItem `json:"node,omitempty"`
+	Node SearchResultItem `json:"node"`
 	// Text matches on the result found.
-	TextMatches []*TextMatch `json:"textMatches,omitempty"`
+	TextMatches []*TextMatch `json:"textMatches"`
 }
 
 // A GitHub Security Advisory
 type SecurityAdvisory struct {
 	// The CVSS associated with this advisory
-	Cvss *Cvss `json:"cvss,omitempty"`
+	Cvss *Cvss `json:"cvss"`
 	// CWEs associated with this Advisory
-	Cwes *CWEConnection `json:"cwes,omitempty"`
+	Cwes *CWEConnection `json:"cwes"`
 	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
+	DatabaseID *int `json:"databaseId"`
 	// This is a long plaintext description of the advisory
 	Description string `json:"description"`
 	// The GitHub Security Advisory ID
 	GhsaID string `json:"ghsaId"`
 	ID     string `json:"id"`
 	// A list of identifiers for this advisory
-	Identifiers []*SecurityAdvisoryIdentifier `json:"identifiers,omitempty"`
+	Identifiers []*SecurityAdvisoryIdentifier `json:"identifiers"`
 	// The permalink for the advisory's dependabot alerts page
-	NotificationsPermalink *string `json:"notificationsPermalink,omitempty"`
+	NotificationsPermalink *string `json:"notificationsPermalink"`
 	// The organization that originated the advisory
 	Origin string `json:"origin"`
 	// The permalink for the advisory
-	Permalink *string `json:"permalink,omitempty"`
+	Permalink *string `json:"permalink"`
 	// When the advisory was published
 	PublishedAt time.Time `json:"publishedAt"`
 	// A list of references for this advisory
-	References []*SecurityAdvisoryReference `json:"references,omitempty"`
+	References []*SecurityAdvisoryReference `json:"references"`
 	// The severity of the advisory
 	Severity SecurityAdvisorySeverity `json:"severity"`
 	// A short plaintext summary of the advisory
@@ -12913,9 +11162,9 @@ type SecurityAdvisory struct {
 	// When the advisory was last updated
 	UpdatedAt time.Time `json:"updatedAt"`
 	// Vulnerabilities associated with this Advisory
-	Vulnerabilities *SecurityVulnerabilityConnection `json:"vulnerabilities,omitempty"`
+	Vulnerabilities *SecurityVulnerabilityConnection `json:"vulnerabilities"`
 	// When the advisory was withdrawn, if it has been withdrawn
-	WithdrawnAt *time.Time `json:"withdrawnAt,omitempty"`
+	WithdrawnAt *time.Time `json:"withdrawnAt"`
 }
 
 func (SecurityAdvisory) IsNode() {}
@@ -12923,11 +11172,11 @@ func (SecurityAdvisory) IsNode() {}
 // The connection type for SecurityAdvisory.
 type SecurityAdvisoryConnection struct {
 	// A list of edges.
-	Edges []*SecurityAdvisoryEdge `json:"edges,omitempty"`
+	Edges []*SecurityAdvisoryEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*SecurityAdvisory `json:"nodes,omitempty"`
+	Nodes []*SecurityAdvisory `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -12937,7 +11186,7 @@ type SecurityAdvisoryEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *SecurityAdvisory `json:"node,omitempty"`
+	Node *SecurityAdvisory `json:"node"`
 }
 
 // A GitHub Security Advisory Identifier
@@ -12987,11 +11236,11 @@ type SecurityAdvisoryReference struct {
 // An individual vulnerability within an Advisory
 type SecurityVulnerability struct {
 	// The Advisory associated with this Vulnerability
-	Advisory *SecurityAdvisory `json:"advisory,omitempty"`
+	Advisory *SecurityAdvisory `json:"advisory"`
 	// The first version containing a fix for the vulnerability
-	FirstPatchedVersion *SecurityAdvisoryPackageVersion `json:"firstPatchedVersion,omitempty"`
+	FirstPatchedVersion *SecurityAdvisoryPackageVersion `json:"firstPatchedVersion"`
 	// A description of the vulnerable package
-	Package *SecurityAdvisoryPackage `json:"package,omitempty"`
+	Package *SecurityAdvisoryPackage `json:"package"`
 	// The severity of the vulnerability within this package
 	Severity SecurityAdvisorySeverity `json:"severity"`
 	// When the vulnerability was last updated
@@ -13010,11 +11259,11 @@ type SecurityVulnerability struct {
 // The connection type for SecurityVulnerability.
 type SecurityVulnerabilityConnection struct {
 	// A list of edges.
-	Edges []*SecurityVulnerabilityEdge `json:"edges,omitempty"`
+	Edges []*SecurityVulnerabilityEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*SecurityVulnerability `json:"nodes,omitempty"`
+	Nodes []*SecurityVulnerability `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -13024,7 +11273,7 @@ type SecurityVulnerabilityEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *SecurityVulnerability `json:"node,omitempty"`
+	Node *SecurityVulnerability `json:"node"`
 }
 
 // Ordering options for security vulnerability connections
@@ -13042,7 +11291,7 @@ type SetEnterpriseIdentityProviderInput struct {
 	// The URL endpoint for the identity provider's SAML SSO.
 	SsoURL string `json:"ssoUrl"`
 	// The Issuer Entity ID for the SAML identity provider
-	Issuer *string `json:"issuer,omitempty"`
+	Issuer *string `json:"issuer"`
 	// The x509 certificate used by the identity provider to sign assertions and responses.
 	IdpCertificate string `json:"idpCertificate"`
 	// The signature algorithm used to sign SAML requests for the identity provider.
@@ -13050,15 +11299,15 @@ type SetEnterpriseIdentityProviderInput struct {
 	// The digest algorithm used to sign SAML requests for the identity provider.
 	DigestMethod SamlDigestAlgorithm `json:"digestMethod"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of SetEnterpriseIdentityProvider
 type SetEnterpriseIdentityProviderPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The identity provider for the enterprise.
-	IdentityProvider *EnterpriseIdentityProvider `json:"identityProvider,omitempty"`
+	IdentityProvider *EnterpriseIdentityProvider `json:"identityProvider"`
 }
 
 // Autogenerated input type of SetOrganizationInteractionLimit
@@ -13068,17 +11317,17 @@ type SetOrganizationInteractionLimitInput struct {
 	// The limit to set.
 	Limit RepositoryInteractionLimit `json:"limit"`
 	// When this limit should expire.
-	Expiry *RepositoryInteractionLimitExpiry `json:"expiry,omitempty"`
+	Expiry *RepositoryInteractionLimitExpiry `json:"expiry"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of SetOrganizationInteractionLimit
 type SetOrganizationInteractionLimitPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The organization that the interaction limit was set for.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 }
 
 // Autogenerated input type of SetRepositoryInteractionLimit
@@ -13088,17 +11337,17 @@ type SetRepositoryInteractionLimitInput struct {
 	// The limit to set.
 	Limit RepositoryInteractionLimit `json:"limit"`
 	// When this limit should expire.
-	Expiry *RepositoryInteractionLimitExpiry `json:"expiry,omitempty"`
+	Expiry *RepositoryInteractionLimitExpiry `json:"expiry"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of SetRepositoryInteractionLimit
 type SetRepositoryInteractionLimitPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The repository that the interaction limit was set for.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 }
 
 // Autogenerated input type of SetUserInteractionLimit
@@ -13108,17 +11357,17 @@ type SetUserInteractionLimitInput struct {
 	// The limit to set.
 	Limit RepositoryInteractionLimit `json:"limit"`
 	// When this limit should expire.
-	Expiry *RepositoryInteractionLimitExpiry `json:"expiry,omitempty"`
+	Expiry *RepositoryInteractionLimitExpiry `json:"expiry"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of SetUserInteractionLimit
 type SetUserInteractionLimitPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The user that the interaction limit was set for.
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 }
 
 // Represents an S/MIME signature on a Commit or Tag.
@@ -13132,7 +11381,7 @@ type SmimeSignature struct {
 	// ASCII-armored signature header from object.
 	Signature string `json:"signature"`
 	// GitHub user corresponding to the email signing this commit.
-	Signer *User `json:"signer,omitempty"`
+	Signer *User `json:"signer"`
 	// The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
 	State GitSignatureState `json:"state"`
 	// True if the signature was made with GitHub's signing key.
@@ -13141,42 +11390,14 @@ type SmimeSignature struct {
 
 func (SmimeSignature) IsGitSignature() {}
 
-// The connection type for Sponsor.
-type SponsorConnection struct {
-	// A list of edges.
-	Edges []*SponsorEdge `json:"edges,omitempty"`
-	// A list of nodes.
-	Nodes []Sponsor `json:"nodes,omitempty"`
-	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
-	// Identifies the total count of items in the connection.
-	TotalCount int `json:"totalCount"`
-}
-
-// Represents a user or organization who is sponsoring someone in GitHub Sponsors.
-type SponsorEdge struct {
-	// A cursor for use in pagination.
-	Cursor string `json:"cursor"`
-	// The item at the end of the edge.
-	Node Sponsor `json:"node,omitempty"`
-}
-
-// Ordering options for connections to get sponsor entities for GitHub Sponsors.
-type SponsorOrder struct {
-	// The field to order sponsor entities by.
-	Field SponsorOrderField `json:"field"`
-	// The ordering direction.
-	Direction OrderDirection `json:"direction"`
-}
-
 // The connection type for SponsorableItem.
 type SponsorableItemConnection struct {
 	// A list of edges.
-	Edges []*SponsorableItemEdge `json:"edges,omitempty"`
+	Edges []*SponsorableItemEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []SponsorableItem `json:"nodes,omitempty"`
+	Nodes []SponsorableItem `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -13186,7 +11407,7 @@ type SponsorableItemEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node SponsorableItem `json:"node,omitempty"`
+	Node SponsorableItem `json:"node"`
 }
 
 // Ordering options for connections to get sponsorable entities for GitHub Sponsors.
@@ -13197,62 +11418,15 @@ type SponsorableOrder struct {
 	Direction OrderDirection `json:"direction"`
 }
 
-// An event related to sponsorship activity.
-type SponsorsActivity struct {
-	// What action this activity indicates took place.
-	Action SponsorsActivityAction `json:"action"`
-	ID     string                 `json:"id"`
-	// The tier that the sponsorship used to use, for tier change events.
-	PreviousSponsorsTier *SponsorsTier `json:"previousSponsorsTier,omitempty"`
-	// The user or organization who triggered this activity and was/is sponsoring the sponsorable.
-	Sponsor Sponsor `json:"sponsor,omitempty"`
-	// The user or organization that is being sponsored, the maintainer.
-	Sponsorable Sponsorable `json:"sponsorable,omitempty"`
-	// The associated sponsorship tier.
-	SponsorsTier *SponsorsTier `json:"sponsorsTier,omitempty"`
-	// The timestamp of this event.
-	Timestamp *time.Time `json:"timestamp,omitempty"`
-}
-
-func (SponsorsActivity) IsNode() {}
-
-// The connection type for SponsorsActivity.
-type SponsorsActivityConnection struct {
-	// A list of edges.
-	Edges []*SponsorsActivityEdge `json:"edges,omitempty"`
-	// A list of nodes.
-	Nodes []*SponsorsActivity `json:"nodes,omitempty"`
-	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
-	// Identifies the total count of items in the connection.
-	TotalCount int `json:"totalCount"`
-}
-
-// An edge in a connection.
-type SponsorsActivityEdge struct {
-	// A cursor for use in pagination.
-	Cursor string `json:"cursor"`
-	// The item at the end of the edge.
-	Node *SponsorsActivity `json:"node,omitempty"`
-}
-
-// Ordering options for GitHub Sponsors activity connections.
-type SponsorsActivityOrder struct {
-	// The field to order activity by.
-	Field SponsorsActivityOrderField `json:"field"`
-	// The ordering direction.
-	Direction OrderDirection `json:"direction"`
-}
-
 // A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain.
 type SponsorsGoal struct {
 	// A description of the goal from the maintainer.
-	Description *string `json:"description,omitempty"`
+	Description *string `json:"description"`
 	// What the objective of this goal is.
 	Kind SponsorsGoalKind `json:"kind"`
 	// The percentage representing how complete this goal is, between 0-100.
 	PercentComplete int `json:"percentComplete"`
-	// What the goal amount is. Represents an amount in USD for monthly sponsorship amount goals. Represents a count of unique sponsors for total sponsors count goals.
+	// What the goal amount is. Represents a dollar amount for monthly sponsorship amount goals. Represents a count of unique sponsors for total sponsors count goals.
 	TargetValue int `json:"targetValue"`
 	// A brief summary of the kind and target value of this goal.
 	Title string `json:"title"`
@@ -13261,7 +11435,7 @@ type SponsorsGoal struct {
 // A GitHub Sponsors listing.
 type SponsorsListing struct {
 	// The current goal the maintainer is trying to reach with GitHub Sponsors, if any.
-	ActiveGoal *SponsorsGoal `json:"activeGoal,omitempty"`
+	ActiveGoal *SponsorsGoal `json:"activeGoal"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// The full description of the listing.
@@ -13269,20 +11443,14 @@ type SponsorsListing struct {
 	// The full description of the listing rendered to HTML.
 	FullDescriptionHTML string `json:"fullDescriptionHTML"`
 	ID                  string `json:"id"`
-	// Whether this listing is publicly visible.
-	IsPublic bool `json:"isPublic"`
 	// The listing's full name.
 	Name string `json:"name"`
-	// A future date on which this listing is eligible to receive a payout.
-	NextPayoutDate *string `json:"nextPayoutDate,omitempty"`
 	// The short description of the listing.
 	ShortDescription string `json:"shortDescription"`
 	// The short name of the listing.
 	Slug string `json:"slug"`
-	// The entity this listing represents who can be sponsored on GitHub Sponsors.
-	Sponsorable Sponsorable `json:"sponsorable,omitempty"`
 	// The published tiers for this GitHub Sponsors listing.
-	Tiers *SponsorsTierConnection `json:"tiers,omitempty"`
+	Tiers *SponsorsTierConnection `json:"tiers"`
 }
 
 func (SponsorsListing) IsNode() {}
@@ -13290,9 +11458,9 @@ func (SponsorsListing) IsNode() {}
 // A GitHub Sponsors tier associated with a GitHub Sponsors listing.
 type SponsorsTier struct {
 	// SponsorsTier information only visible to users that can administer the associated Sponsors listing.
-	AdminInfo *SponsorsTierAdminInfo `json:"adminInfo,omitempty"`
-	// Get a different tier for this tier's maintainer that is at the same frequency as this tier but with an equal or lesser cost. Returns the published tier with the monthly price closest to this tier's without going over.
-	ClosestLesserValueTier *SponsorsTier `json:"closestLesserValueTier,omitempty"`
+	AdminInfo *SponsorsTierAdminInfo `json:"adminInfo"`
+	// Get a different tier for this tier's maintainer that is at the same frequency as this tier but with a lesser cost. Returns the published tier with the monthly price closest to this tier's without going over.
+	ClosestLesserValueTier *SponsorsTier `json:"closestLesserValueTier"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// The description of the tier.
@@ -13306,12 +11474,12 @@ type SponsorsTier struct {
 	IsOneTime bool `json:"isOneTime"`
 	// How much this tier costs per month in cents.
 	MonthlyPriceInCents int `json:"monthlyPriceInCents"`
-	// How much this tier costs per month in USD.
+	// How much this tier costs per month in dollars.
 	MonthlyPriceInDollars int `json:"monthlyPriceInDollars"`
 	// The name of the tier.
 	Name string `json:"name"`
 	// The sponsors listing that this tier belongs to.
-	SponsorsListing *SponsorsListing `json:"sponsorsListing,omitempty"`
+	SponsorsListing *SponsorsListing `json:"sponsorsListing"`
 	// Identifies the date and time when the object was last updated.
 	UpdatedAt time.Time `json:"updatedAt"`
 }
@@ -13321,17 +11489,17 @@ func (SponsorsTier) IsNode() {}
 // SponsorsTier information only visible to users that can administer the associated Sponsors listing.
 type SponsorsTierAdminInfo struct {
 	// The sponsorships associated with this tier.
-	Sponsorships *SponsorshipConnection `json:"sponsorships,omitempty"`
+	Sponsorships *SponsorshipConnection `json:"sponsorships"`
 }
 
 // The connection type for SponsorsTier.
 type SponsorsTierConnection struct {
 	// A list of edges.
-	Edges []*SponsorsTierEdge `json:"edges,omitempty"`
+	Edges []*SponsorsTierEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*SponsorsTier `json:"nodes,omitempty"`
+	Nodes []*SponsorsTier `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -13341,7 +11509,7 @@ type SponsorsTierEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *SponsorsTier `json:"node,omitempty"`
+	Node *SponsorsTier `json:"node"`
 }
 
 // Ordering options for Sponsors tiers connections.
@@ -13359,22 +11527,20 @@ type Sponsorship struct {
 	ID        string    `json:"id"`
 	// Whether this sponsorship represents a one-time payment versus a recurring sponsorship.
 	IsOneTimePayment bool `json:"isOneTimePayment"`
-	// Check if the sponsor has chosen to receive sponsorship update emails sent from the sponsorable. Only returns a non-null value when the viewer has permission to know this.
-	IsSponsorOptedIntoEmail *bool `json:"isSponsorOptedIntoEmail,omitempty"`
 	// The entity that is being sponsored
-	Maintainer *User `json:"maintainer,omitempty"`
+	Maintainer *User `json:"maintainer"`
 	// The privacy level for this sponsorship.
 	PrivacyLevel SponsorshipPrivacy `json:"privacyLevel"`
 	// The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
-	Sponsor *User `json:"sponsor,omitempty"`
+	Sponsor *User `json:"sponsor"`
 	// The user or organization that is sponsoring, if you have permission to view them.
-	SponsorEntity Sponsor `json:"sponsorEntity,omitempty"`
+	SponsorEntity Sponsor `json:"sponsorEntity"`
 	// The entity that is being sponsored
-	Sponsorable Sponsorable `json:"sponsorable,omitempty"`
+	Sponsorable Sponsorable `json:"sponsorable"`
 	// The associated sponsorship tier
-	Tier *SponsorsTier `json:"tier,omitempty"`
+	Tier *SponsorsTier `json:"tier"`
 	// Identifies the date and time when the current tier was chosen for this sponsorship.
-	TierSelectedAt *time.Time `json:"tierSelectedAt,omitempty"`
+	TierSelectedAt *time.Time `json:"tierSelectedAt"`
 }
 
 func (Sponsorship) IsNode() {}
@@ -13382,17 +11548,13 @@ func (Sponsorship) IsNode() {}
 // The connection type for Sponsorship.
 type SponsorshipConnection struct {
 	// A list of edges.
-	Edges []*SponsorshipEdge `json:"edges,omitempty"`
+	Edges []*SponsorshipEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*Sponsorship `json:"nodes,omitempty"`
+	Nodes []*Sponsorship `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
-	// The total amount in cents of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships.
-	TotalRecurringMonthlyPriceInCents int `json:"totalRecurringMonthlyPriceInCents"`
-	// The total amount in USD of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships.
-	TotalRecurringMonthlyPriceInDollars int `json:"totalRecurringMonthlyPriceInDollars"`
 }
 
 // An edge in a connection.
@@ -13400,54 +11562,7 @@ type SponsorshipEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *Sponsorship `json:"node,omitempty"`
-}
-
-// An update sent to sponsors of a user or organization on GitHub Sponsors.
-type SponsorshipNewsletter struct {
-	// The contents of the newsletter, the message the sponsorable wanted to give.
-	Body string `json:"body"`
-	// Identifies the date and time when the object was created.
-	CreatedAt time.Time `json:"createdAt"`
-	ID        string    `json:"id"`
-	// Indicates if the newsletter has been made available to sponsors.
-	IsPublished bool `json:"isPublished"`
-	// The user or organization this newsletter is from.
-	Sponsorable Sponsorable `json:"sponsorable,omitempty"`
-	// The subject of the newsletter, what it's about.
-	Subject string `json:"subject"`
-	// Identifies the date and time when the object was last updated.
-	UpdatedAt time.Time `json:"updatedAt"`
-}
-
-func (SponsorshipNewsletter) IsNode() {}
-
-// The connection type for SponsorshipNewsletter.
-type SponsorshipNewsletterConnection struct {
-	// A list of edges.
-	Edges []*SponsorshipNewsletterEdge `json:"edges,omitempty"`
-	// A list of nodes.
-	Nodes []*SponsorshipNewsletter `json:"nodes,omitempty"`
-	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
-	// Identifies the total count of items in the connection.
-	TotalCount int `json:"totalCount"`
-}
-
-// An edge in a connection.
-type SponsorshipNewsletterEdge struct {
-	// A cursor for use in pagination.
-	Cursor string `json:"cursor"`
-	// The item at the end of the edge.
-	Node *SponsorshipNewsletter `json:"node,omitempty"`
-}
-
-// Ordering options for sponsorship newsletter connections.
-type SponsorshipNewsletterOrder struct {
-	// The field to order sponsorship newsletters by.
-	Field SponsorshipNewsletterOrderField `json:"field"`
-	// The ordering direction.
-	Direction OrderDirection `json:"direction"`
+	Node *Sponsorship `json:"node"`
 }
 
 // Ordering options for sponsorship connections.
@@ -13469,11 +11584,11 @@ type StarOrder struct {
 // The connection type for User.
 type StargazerConnection struct {
 	// A list of edges.
-	Edges []*StargazerEdge `json:"edges,omitempty"`
+	Edges []*StargazerEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*User `json:"nodes,omitempty"`
+	Nodes []*User `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -13482,7 +11597,7 @@ type StargazerConnection struct {
 type StargazerEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
-	Node   *User  `json:"node,omitempty"`
+	Node   *User  `json:"node"`
 	// Identifies when the item was starred.
 	StarredAt time.Time `json:"starredAt"`
 }
@@ -13490,13 +11605,13 @@ type StargazerEdge struct {
 // The connection type for Repository.
 type StarredRepositoryConnection struct {
 	// A list of edges.
-	Edges []*StarredRepositoryEdge `json:"edges,omitempty"`
+	Edges []*StarredRepositoryEdge `json:"edges"`
 	// Is the list of stars for this user truncated? This is true for users that have many stars.
 	IsOverLimit bool `json:"isOverLimit"`
 	// A list of nodes.
-	Nodes []*Repository `json:"nodes,omitempty"`
+	Nodes []*Repository `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -13505,53 +11620,21 @@ type StarredRepositoryConnection struct {
 type StarredRepositoryEdge struct {
 	// A cursor for use in pagination.
 	Cursor string      `json:"cursor"`
-	Node   *Repository `json:"node,omitempty"`
+	Node   *Repository `json:"node"`
 	// Identifies when the item was starred.
 	StarredAt time.Time `json:"starredAt"`
 }
 
-// Autogenerated input type of StartRepositoryMigration
-type StartRepositoryMigrationInput struct {
-	// The ID of the Octoshift migration source.
-	SourceID string `json:"sourceId"`
-	// The ID of the organization that will own the imported repository.
-	OwnerID string `json:"ownerId"`
-	// The Octoshift migration source repository URL.
-	SourceRepositoryURL string `json:"sourceRepositoryUrl"`
-	// The name of the imported repository.
-	RepositoryName string `json:"repositoryName"`
-	// Whether to continue the migration on error
-	ContinueOnError *bool `json:"continueOnError,omitempty"`
-	// The signed URL to access the user-uploaded git archive
-	GitArchiveURL *string `json:"gitArchiveUrl,omitempty"`
-	// The signed URL to access the user-uploaded metadata archive
-	MetadataArchiveURL *string `json:"metadataArchiveUrl,omitempty"`
-	// The Octoshift migration source access token.
-	AccessToken *string `json:"accessToken,omitempty"`
-	// The GitHub personal access token of the user importing to the target repository.
-	GithubPat *string `json:"githubPat,omitempty"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of StartRepositoryMigration
-type StartRepositoryMigrationPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The new Octoshift repository migration.
-	RepositoryMigration *RepositoryMigration `json:"repositoryMigration,omitempty"`
-}
-
 // Represents a commit status.
 type Status struct {
 	// A list of status contexts and check runs for this commit.
-	CombinedContexts *StatusCheckRollupContextConnection `json:"combinedContexts,omitempty"`
+	CombinedContexts *StatusCheckRollupContextConnection `json:"combinedContexts"`
 	// The commit this status is attached to.
-	Commit *Commit `json:"commit,omitempty"`
+	Commit *Commit `json:"commit"`
 	// Looks up an individual status context by context name.
-	Context *StatusContext `json:"context,omitempty"`
+	Context *StatusContext `json:"context"`
 	// The individual status contexts for this commit.
-	Contexts []*StatusContext `json:"contexts,omitempty"`
+	Contexts []*StatusContext `json:"contexts"`
 	ID       string           `json:"id"`
 	// The combined commit status.
 	State StatusState `json:"state"`
@@ -13562,9 +11645,9 @@ func (Status) IsNode() {}
 // Represents the rollup for both the check runs and status for a commit.
 type StatusCheckRollup struct {
 	// The commit the status and check runs are attached to.
-	Commit *Commit `json:"commit,omitempty"`
+	Commit *Commit `json:"commit"`
 	// A list of status contexts and check runs for this commit.
-	Contexts *StatusCheckRollupContextConnection `json:"contexts,omitempty"`
+	Contexts *StatusCheckRollupContextConnection `json:"contexts"`
 	ID       string                              `json:"id"`
 	// The combined status for the commit.
 	State StatusState `json:"state"`
@@ -13575,11 +11658,11 @@ func (StatusCheckRollup) IsNode() {}
 // The connection type for StatusCheckRollupContext.
 type StatusCheckRollupContextConnection struct {
 	// A list of edges.
-	Edges []*StatusCheckRollupContextEdge `json:"edges,omitempty"`
+	Edges []*StatusCheckRollupContextEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []StatusCheckRollupContext `json:"nodes,omitempty"`
+	Nodes []StatusCheckRollupContext `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -13589,62 +11672,62 @@ type StatusCheckRollupContextEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node StatusCheckRollupContext `json:"node,omitempty"`
+	Node StatusCheckRollupContext `json:"node"`
 }
 
 // Represents an individual commit status context
 type StatusContext struct {
 	// The avatar of the OAuth application or the user that created the status
-	AvatarURL *string `json:"avatarUrl,omitempty"`
+	AvatarURL *string `json:"avatarUrl"`
 	// This commit this status context is attached to.
-	Commit *Commit `json:"commit,omitempty"`
+	Commit *Commit `json:"commit"`
 	// The name of this status context.
 	Context string `json:"context"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// The actor who created this status context.
-	Creator Actor `json:"creator,omitempty"`
+	Creator Actor `json:"creator"`
 	// The description for this status context.
-	Description *string `json:"description,omitempty"`
+	Description *string `json:"description"`
 	ID          string  `json:"id"`
 	// Whether this is required to pass before merging for a specific pull request.
 	IsRequired bool `json:"isRequired"`
 	// The state of this status context.
 	State StatusState `json:"state"`
 	// The URL for this status context.
-	TargetURL *string `json:"targetUrl,omitempty"`
+	TargetURL *string `json:"targetUrl"`
 }
 
 func (StatusContext) IsStatusCheckRollupContext() {}
-func (StatusContext) IsRequirableByPullRequest()  {}
 func (StatusContext) IsNode()                     {}
+func (StatusContext) IsRequirableByPullRequest()  {}
 
 // Autogenerated input type of SubmitPullRequestReview
 type SubmitPullRequestReviewInput struct {
 	// The Pull Request ID to submit any pending reviews.
-	PullRequestID *string `json:"pullRequestId,omitempty"`
+	PullRequestID *string `json:"pullRequestId"`
 	// The Pull Request Review ID to submit.
-	PullRequestReviewID *string `json:"pullRequestReviewId,omitempty"`
+	PullRequestReviewID *string `json:"pullRequestReviewId"`
 	// The event to send to the Pull Request Review.
 	Event PullRequestReviewEvent `json:"event"`
 	// The text field to set on the Pull Request Review.
-	Body *string `json:"body,omitempty"`
+	Body *string `json:"body"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of SubmitPullRequestReview
 type SubmitPullRequestReviewPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The submitted pull request review.
-	PullRequestReview *PullRequestReview `json:"pullRequestReview,omitempty"`
+	PullRequestReview *PullRequestReview `json:"pullRequestReview"`
 }
 
 // A pointer to a repository at a specific revision embedded inside another repository.
 type Submodule struct {
 	// The branch of the upstream submodule for tracking updates
-	Branch *string `json:"branch,omitempty"`
+	Branch *string `json:"branch"`
 	// The git URL of the submodule repository
 	GitURL string `json:"gitUrl"`
 	// The name of the submodule in .gitmodules
@@ -13652,17 +11735,17 @@ type Submodule struct {
 	// The path in the superproject that this submodule is located in
 	Path string `json:"path"`
 	// The commit revision of the subproject repository being tracked by the submodule
-	SubprojectCommitOid *string `json:"subprojectCommitOid,omitempty"`
+	SubprojectCommitOid *string `json:"subprojectCommitOid"`
 }
 
 // The connection type for Submodule.
 type SubmoduleConnection struct {
 	// A list of edges.
-	Edges []*SubmoduleEdge `json:"edges,omitempty"`
+	Edges []*SubmoduleEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*Submodule `json:"nodes,omitempty"`
+	Nodes []*Submodule `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -13672,25 +11755,25 @@ type SubmoduleEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *Submodule `json:"node,omitempty"`
+	Node *Submodule `json:"node"`
 }
 
 // Represents a 'subscribed' event on a given `Subscribable`.
 type SubscribedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
 	// Object referenced by event.
-	Subscribable Subscribable `json:"subscribable,omitempty"`
+	Subscribable Subscribable `json:"subscribable"`
 }
 
-func (SubscribedEvent) IsIssueTimelineItems()       {}
+func (SubscribedEvent) IsNode()                     {}
 func (SubscribedEvent) IsPullRequestTimelineItems() {}
-func (SubscribedEvent) IsPullRequestTimelineItem()  {}
+func (SubscribedEvent) IsIssueTimelineItems()       {}
 func (SubscribedEvent) IsIssueTimelineItem()        {}
-func (SubscribedEvent) IsNode()                     {}
+func (SubscribedEvent) IsPullRequestTimelineItem()  {}
 
 // A suggestion to review a pull request based on a user's commit history and review comments.
 type SuggestedReviewer struct {
@@ -13699,7 +11782,7 @@ type SuggestedReviewer struct {
 	// Is this suggestion based on past review comments?
 	IsCommenter bool `json:"isCommenter"`
 	// Identifies the user suggested to review the pull request.
-	Reviewer *User `json:"reviewer,omitempty"`
+	Reviewer *User `json:"reviewer"`
 }
 
 // Represents a Git tag.
@@ -13712,17 +11795,17 @@ type Tag struct {
 	CommitURL string `json:"commitUrl"`
 	ID        string `json:"id"`
 	// The Git tag message.
-	Message *string `json:"message,omitempty"`
+	Message *string `json:"message"`
 	// The Git tag name.
 	Name string `json:"name"`
 	// The Git object ID
 	Oid string `json:"oid"`
 	// The Repository the Git object belongs to
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// Details about the tag author.
-	Tagger *GitActor `json:"tagger,omitempty"`
+	Tagger *GitActor `json:"tagger"`
 	// The Git object the tag points to.
-	Target GitObject `json:"target,omitempty"`
+	Target GitObject `json:"target"`
 }
 
 func (Tag) IsNode()      {}
@@ -13731,23 +11814,23 @@ func (Tag) IsGitObject() {}
 // A team of users in an organization.
 type Team struct {
 	// A list of teams that are ancestors of this team.
-	Ancestors *TeamConnection `json:"ancestors,omitempty"`
+	Ancestors *TeamConnection `json:"ancestors"`
 	// A URL pointing to the team's avatar.
-	AvatarURL *string `json:"avatarUrl,omitempty"`
+	AvatarURL *string `json:"avatarUrl"`
 	// List of child teams belonging to this team
-	ChildTeams *TeamConnection `json:"childTeams,omitempty"`
+	ChildTeams *TeamConnection `json:"childTeams"`
 	// The slug corresponding to the organization and team.
 	CombinedSlug string `json:"combinedSlug"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
+	DatabaseID *int `json:"databaseId"`
 	// The description of the team.
-	Description *string `json:"description,omitempty"`
+	Description *string `json:"description"`
 	// Find a team discussion by its number.
-	Discussion *TeamDiscussion `json:"discussion,omitempty"`
+	Discussion *TeamDiscussion `json:"discussion"`
 	// A list of team discussions.
-	Discussions *TeamDiscussionConnection `json:"discussions,omitempty"`
+	Discussions *TeamDiscussionConnection `json:"discussions"`
 	// The HTTP path for team discussions
 	DiscussionsResourcePath string `json:"discussionsResourcePath"`
 	// The HTTP URL for team discussions
@@ -13758,11 +11841,11 @@ type Team struct {
 	EditTeamURL string `json:"editTeamUrl"`
 	ID          string `json:"id"`
 	// A list of pending invitations for users to this team
-	Invitations *OrganizationInvitationConnection `json:"invitations,omitempty"`
+	Invitations *OrganizationInvitationConnection `json:"invitations"`
 	// Get the status messages members of this entity have set that are either public or visible only to the organization.
-	MemberStatuses *UserStatusConnection `json:"memberStatuses,omitempty"`
+	MemberStatuses *UserStatusConnection `json:"memberStatuses"`
 	// A list of users who are members of this team.
-	Members *TeamMemberConnection `json:"members,omitempty"`
+	Members *TeamMemberConnection `json:"members"`
 	// The HTTP path for the team' members
 	MembersResourcePath string `json:"membersResourcePath"`
 	// The HTTP URL for the team' members
@@ -13774,13 +11857,13 @@ type Team struct {
 	// The HTTP URL creating a new team
 	NewTeamURL string `json:"newTeamUrl"`
 	// The organization that owns this team.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The parent team of the team.
-	ParentTeam *Team `json:"parentTeam,omitempty"`
+	ParentTeam *Team `json:"parentTeam"`
 	// The level of privacy the team has.
 	Privacy TeamPrivacy `json:"privacy"`
 	// A list of repositories this team has access to.
-	Repositories *TeamRepositoryConnection `json:"repositories,omitempty"`
+	Repositories *TeamRepositoryConnection `json:"repositories"`
 	// The HTTP path for this team's repositories
 	RepositoriesResourcePath string `json:"repositoriesResourcePath"`
 	// The HTTP URL for this team's repositories
@@ -13802,15 +11885,13 @@ type Team struct {
 	// Check if the viewer is able to change their subscription status for the repository.
 	ViewerCanSubscribe bool `json:"viewerCanSubscribe"`
 	// Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
-	ViewerSubscription *SubscriptionState `json:"viewerSubscription,omitempty"`
+	ViewerSubscription *SubscriptionState `json:"viewerSubscription"`
 }
 
-func (Team) IsDeploymentReviewer()            {}
-func (Team) IsRequestedReviewer()             {}
-func (Team) IsBranchActorAllowanceActor()     {}
+func (Team) IsPushAllowanceActor()            {}
 func (Team) IsReviewDismissalAllowanceActor() {}
 func (Team) IsPermissionGranter()             {}
-func (Team) IsPushAllowanceActor()            {}
+func (Team) IsRequestedReviewer()             {}
 func (Team) IsNode()                          {}
 func (Team) IsSubscribable()                  {}
 func (Team) IsMemberStatusable()              {}
@@ -13820,48 +11901,48 @@ type TeamAddMemberAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// Whether the team was mapped to an LDAP Group.
-	IsLdapMapped *bool `json:"isLdapMapped,omitempty"`
+	IsLdapMapped *bool `json:"isLdapMapped"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The team associated with the action
-	Team *Team `json:"team,omitempty"`
+	Team *Team `json:"team"`
 	// The name of the team
-	TeamName *string `json:"teamName,omitempty"`
+	TeamName *string `json:"teamName"`
 	// The HTTP path for this team
-	TeamResourcePath *string `json:"teamResourcePath,omitempty"`
+	TeamResourcePath *string `json:"teamResourcePath"`
 	// The HTTP URL for this team
-	TeamURL *string `json:"teamUrl,omitempty"`
+	TeamURL *string `json:"teamUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (TeamAddMemberAuditEntry) IsNode()                       {}
@@ -13875,128 +11956,128 @@ type TeamAddRepositoryAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// Whether the team was mapped to an LDAP Group.
-	IsLdapMapped *bool `json:"isLdapMapped,omitempty"`
+	IsLdapMapped *bool `json:"isLdapMapped"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The repository associated with the action
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The name of the repository
-	RepositoryName *string `json:"repositoryName,omitempty"`
+	RepositoryName *string `json:"repositoryName"`
 	// The HTTP path for the repository
-	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
+	RepositoryResourcePath *string `json:"repositoryResourcePath"`
 	// The HTTP URL for the repository
-	RepositoryURL *string `json:"repositoryUrl,omitempty"`
+	RepositoryURL *string `json:"repositoryUrl"`
 	// The team associated with the action
-	Team *Team `json:"team,omitempty"`
+	Team *Team `json:"team"`
 	// The name of the team
-	TeamName *string `json:"teamName,omitempty"`
+	TeamName *string `json:"teamName"`
 	// The HTTP path for this team
-	TeamResourcePath *string `json:"teamResourcePath,omitempty"`
+	TeamResourcePath *string `json:"teamResourcePath"`
 	// The HTTP URL for this team
-	TeamURL *string `json:"teamUrl,omitempty"`
+	TeamURL *string `json:"teamUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
+func (TeamAddRepositoryAuditEntry) IsOrganizationAuditEntry()     {}
 func (TeamAddRepositoryAuditEntry) IsNode()                       {}
 func (TeamAddRepositoryAuditEntry) IsAuditEntry()                 {}
 func (TeamAddRepositoryAuditEntry) IsOrganizationAuditEntryData() {}
 func (TeamAddRepositoryAuditEntry) IsRepositoryAuditEntryData()   {}
 func (TeamAddRepositoryAuditEntry) IsTeamAuditEntryData()         {}
-func (TeamAddRepositoryAuditEntry) IsOrganizationAuditEntry()     {}
 
 // Audit log entry for a team.change_parent_team event.
 type TeamChangeParentTeamAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// Whether the team was mapped to an LDAP Group.
-	IsLdapMapped *bool `json:"isLdapMapped,omitempty"`
+	IsLdapMapped *bool `json:"isLdapMapped"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The new parent team.
-	ParentTeam *Team `json:"parentTeam,omitempty"`
+	ParentTeam *Team `json:"parentTeam"`
 	// The name of the new parent team
-	ParentTeamName *string `json:"parentTeamName,omitempty"`
+	ParentTeamName *string `json:"parentTeamName"`
 	// The name of the former parent team
-	ParentTeamNameWas *string `json:"parentTeamNameWas,omitempty"`
+	ParentTeamNameWas *string `json:"parentTeamNameWas"`
 	// The HTTP path for the parent team
-	ParentTeamResourcePath *string `json:"parentTeamResourcePath,omitempty"`
+	ParentTeamResourcePath *string `json:"parentTeamResourcePath"`
 	// The HTTP URL for the parent team
-	ParentTeamURL *string `json:"parentTeamUrl,omitempty"`
+	ParentTeamURL *string `json:"parentTeamUrl"`
 	// The former parent team.
-	ParentTeamWas *Team `json:"parentTeamWas,omitempty"`
+	ParentTeamWas *Team `json:"parentTeamWas"`
 	// The HTTP path for the previous parent team
-	ParentTeamWasResourcePath *string `json:"parentTeamWasResourcePath,omitempty"`
+	ParentTeamWasResourcePath *string `json:"parentTeamWasResourcePath"`
 	// The HTTP URL for the previous parent team
-	ParentTeamWasURL *string `json:"parentTeamWasUrl,omitempty"`
+	ParentTeamWasURL *string `json:"parentTeamWasUrl"`
 	// The team associated with the action
-	Team *Team `json:"team,omitempty"`
+	Team *Team `json:"team"`
 	// The name of the team
-	TeamName *string `json:"teamName,omitempty"`
+	TeamName *string `json:"teamName"`
 	// The HTTP path for this team
-	TeamResourcePath *string `json:"teamResourcePath,omitempty"`
+	TeamResourcePath *string `json:"teamResourcePath"`
 	// The HTTP URL for this team
-	TeamURL *string `json:"teamUrl,omitempty"`
+	TeamURL *string `json:"teamUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (TeamChangeParentTeamAuditEntry) IsNode()                       {}
@@ -14008,11 +12089,11 @@ func (TeamChangeParentTeamAuditEntry) IsOrganizationAuditEntry()     {}
 // The connection type for Team.
 type TeamConnection struct {
 	// A list of edges.
-	Edges []*TeamEdge `json:"edges,omitempty"`
+	Edges []*TeamEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*Team `json:"nodes,omitempty"`
+	Nodes []*Team `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -14020,7 +12101,7 @@ type TeamConnection struct {
 // A team discussion.
 type TeamDiscussion struct {
 	// The actor who authored the comment.
-	Author Actor `json:"author,omitempty"`
+	Author Actor `json:"author"`
 	// Author's association with the discussion's team.
 	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation"`
 	// The body as Markdown.
@@ -14032,7 +12113,7 @@ type TeamDiscussion struct {
 	// Identifies the discussion body hash.
 	BodyVersion string `json:"bodyVersion"`
 	// A list of comments on this discussion.
-	Comments *TeamDiscussionCommentConnection `json:"comments,omitempty"`
+	Comments *TeamDiscussionCommentConnection `json:"comments"`
 	// The HTTP path for discussion comments
 	CommentsResourcePath string `json:"commentsResourcePath"`
 	// The HTTP URL for discussion comments
@@ -14042,9 +12123,9 @@ type TeamDiscussion struct {
 	// Check if this comment was created via an email reply.
 	CreatedViaEmail bool `json:"createdViaEmail"`
 	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
+	DatabaseID *int `json:"databaseId"`
 	// The actor who edited the comment.
-	Editor Actor  `json:"editor,omitempty"`
+	Editor Actor  `json:"editor"`
 	ID     string `json:"id"`
 	// Check if this comment was edited and includes an edit with the creation data
 	IncludesCreatedEdit bool `json:"includesCreatedEdit"`
@@ -14053,19 +12134,19 @@ type TeamDiscussion struct {
 	// Whether or not the discussion is only visible to team members and org admins.
 	IsPrivate bool `json:"isPrivate"`
 	// The moment the editor made the last edit
-	LastEditedAt *time.Time `json:"lastEditedAt,omitempty"`
+	LastEditedAt *time.Time `json:"lastEditedAt"`
 	// Identifies the discussion within its team.
 	Number int `json:"number"`
 	// Identifies when the comment was published at.
-	PublishedAt *time.Time `json:"publishedAt,omitempty"`
+	PublishedAt *time.Time `json:"publishedAt"`
 	// A list of reactions grouped by content left on the subject.
-	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`
+	ReactionGroups []*ReactionGroup `json:"reactionGroups"`
 	// A list of Reactions left on the Issue.
-	Reactions *ReactionConnection `json:"reactions,omitempty"`
+	Reactions *ReactionConnection `json:"reactions"`
 	// The HTTP path for this discussion
 	ResourcePath string `json:"resourcePath"`
 	// The team that defines the context of this discussion.
-	Team *Team `json:"team,omitempty"`
+	Team *Team `json:"team"`
 	// The title of the discussion
 	Title string `json:"title"`
 	// Identifies the date and time when the object was last updated.
@@ -14073,7 +12154,7 @@ type TeamDiscussion struct {
 	// The HTTP URL for this discussion
 	URL string `json:"url"`
 	// A list of edits to this content.
-	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`
+	UserContentEdits *UserContentEditConnection `json:"userContentEdits"`
 	// Check if the current viewer can delete this object.
 	ViewerCanDelete bool `json:"viewerCanDelete"`
 	// Whether or not the current viewer can pin this discussion.
@@ -14085,11 +12166,11 @@ type TeamDiscussion struct {
 	// Check if the current viewer can update this object.
 	ViewerCanUpdate bool `json:"viewerCanUpdate"`
 	// Reasons why the current viewer can not update this comment.
-	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons,omitempty"`
+	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons"`
 	// Did the viewer author this comment.
 	ViewerDidAuthor bool `json:"viewerDidAuthor"`
 	// Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
-	ViewerSubscription *SubscriptionState `json:"viewerSubscription,omitempty"`
+	ViewerSubscription *SubscriptionState `json:"viewerSubscription"`
 }
 
 func (TeamDiscussion) IsNode()                     {}
@@ -14104,7 +12185,7 @@ func (TeamDiscussion) IsUpdatableComment()         {}
 // A comment on a team discussion.
 type TeamDiscussionComment struct {
 	// The actor who authored the comment.
-	Author Actor `json:"author,omitempty"`
+	Author Actor `json:"author"`
 	// Author's association with the comment's team.
 	AuthorAssociation CommentAuthorAssociation `json:"authorAssociation"`
 	// The body as Markdown.
@@ -14120,24 +12201,24 @@ type TeamDiscussionComment struct {
 	// Check if this comment was created via an email reply.
 	CreatedViaEmail bool `json:"createdViaEmail"`
 	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
+	DatabaseID *int `json:"databaseId"`
 	// The discussion this comment is about.
-	Discussion *TeamDiscussion `json:"discussion,omitempty"`
+	Discussion *TeamDiscussion `json:"discussion"`
 	// The actor who edited the comment.
-	Editor Actor  `json:"editor,omitempty"`
+	Editor Actor  `json:"editor"`
 	ID     string `json:"id"`
 	// Check if this comment was edited and includes an edit with the creation data
 	IncludesCreatedEdit bool `json:"includesCreatedEdit"`
 	// The moment the editor made the last edit
-	LastEditedAt *time.Time `json:"lastEditedAt,omitempty"`
+	LastEditedAt *time.Time `json:"lastEditedAt"`
 	// Identifies the comment number.
 	Number int `json:"number"`
 	// Identifies when the comment was published at.
-	PublishedAt *time.Time `json:"publishedAt,omitempty"`
+	PublishedAt *time.Time `json:"publishedAt"`
 	// A list of reactions grouped by content left on the subject.
-	ReactionGroups []*ReactionGroup `json:"reactionGroups,omitempty"`
+	ReactionGroups []*ReactionGroup `json:"reactionGroups"`
 	// A list of Reactions left on the Issue.
-	Reactions *ReactionConnection `json:"reactions,omitempty"`
+	Reactions *ReactionConnection `json:"reactions"`
 	// The HTTP path for this comment
 	ResourcePath string `json:"resourcePath"`
 	// Identifies the date and time when the object was last updated.
@@ -14145,7 +12226,7 @@ type TeamDiscussionComment struct {
 	// The HTTP URL for this comment
 	URL string `json:"url"`
 	// A list of edits to this content.
-	UserContentEdits *UserContentEditConnection `json:"userContentEdits,omitempty"`
+	UserContentEdits *UserContentEditConnection `json:"userContentEdits"`
 	// Check if the current viewer can delete this object.
 	ViewerCanDelete bool `json:"viewerCanDelete"`
 	// Can user react to this subject
@@ -14153,7 +12234,7 @@ type TeamDiscussionComment struct {
 	// Check if the current viewer can update this object.
 	ViewerCanUpdate bool `json:"viewerCanUpdate"`
 	// Reasons why the current viewer can not update this comment.
-	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons,omitempty"`
+	ViewerCannotUpdateReasons []CommentCannotUpdateReason `json:"viewerCannotUpdateReasons"`
 	// Did the viewer author this comment.
 	ViewerDidAuthor bool `json:"viewerDidAuthor"`
 }
@@ -14169,11 +12250,11 @@ func (TeamDiscussionComment) IsUpdatableComment()         {}
 // The connection type for TeamDiscussionComment.
 type TeamDiscussionCommentConnection struct {
 	// A list of edges.
-	Edges []*TeamDiscussionCommentEdge `json:"edges,omitempty"`
+	Edges []*TeamDiscussionCommentEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*TeamDiscussionComment `json:"nodes,omitempty"`
+	Nodes []*TeamDiscussionComment `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -14183,7 +12264,7 @@ type TeamDiscussionCommentEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *TeamDiscussionComment `json:"node,omitempty"`
+	Node *TeamDiscussionComment `json:"node"`
 }
 
 // Ways in which team discussion comment connections can be ordered.
@@ -14197,11 +12278,11 @@ type TeamDiscussionCommentOrder struct {
 // The connection type for TeamDiscussion.
 type TeamDiscussionConnection struct {
 	// A list of edges.
-	Edges []*TeamDiscussionEdge `json:"edges,omitempty"`
+	Edges []*TeamDiscussionEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*TeamDiscussion `json:"nodes,omitempty"`
+	Nodes []*TeamDiscussion `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -14211,7 +12292,7 @@ type TeamDiscussionEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *TeamDiscussion `json:"node,omitempty"`
+	Node *TeamDiscussion `json:"node"`
 }
 
 // Ways in which team discussion connections can be ordered.
@@ -14227,17 +12308,17 @@ type TeamEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *Team `json:"node,omitempty"`
+	Node *Team `json:"node"`
 }
 
 // The connection type for User.
 type TeamMemberConnection struct {
 	// A list of edges.
-	Edges []*TeamMemberEdge `json:"edges,omitempty"`
+	Edges []*TeamMemberEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*User `json:"nodes,omitempty"`
+	Nodes []*User `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -14250,7 +12331,7 @@ type TeamMemberEdge struct {
 	MemberAccessResourcePath string `json:"memberAccessResourcePath"`
 	// The HTTP URL to the organization's member access page.
 	MemberAccessURL string `json:"memberAccessUrl"`
-	Node            *User  `json:"node,omitempty"`
+	Node            *User  `json:"node"`
 	// The role the member has on the team.
 	Role TeamMemberRole `json:"role"`
 }
@@ -14276,48 +12357,48 @@ type TeamRemoveMemberAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// Whether the team was mapped to an LDAP Group.
-	IsLdapMapped *bool `json:"isLdapMapped,omitempty"`
+	IsLdapMapped *bool `json:"isLdapMapped"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The team associated with the action
-	Team *Team `json:"team,omitempty"`
+	Team *Team `json:"team"`
 	// The name of the team
-	TeamName *string `json:"teamName,omitempty"`
+	TeamName *string `json:"teamName"`
 	// The HTTP path for this team
-	TeamResourcePath *string `json:"teamResourcePath,omitempty"`
+	TeamResourcePath *string `json:"teamResourcePath"`
 	// The HTTP URL for this team
-	TeamURL *string `json:"teamUrl,omitempty"`
+	TeamURL *string `json:"teamUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (TeamRemoveMemberAuditEntry) IsNode()                       {}
@@ -14331,56 +12412,56 @@ type TeamRemoveRepositoryAuditEntry struct {
 	// The action name
 	Action string `json:"action"`
 	// The user who initiated the action
-	Actor AuditEntryActor `json:"actor,omitempty"`
+	Actor AuditEntryActor `json:"actor"`
 	// The IP address of the actor
-	ActorIP *string `json:"actorIp,omitempty"`
+	ActorIP *string `json:"actorIp"`
 	// A readable representation of the actor's location
-	ActorLocation *ActorLocation `json:"actorLocation,omitempty"`
+	ActorLocation *ActorLocation `json:"actorLocation"`
 	// The username of the user who initiated the action
-	ActorLogin *string `json:"actorLogin,omitempty"`
+	ActorLogin *string `json:"actorLogin"`
 	// The HTTP path for the actor.
-	ActorResourcePath *string `json:"actorResourcePath,omitempty"`
+	ActorResourcePath *string `json:"actorResourcePath"`
 	// The HTTP URL for the actor.
-	ActorURL *string `json:"actorUrl,omitempty"`
+	ActorURL *string `json:"actorUrl"`
 	// The time the action was initiated
 	CreatedAt string `json:"createdAt"`
 	ID        string `json:"id"`
 	// Whether the team was mapped to an LDAP Group.
-	IsLdapMapped *bool `json:"isLdapMapped,omitempty"`
+	IsLdapMapped *bool `json:"isLdapMapped"`
 	// The corresponding operation type for the action
-	OperationType *OperationType `json:"operationType,omitempty"`
+	OperationType *OperationType `json:"operationType"`
 	// The Organization associated with the Audit Entry.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// The name of the Organization.
-	OrganizationName *string `json:"organizationName,omitempty"`
+	OrganizationName *string `json:"organizationName"`
 	// The HTTP path for the organization
-	OrganizationResourcePath *string `json:"organizationResourcePath,omitempty"`
+	OrganizationResourcePath *string `json:"organizationResourcePath"`
 	// The HTTP URL for the organization
-	OrganizationURL *string `json:"organizationUrl,omitempty"`
+	OrganizationURL *string `json:"organizationUrl"`
 	// The repository associated with the action
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The name of the repository
-	RepositoryName *string `json:"repositoryName,omitempty"`
+	RepositoryName *string `json:"repositoryName"`
 	// The HTTP path for the repository
-	RepositoryResourcePath *string `json:"repositoryResourcePath,omitempty"`
+	RepositoryResourcePath *string `json:"repositoryResourcePath"`
 	// The HTTP URL for the repository
-	RepositoryURL *string `json:"repositoryUrl,omitempty"`
+	RepositoryURL *string `json:"repositoryUrl"`
 	// The team associated with the action
-	Team *Team `json:"team,omitempty"`
+	Team *Team `json:"team"`
 	// The name of the team
-	TeamName *string `json:"teamName,omitempty"`
+	TeamName *string `json:"teamName"`
 	// The HTTP path for this team
-	TeamResourcePath *string `json:"teamResourcePath,omitempty"`
+	TeamResourcePath *string `json:"teamResourcePath"`
 	// The HTTP URL for this team
-	TeamURL *string `json:"teamUrl,omitempty"`
+	TeamURL *string `json:"teamUrl"`
 	// The user affected by the action
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 	// For actions involving two users, the actor is the initiator and the user is the affected user.
-	UserLogin *string `json:"userLogin,omitempty"`
+	UserLogin *string `json:"userLogin"`
 	// The HTTP path for the user.
-	UserResourcePath *string `json:"userResourcePath,omitempty"`
+	UserResourcePath *string `json:"userResourcePath"`
 	// The HTTP URL for the user.
-	UserURL *string `json:"userUrl,omitempty"`
+	UserURL *string `json:"userUrl"`
 }
 
 func (TeamRemoveRepositoryAuditEntry) IsNode()                       {}
@@ -14393,11 +12474,11 @@ func (TeamRemoveRepositoryAuditEntry) IsOrganizationAuditEntry()     {}
 // The connection type for Repository.
 type TeamRepositoryConnection struct {
 	// A list of edges.
-	Edges []*TeamRepositoryEdge `json:"edges,omitempty"`
+	Edges []*TeamRepositoryEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*Repository `json:"nodes,omitempty"`
+	Nodes []*Repository `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -14406,7 +12487,7 @@ type TeamRepositoryConnection struct {
 type TeamRepositoryEdge struct {
 	// A cursor for use in pagination.
 	Cursor string      `json:"cursor"`
-	Node   *Repository `json:"node,omitempty"`
+	Node   *Repository `json:"node"`
 	// The permission level the team has on the repository
 	Permission RepositoryPermission `json:"permission"`
 }
@@ -14424,7 +12505,7 @@ type TextMatch struct {
 	// The specific text fragment within the property matched on.
 	Fragment string `json:"fragment"`
 	// Highlights within the matched fragment.
-	Highlights []*TextMatchHighlight `json:"highlights,omitempty"`
+	Highlights []*TextMatchHighlight `json:"highlights"`
 	// The property matched on.
 	Property string `json:"property"`
 }
@@ -14447,14 +12528,12 @@ type Topic struct {
 	// A list of related topics, including aliases of this topic, sorted with the most relevant
 	// first. Returns up to 10 Topics.
 	//
-	RelatedTopics []*Topic `json:"relatedTopics,omitempty"`
-	// A list of repositories.
-	Repositories *RepositoryConnection `json:"repositories,omitempty"`
+	RelatedTopics []*Topic `json:"relatedTopics"`
 	// Returns a count of how many stargazers there are on this object
 	//
 	StargazerCount int `json:"stargazerCount"`
 	// A list of users who have starred this starrable.
-	Stargazers *StargazerConnection `json:"stargazers,omitempty"`
+	Stargazers *StargazerConnection `json:"stargazers"`
 	// Returns a boolean indicating whether the viewing user has starred this starrable.
 	ViewerHasStarred bool `json:"viewerHasStarred"`
 }
@@ -14469,34 +12548,34 @@ type TransferIssueInput struct {
 	// The Node ID of the repository the issue should be transferred to
 	RepositoryID string `json:"repositoryId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of TransferIssue
 type TransferIssuePayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The issue that was transferred
-	Issue *Issue `json:"issue,omitempty"`
+	Issue *Issue `json:"issue"`
 }
 
 // Represents a 'transferred' event on a given issue or pull request.
 type TransferredEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// The repository this came from
-	FromRepository *Repository `json:"fromRepository,omitempty"`
+	FromRepository *Repository `json:"fromRepository"`
 	ID             string      `json:"id"`
 	// Identifies the issue associated with the event.
-	Issue *Issue `json:"issue,omitempty"`
+	Issue *Issue `json:"issue"`
 }
 
-func (TransferredEvent) IsIssueTimelineItems()       {}
 func (TransferredEvent) IsPullRequestTimelineItems() {}
-func (TransferredEvent) IsIssueTimelineItem()        {}
+func (TransferredEvent) IsIssueTimelineItems()       {}
 func (TransferredEvent) IsNode()                     {}
+func (TransferredEvent) IsIssueTimelineItem()        {}
 
 // Represents a Git tree.
 type Tree struct {
@@ -14507,12 +12586,12 @@ type Tree struct {
 	// The HTTP URL for this Git object
 	CommitURL string `json:"commitUrl"`
 	// A list of tree entries.
-	Entries []*TreeEntry `json:"entries,omitempty"`
+	Entries []*TreeEntry `json:"entries"`
 	ID      string       `json:"id"`
 	// The Git object ID
 	Oid string `json:"oid"`
 	// The Repository the Git object belongs to
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 }
 
 func (Tree) IsNode()      {}
@@ -14521,7 +12600,7 @@ func (Tree) IsGitObject() {}
 // Represents a Git tree entry.
 type TreeEntry struct {
 	// The extension of the file
-	Extension *string `json:"extension,omitempty"`
+	Extension *string `json:"extension"`
 	// Whether or not this tree entry is generated
 	IsGenerated bool `json:"isGenerated"`
 	// Entry file mode.
@@ -14529,15 +12608,15 @@ type TreeEntry struct {
 	// Entry file name.
 	Name string `json:"name"`
 	// Entry file object.
-	Object GitObject `json:"object,omitempty"`
+	Object GitObject `json:"object"`
 	// Entry file Git object ID.
 	Oid string `json:"oid"`
 	// The full path of the file.
-	Path *string `json:"path,omitempty"`
+	Path *string `json:"path"`
 	// The Repository the tree entry belongs to
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 	// If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
-	Submodule *Submodule `json:"submodule,omitempty"`
+	Submodule *Submodule `json:"submodule"`
 	// Entry file type.
 	Type string `json:"type"`
 }
@@ -14547,52 +12626,52 @@ type UnarchiveRepositoryInput struct {
 	// The ID of the repository to unarchive.
 	RepositoryID string `json:"repositoryId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UnarchiveRepository
 type UnarchiveRepositoryPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The repository that was unarchived.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 }
 
 // Represents an 'unassigned' event on any assignable object.
 type UnassignedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the assignable associated with the event.
-	Assignable Assignable `json:"assignable,omitempty"`
+	Assignable Assignable `json:"assignable"`
 	// Identifies the user or mannequin that was unassigned.
-	Assignee Assignee `json:"assignee,omitempty"`
+	Assignee Assignee `json:"assignee"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
 	// Identifies the subject (user) who was unassigned.
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 }
 
-func (UnassignedEvent) IsIssueTimelineItems()       {}
 func (UnassignedEvent) IsPullRequestTimelineItems() {}
-func (UnassignedEvent) IsPullRequestTimelineItem()  {}
-func (UnassignedEvent) IsIssueTimelineItem()        {}
+func (UnassignedEvent) IsIssueTimelineItems()       {}
 func (UnassignedEvent) IsNode()                     {}
+func (UnassignedEvent) IsIssueTimelineItem()        {}
+func (UnassignedEvent) IsPullRequestTimelineItem()  {}
 
 // Autogenerated input type of UnfollowUser
 type UnfollowUserInput struct {
 	// ID of the user to unfollow.
 	UserID string `json:"userId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UnfollowUser
 type UnfollowUserPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The user that was unfollowed.
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 }
 
 // Represents an unknown signature on a Commit or Tag.
@@ -14606,7 +12685,7 @@ type UnknownSignature struct {
 	// ASCII-armored signature header from object.
 	Signature string `json:"signature"`
 	// GitHub user corresponding to the email signing this commit.
-	Signer *User `json:"signer,omitempty"`
+	Signer *User `json:"signer"`
 	// The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
 	State GitSignatureState `json:"state"`
 	// True if the signature was made with GitHub's signing key.
@@ -14618,20 +12697,20 @@ func (UnknownSignature) IsGitSignature() {}
 // Represents an 'unlabeled' event on a given issue or pull request.
 type UnlabeledEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
 	// Identifies the label associated with the 'unlabeled' event.
-	Label *Label `json:"label,omitempty"`
+	Label *Label `json:"label"`
 	// Identifies the `Labelable` associated with the event.
-	Labelable Labelable `json:"labelable,omitempty"`
+	Labelable Labelable `json:"labelable"`
 }
 
-func (UnlabeledEvent) IsIssueTimelineItems()       {}
 func (UnlabeledEvent) IsPullRequestTimelineItems() {}
-func (UnlabeledEvent) IsPullRequestTimelineItem()  {}
+func (UnlabeledEvent) IsIssueTimelineItems()       {}
 func (UnlabeledEvent) IsIssueTimelineItem()        {}
+func (UnlabeledEvent) IsPullRequestTimelineItem()  {}
 func (UnlabeledEvent) IsNode()                     {}
 
 // Autogenerated input type of UnlinkRepositoryFromProject
@@ -14641,17 +12720,17 @@ type UnlinkRepositoryFromProjectInput struct {
 	// The ID of the Repository linked to the Project.
 	RepositoryID string `json:"repositoryId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UnlinkRepositoryFromProject
 type UnlinkRepositoryFromProjectPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The linked Project.
-	Project *Project `json:"project,omitempty"`
+	Project *Project `json:"project"`
 	// The linked Repository.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 }
 
 // Autogenerated input type of UnlockLockable
@@ -14659,51 +12738,35 @@ type UnlockLockableInput struct {
 	// ID of the item to be unlocked.
 	LockableID string `json:"lockableId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UnlockLockable
 type UnlockLockablePayload struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The item that was unlocked.
-	UnlockedRecord Lockable `json:"unlockedRecord,omitempty"`
+	UnlockedRecord Lockable `json:"unlockedRecord"`
 }
 
 // Represents an 'unlocked' event on a given issue or pull request.
 type UnlockedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
 	// Object that was unlocked.
-	Lockable Lockable `json:"lockable,omitempty"`
+	Lockable Lockable `json:"lockable"`
 }
 
-func (UnlockedEvent) IsIssueTimelineItems()       {}
 func (UnlockedEvent) IsNode()                     {}
 func (UnlockedEvent) IsPullRequestTimelineItems() {}
-func (UnlockedEvent) IsPullRequestTimelineItem()  {}
+func (UnlockedEvent) IsIssueTimelineItems()       {}
 func (UnlockedEvent) IsIssueTimelineItem()        {}
-
-// Autogenerated input type of UnmarkDiscussionCommentAsAnswer
-type UnmarkDiscussionCommentAsAnswerInput struct {
-	// The Node ID of the discussion comment to unmark as an answer.
-	ID string `json:"id"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of UnmarkDiscussionCommentAsAnswer
-type UnmarkDiscussionCommentAsAnswerPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The discussion that includes the comment.
-	Discussion *Discussion `json:"discussion,omitempty"`
-}
+func (UnlockedEvent) IsPullRequestTimelineItem()  {}
 
 // Autogenerated input type of UnmarkFileAsViewed
 type UnmarkFileAsViewedInput struct {
@@ -14712,15 +12775,15 @@ type UnmarkFileAsViewedInput struct {
 	// The path of the file to mark as unviewed
 	Path string `json:"path"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UnmarkFileAsViewed
 type UnmarkFileAsViewedPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The updated pull request.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 }
 
 // Autogenerated input type of UnmarkIssueAsDuplicate
@@ -14730,50 +12793,50 @@ type UnmarkIssueAsDuplicateInput struct {
 	// ID of the issue or pull request currently considered canonical/authoritative/original.
 	CanonicalID string `json:"canonicalId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UnmarkIssueAsDuplicate
 type UnmarkIssueAsDuplicatePayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The issue or pull request that was marked as a duplicate.
-	Duplicate IssueOrPullRequest `json:"duplicate,omitempty"`
+	Duplicate IssueOrPullRequest `json:"duplicate"`
 }
 
 // Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
 type UnmarkedAsDuplicateEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// The authoritative issue or pull request which has been duplicated by another.
-	Canonical IssueOrPullRequest `json:"canonical,omitempty"`
+	Canonical IssueOrPullRequest `json:"canonical"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// The issue or pull request which has been marked as a duplicate of another.
-	Duplicate IssueOrPullRequest `json:"duplicate,omitempty"`
+	Duplicate IssueOrPullRequest `json:"duplicate"`
 	ID        string             `json:"id"`
 	// Canonical and duplicate belong to different repositories.
 	IsCrossRepository bool `json:"isCrossRepository"`
 }
 
-func (UnmarkedAsDuplicateEvent) IsIssueTimelineItems()       {}
 func (UnmarkedAsDuplicateEvent) IsNode()                     {}
 func (UnmarkedAsDuplicateEvent) IsPullRequestTimelineItems() {}
+func (UnmarkedAsDuplicateEvent) IsIssueTimelineItems()       {}
 
 // Autogenerated input type of UnminimizeComment
 type UnminimizeCommentInput struct {
 	// The Node ID of the subject to modify.
 	SubjectID string `json:"subjectId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UnminimizeComment
 type UnminimizeCommentPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The comment that was unminimized.
-	UnminimizedComment Minimizable `json:"unminimizedComment,omitempty"`
+	UnminimizedComment Minimizable `json:"unminimizedComment"`
 }
 
 // Autogenerated input type of UnpinIssue
@@ -14781,121 +12844,113 @@ type UnpinIssueInput struct {
 	// The ID of the issue to be unpinned
 	IssueID string `json:"issueId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UnpinIssue
 type UnpinIssuePayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The issue that was unpinned
-	Issue *Issue `json:"issue,omitempty"`
+	Issue *Issue `json:"issue"`
 }
 
 // Represents an 'unpinned' event on a given issue or pull request.
 type UnpinnedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
 	// Identifies the issue associated with the event.
-	Issue *Issue `json:"issue,omitempty"`
+	Issue *Issue `json:"issue"`
 }
 
-func (UnpinnedEvent) IsIssueTimelineItems()       {}
 func (UnpinnedEvent) IsNode()                     {}
 func (UnpinnedEvent) IsPullRequestTimelineItems() {}
+func (UnpinnedEvent) IsIssueTimelineItems()       {}
 
 // Autogenerated input type of UnresolveReviewThread
 type UnresolveReviewThreadInput struct {
 	// The ID of the thread to unresolve
 	ThreadID string `json:"threadId"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UnresolveReviewThread
 type UnresolveReviewThreadPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The thread to resolve.
-	Thread *PullRequestReviewThread `json:"thread,omitempty"`
+	Thread *PullRequestReviewThread `json:"thread"`
 }
 
 // Represents an 'unsubscribed' event on a given `Subscribable`.
 type UnsubscribedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
 	// Object referenced by event.
-	Subscribable Subscribable `json:"subscribable,omitempty"`
+	Subscribable Subscribable `json:"subscribable"`
 }
 
-func (UnsubscribedEvent) IsIssueTimelineItems()       {}
 func (UnsubscribedEvent) IsPullRequestTimelineItems() {}
-func (UnsubscribedEvent) IsPullRequestTimelineItem()  {}
-func (UnsubscribedEvent) IsIssueTimelineItem()        {}
+func (UnsubscribedEvent) IsIssueTimelineItems()       {}
 func (UnsubscribedEvent) IsNode()                     {}
+func (UnsubscribedEvent) IsIssueTimelineItem()        {}
+func (UnsubscribedEvent) IsPullRequestTimelineItem()  {}
 
 // Autogenerated input type of UpdateBranchProtectionRule
 type UpdateBranchProtectionRuleInput struct {
 	// The global relay id of the branch protection rule to be updated.
 	BranchProtectionRuleID string `json:"branchProtectionRuleId"`
 	// The glob-like pattern used to determine matching branches.
-	Pattern *string `json:"pattern,omitempty"`
+	Pattern *string `json:"pattern"`
 	// Are approving reviews required to update matching branches.
-	RequiresApprovingReviews *bool `json:"requiresApprovingReviews,omitempty"`
+	RequiresApprovingReviews *bool `json:"requiresApprovingReviews"`
 	// Number of approving reviews required to update matching branches.
-	RequiredApprovingReviewCount *int `json:"requiredApprovingReviewCount,omitempty"`
+	RequiredApprovingReviewCount *int `json:"requiredApprovingReviewCount"`
 	// Are commits required to be signed.
-	RequiresCommitSignatures *bool `json:"requiresCommitSignatures,omitempty"`
+	RequiresCommitSignatures *bool `json:"requiresCommitSignatures"`
 	// Are merge commits prohibited from being pushed to this branch.
-	RequiresLinearHistory *bool `json:"requiresLinearHistory,omitempty"`
+	RequiresLinearHistory *bool `json:"requiresLinearHistory"`
 	// Are force pushes allowed on this branch.
-	AllowsForcePushes *bool `json:"allowsForcePushes,omitempty"`
+	AllowsForcePushes *bool `json:"allowsForcePushes"`
 	// Can this branch be deleted.
-	AllowsDeletions *bool `json:"allowsDeletions,omitempty"`
+	AllowsDeletions *bool `json:"allowsDeletions"`
 	// Can admins overwrite branch protection.
-	IsAdminEnforced *bool `json:"isAdminEnforced,omitempty"`
+	IsAdminEnforced *bool `json:"isAdminEnforced"`
 	// Are status checks required to update matching branches.
-	RequiresStatusChecks *bool `json:"requiresStatusChecks,omitempty"`
+	RequiresStatusChecks *bool `json:"requiresStatusChecks"`
 	// Are branches required to be up to date before merging.
-	RequiresStrictStatusChecks *bool `json:"requiresStrictStatusChecks,omitempty"`
+	RequiresStrictStatusChecks *bool `json:"requiresStrictStatusChecks"`
 	// Are reviews from code owners required to update matching branches.
-	RequiresCodeOwnerReviews *bool `json:"requiresCodeOwnerReviews,omitempty"`
+	RequiresCodeOwnerReviews *bool `json:"requiresCodeOwnerReviews"`
 	// Will new commits pushed to matching branches dismiss pull request review approvals.
-	DismissesStaleReviews *bool `json:"dismissesStaleReviews,omitempty"`
+	DismissesStaleReviews *bool `json:"dismissesStaleReviews"`
 	// Is dismissal of pull request reviews restricted.
-	RestrictsReviewDismissals *bool `json:"restrictsReviewDismissals,omitempty"`
+	RestrictsReviewDismissals *bool `json:"restrictsReviewDismissals"`
 	// A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches.
-	ReviewDismissalActorIds []string `json:"reviewDismissalActorIds,omitempty"`
-	// A list of User or Team IDs allowed to bypass pull requests targeting matching branches.
-	BypassPullRequestActorIds []string `json:"bypassPullRequestActorIds,omitempty"`
-	// A list of User or Team IDs allowed to bypass force push targeting matching branches.
-	BypassForcePushActorIds []string `json:"bypassForcePushActorIds,omitempty"`
+	ReviewDismissalActorIds []string `json:"reviewDismissalActorIds"`
 	// Is pushing to matching branches restricted.
-	RestrictsPushes *bool `json:"restrictsPushes,omitempty"`
+	RestrictsPushes *bool `json:"restrictsPushes"`
 	// A list of User, Team or App IDs allowed to push to matching branches.
-	PushActorIds []string `json:"pushActorIds,omitempty"`
+	PushActorIds []string `json:"pushActorIds"`
 	// List of required status check contexts that must pass for commits to be accepted to matching branches.
-	RequiredStatusCheckContexts []string `json:"requiredStatusCheckContexts,omitempty"`
-	// The list of required status checks
-	RequiredStatusChecks []*RequiredStatusCheckInput `json:"requiredStatusChecks,omitempty"`
-	// Are conversations required to be resolved before merging.
-	RequiresConversationResolution *bool `json:"requiresConversationResolution,omitempty"`
+	RequiredStatusCheckContexts []string `json:"requiredStatusCheckContexts"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateBranchProtectionRule
 type UpdateBranchProtectionRulePayload struct {
 	// The newly created BranchProtectionRule.
-	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule,omitempty"`
+	BranchProtectionRule *BranchProtectionRule `json:"branchProtectionRule"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated input type of UpdateCheckRun
@@ -14905,33 +12960,33 @@ type UpdateCheckRunInput struct {
 	// The node of the check.
 	CheckRunID string `json:"checkRunId"`
 	// The name of the check.
-	Name *string `json:"name,omitempty"`
+	Name *string `json:"name"`
 	// The URL of the integrator's site that has the full details of the check.
-	DetailsURL *string `json:"detailsUrl,omitempty"`
+	DetailsURL *string `json:"detailsUrl"`
 	// A reference for the run on the integrator's system.
-	ExternalID *string `json:"externalId,omitempty"`
+	ExternalID *string `json:"externalId"`
 	// The current status.
-	Status *RequestableCheckStatusState `json:"status,omitempty"`
+	Status *RequestableCheckStatusState `json:"status"`
 	// The time that the check run began.
-	StartedAt *time.Time `json:"startedAt,omitempty"`
+	StartedAt *time.Time `json:"startedAt"`
 	// The final conclusion of the check.
-	Conclusion *CheckConclusionState `json:"conclusion,omitempty"`
+	Conclusion *CheckConclusionState `json:"conclusion"`
 	// The time that the check run finished.
-	CompletedAt *time.Time `json:"completedAt,omitempty"`
+	CompletedAt *time.Time `json:"completedAt"`
 	// Descriptive details about the run.
-	Output *CheckRunOutput `json:"output,omitempty"`
+	Output *CheckRunOutput `json:"output"`
 	// Possible further actions the integrator can perform, which a user may trigger.
-	Actions []*CheckRunAction `json:"actions,omitempty"`
+	Actions []*CheckRunAction `json:"actions"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateCheckRun
 type UpdateCheckRunPayload struct {
 	// The updated check run.
-	CheckRun *CheckRun `json:"checkRun,omitempty"`
+	CheckRun *CheckRun `json:"checkRun"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated input type of UpdateCheckSuitePreferences
@@ -14939,57 +12994,17 @@ type UpdateCheckSuitePreferencesInput struct {
 	// The Node ID of the repository.
 	RepositoryID string `json:"repositoryId"`
 	// The check suite preferences to modify.
-	AutoTriggerPreferences []*CheckSuiteAutoTriggerPreference `json:"autoTriggerPreferences,omitempty"`
+	AutoTriggerPreferences []*CheckSuiteAutoTriggerPreference `json:"autoTriggerPreferences"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateCheckSuitePreferences
 type UpdateCheckSuitePreferencesPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The updated repository.
-	Repository *Repository `json:"repository,omitempty"`
-}
-
-// Autogenerated input type of UpdateDiscussionComment
-type UpdateDiscussionCommentInput struct {
-	// The Node ID of the discussion comment to update.
-	CommentID string `json:"commentId"`
-	// The new contents of the comment body.
-	Body string `json:"body"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of UpdateDiscussionComment
-type UpdateDiscussionCommentPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The modified discussion comment.
-	Comment *DiscussionComment `json:"comment,omitempty"`
-}
-
-// Autogenerated input type of UpdateDiscussion
-type UpdateDiscussionInput struct {
-	// The Node ID of the discussion to update.
-	DiscussionID string `json:"discussionId"`
-	// The new discussion title.
-	Title *string `json:"title,omitempty"`
-	// The new contents of the discussion body.
-	Body *string `json:"body,omitempty"`
-	// The Node ID of a discussion category within the same repository to change this discussion to.
-	CategoryID *string `json:"categoryId,omitempty"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of UpdateDiscussion
-type UpdateDiscussionPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The modified discussion.
-	Discussion *Discussion `json:"discussion,omitempty"`
+	Repository *Repository `json:"repository"`
 }
 
 // Autogenerated input type of UpdateEnterpriseAdministratorRole
@@ -15001,15 +13016,15 @@ type UpdateEnterpriseAdministratorRoleInput struct {
 	// The new role for the Enterprise administrator.
 	Role EnterpriseAdministratorRole `json:"role"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateEnterpriseAdministratorRole
 type UpdateEnterpriseAdministratorRolePayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// A message confirming the result of changing the administrator's role.
-	Message *string `json:"message,omitempty"`
+	Message *string `json:"message"`
 }
 
 // Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
@@ -15019,37 +13034,37 @@ type UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput struct {
 	// The value for the allow private repository forking setting on the enterprise.
 	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
 type UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The enterprise with the updated allow private repository forking setting.
-	Enterprise *Enterprise `json:"enterprise,omitempty"`
+	Enterprise *Enterprise `json:"enterprise"`
 	// A message confirming the result of updating the allow private repository forking setting.
-	Message *string `json:"message,omitempty"`
+	Message *string `json:"message"`
 }
 
 // Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting
 type UpdateEnterpriseDefaultRepositoryPermissionSettingInput struct {
-	// The ID of the enterprise on which to set the base repository permission setting.
+	// The ID of the enterprise on which to set the default repository permission setting.
 	EnterpriseID string `json:"enterpriseId"`
-	// The value for the base repository permission setting on the enterprise.
+	// The value for the default repository permission setting on the enterprise.
 	SettingValue EnterpriseDefaultRepositoryPermissionSettingValue `json:"settingValue"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting
 type UpdateEnterpriseDefaultRepositoryPermissionSettingPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The enterprise with the updated base repository permission setting.
-	Enterprise *Enterprise `json:"enterprise,omitempty"`
-	// A message confirming the result of updating the base repository permission setting.
-	Message *string `json:"message,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
+	// The enterprise with the updated default repository permission setting.
+	Enterprise *Enterprise `json:"enterprise"`
+	// A message confirming the result of updating the default repository permission setting.
+	Message *string `json:"message"`
 }
 
 // Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
@@ -15059,17 +13074,17 @@ type UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput struct {
 	// The value for the members can change repository visibility setting on the enterprise.
 	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
 type UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The enterprise with the updated members can change repository visibility setting.
-	Enterprise *Enterprise `json:"enterprise,omitempty"`
+	Enterprise *Enterprise `json:"enterprise"`
 	// A message confirming the result of updating the members can change repository visibility setting.
-	Message *string `json:"message,omitempty"`
+	Message *string `json:"message"`
 }
 
 // Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
@@ -15077,27 +13092,27 @@ type UpdateEnterpriseMembersCanCreateRepositoriesSettingInput struct {
 	// The ID of the enterprise on which to set the members can create repositories setting.
 	EnterpriseID string `json:"enterpriseId"`
 	// Value for the members can create repositories setting on the enterprise. This or the granular public/private/internal allowed fields (but not both) must be provided.
-	SettingValue *EnterpriseMembersCanCreateRepositoriesSettingValue `json:"settingValue,omitempty"`
+	SettingValue *EnterpriseMembersCanCreateRepositoriesSettingValue `json:"settingValue"`
 	// When false, allow member organizations to set their own repository creation member privileges.
-	MembersCanCreateRepositoriesPolicyEnabled *bool `json:"membersCanCreateRepositoriesPolicyEnabled,omitempty"`
+	MembersCanCreateRepositoriesPolicyEnabled *bool `json:"membersCanCreateRepositoriesPolicyEnabled"`
 	// Allow members to create public repositories. Defaults to current value.
-	MembersCanCreatePublicRepositories *bool `json:"membersCanCreatePublicRepositories,omitempty"`
+	MembersCanCreatePublicRepositories *bool `json:"membersCanCreatePublicRepositories"`
 	// Allow members to create private repositories. Defaults to current value.
-	MembersCanCreatePrivateRepositories *bool `json:"membersCanCreatePrivateRepositories,omitempty"`
+	MembersCanCreatePrivateRepositories *bool `json:"membersCanCreatePrivateRepositories"`
 	// Allow members to create internal repositories. Defaults to current value.
-	MembersCanCreateInternalRepositories *bool `json:"membersCanCreateInternalRepositories,omitempty"`
+	MembersCanCreateInternalRepositories *bool `json:"membersCanCreateInternalRepositories"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
 type UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The enterprise with the updated members can create repositories setting.
-	Enterprise *Enterprise `json:"enterprise,omitempty"`
+	Enterprise *Enterprise `json:"enterprise"`
 	// A message confirming the result of updating the members can create repositories setting.
-	Message *string `json:"message,omitempty"`
+	Message *string `json:"message"`
 }
 
 // Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting
@@ -15107,17 +13122,17 @@ type UpdateEnterpriseMembersCanDeleteIssuesSettingInput struct {
 	// The value for the members can delete issues setting on the enterprise.
 	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting
 type UpdateEnterpriseMembersCanDeleteIssuesSettingPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The enterprise with the updated members can delete issues setting.
-	Enterprise *Enterprise `json:"enterprise,omitempty"`
+	Enterprise *Enterprise `json:"enterprise"`
 	// A message confirming the result of updating the members can delete issues setting.
-	Message *string `json:"message,omitempty"`
+	Message *string `json:"message"`
 }
 
 // Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
@@ -15127,17 +13142,17 @@ type UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput struct {
 	// The value for the members can delete repositories setting on the enterprise.
 	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
 type UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The enterprise with the updated members can delete repositories setting.
-	Enterprise *Enterprise `json:"enterprise,omitempty"`
+	Enterprise *Enterprise `json:"enterprise"`
 	// A message confirming the result of updating the members can delete repositories setting.
-	Message *string `json:"message,omitempty"`
+	Message *string `json:"message"`
 }
 
 // Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
@@ -15147,17 +13162,17 @@ type UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput struct {
 	// The value for the members can invite collaborators setting on the enterprise.
 	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
 type UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The enterprise with the updated members can invite collaborators setting.
-	Enterprise *Enterprise `json:"enterprise,omitempty"`
+	Enterprise *Enterprise `json:"enterprise"`
 	// A message confirming the result of updating the members can invite collaborators setting.
-	Message *string `json:"message,omitempty"`
+	Message *string `json:"message"`
 }
 
 // Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting
@@ -15167,17 +13182,17 @@ type UpdateEnterpriseMembersCanMakePurchasesSettingInput struct {
 	// The value for the members can make purchases setting on the enterprise.
 	SettingValue EnterpriseMembersCanMakePurchasesSettingValue `json:"settingValue"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting
 type UpdateEnterpriseMembersCanMakePurchasesSettingPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The enterprise with the updated members can make purchases setting.
-	Enterprise *Enterprise `json:"enterprise,omitempty"`
+	Enterprise *Enterprise `json:"enterprise"`
 	// A message confirming the result of updating the members can make purchases setting.
-	Message *string `json:"message,omitempty"`
+	Message *string `json:"message"`
 }
 
 // Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
@@ -15187,17 +13202,17 @@ type UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput struct {
 	// The value for the members can update protected branches setting on the enterprise.
 	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
 type UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The enterprise with the updated members can update protected branches setting.
-	Enterprise *Enterprise `json:"enterprise,omitempty"`
+	Enterprise *Enterprise `json:"enterprise"`
 	// A message confirming the result of updating the members can update protected branches setting.
-	Message *string `json:"message,omitempty"`
+	Message *string `json:"message"`
 }
 
 // Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
@@ -15207,17 +13222,17 @@ type UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput struct {
 	// The value for the members can view dependency insights setting on the enterprise.
 	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
 type UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The enterprise with the updated members can view dependency insights setting.
-	Enterprise *Enterprise `json:"enterprise,omitempty"`
+	Enterprise *Enterprise `json:"enterprise"`
 	// A message confirming the result of updating the members can view dependency insights setting.
-	Message *string `json:"message,omitempty"`
+	Message *string `json:"message"`
 }
 
 // Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting
@@ -15227,37 +13242,17 @@ type UpdateEnterpriseOrganizationProjectsSettingInput struct {
 	// The value for the organization projects setting on the enterprise.
 	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting
 type UpdateEnterpriseOrganizationProjectsSettingPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The enterprise with the updated organization projects setting.
-	Enterprise *Enterprise `json:"enterprise,omitempty"`
+	Enterprise *Enterprise `json:"enterprise"`
 	// A message confirming the result of updating the organization projects setting.
-	Message *string `json:"message,omitempty"`
-}
-
-// Autogenerated input type of UpdateEnterpriseOwnerOrganizationRole
-type UpdateEnterpriseOwnerOrganizationRoleInput struct {
-	// The ID of the Enterprise which the owner belongs to.
-	EnterpriseID string `json:"enterpriseId"`
-	// The ID of the organization for membership change.
-	OrganizationID string `json:"organizationId"`
-	// The role to assume in the organization.
-	OrganizationRole RoleInOrganization `json:"organizationRole"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of UpdateEnterpriseOwnerOrganizationRole
-type UpdateEnterpriseOwnerOrganizationRolePayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// A message confirming the result of changing the owner's organization role.
-	Message *string `json:"message,omitempty"`
+	Message *string `json:"message"`
 }
 
 // Autogenerated input type of UpdateEnterpriseProfile
@@ -15265,23 +13260,23 @@ type UpdateEnterpriseProfileInput struct {
 	// The Enterprise ID to update.
 	EnterpriseID string `json:"enterpriseId"`
 	// The name of the enterprise.
-	Name *string `json:"name,omitempty"`
+	Name *string `json:"name"`
 	// The description of the enterprise.
-	Description *string `json:"description,omitempty"`
+	Description *string `json:"description"`
 	// The URL of the enterprise's website.
-	WebsiteURL *string `json:"websiteUrl,omitempty"`
+	WebsiteURL *string `json:"websiteUrl"`
 	// The location of the enterprise.
-	Location *string `json:"location,omitempty"`
+	Location *string `json:"location"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateEnterpriseProfile
 type UpdateEnterpriseProfilePayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The updated enterprise.
-	Enterprise *Enterprise `json:"enterprise,omitempty"`
+	Enterprise *Enterprise `json:"enterprise"`
 }
 
 // Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting
@@ -15291,17 +13286,17 @@ type UpdateEnterpriseRepositoryProjectsSettingInput struct {
 	// The value for the repository projects setting on the enterprise.
 	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting
 type UpdateEnterpriseRepositoryProjectsSettingPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The enterprise with the updated repository projects setting.
-	Enterprise *Enterprise `json:"enterprise,omitempty"`
+	Enterprise *Enterprise `json:"enterprise"`
 	// A message confirming the result of updating the repository projects setting.
-	Message *string `json:"message,omitempty"`
+	Message *string `json:"message"`
 }
 
 // Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting
@@ -15311,17 +13306,17 @@ type UpdateEnterpriseTeamDiscussionsSettingInput struct {
 	// The value for the team discussions setting on the enterprise.
 	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting
 type UpdateEnterpriseTeamDiscussionsSettingPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The enterprise with the updated team discussions setting.
-	Enterprise *Enterprise `json:"enterprise,omitempty"`
+	Enterprise *Enterprise `json:"enterprise"`
 	// A message confirming the result of updating the team discussions setting.
-	Message *string `json:"message,omitempty"`
+	Message *string `json:"message"`
 }
 
 // Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
@@ -15331,37 +13326,17 @@ type UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput struct {
 	// The value for the two factor authentication required setting on the enterprise.
 	SettingValue EnterpriseEnabledSettingValue `json:"settingValue"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
 type UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The enterprise with the updated two factor authentication required setting.
-	Enterprise *Enterprise `json:"enterprise,omitempty"`
+	Enterprise *Enterprise `json:"enterprise"`
 	// A message confirming the result of updating the two factor authentication required setting.
-	Message *string `json:"message,omitempty"`
-}
-
-// Autogenerated input type of UpdateEnvironment
-type UpdateEnvironmentInput struct {
-	// The node ID of the environment.
-	EnvironmentID string `json:"environmentId"`
-	// The wait timer in minutes.
-	WaitTimer *int `json:"waitTimer,omitempty"`
-	// The ids of users or teams that can approve deployments to this environment
-	Reviewers []string `json:"reviewers,omitempty"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of UpdateEnvironment
-type UpdateEnvironmentPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The updated environment.
-	Environment *Environment `json:"environment,omitempty"`
+	Message *string `json:"message"`
 }
 
 // Autogenerated input type of UpdateIpAllowListEnabledSetting
@@ -15371,15 +13346,15 @@ type UpdateIPAllowListEnabledSettingInput struct {
 	// The value for the IP allow list enabled setting.
 	SettingValue IPAllowListEnabledSettingValue `json:"settingValue"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateIpAllowListEnabledSetting
 type UpdateIPAllowListEnabledSettingPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The IP allow list owner on which the setting was updated.
-	Owner IPAllowListOwner `json:"owner,omitempty"`
+	Owner IPAllowListOwner `json:"owner"`
 }
 
 // Autogenerated input type of UpdateIpAllowListEntry
@@ -15389,37 +13364,19 @@ type UpdateIPAllowListEntryInput struct {
 	// An IP address or range of addresses in CIDR notation.
 	AllowListValue string `json:"allowListValue"`
 	// An optional name for the IP allow list entry.
-	Name *string `json:"name,omitempty"`
+	Name *string `json:"name"`
 	// Whether the IP allow list entry is active when an IP allow list is enabled.
 	IsActive bool `json:"isActive"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateIpAllowListEntry
 type UpdateIPAllowListEntryPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The IP allow list entry that was updated.
-	IPAllowListEntry *IPAllowListEntry `json:"ipAllowListEntry,omitempty"`
-}
-
-// Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting
-type UpdateIPAllowListForInstalledAppsEnabledSettingInput struct {
-	// The ID of the owner.
-	OwnerID string `json:"ownerId"`
-	// The value for the IP allow list configuration for installed GitHub Apps setting.
-	SettingValue IPAllowListForInstalledAppsEnabledSettingValue `json:"settingValue"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of UpdateIpAllowListForInstalledAppsEnabledSetting
-type UpdateIPAllowListForInstalledAppsEnabledSettingPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The IP allow list owner on which the setting was updated.
-	Owner IPAllowListOwner `json:"owner,omitempty"`
+	IPAllowListEntry *IPAllowListEntry `json:"ipAllowListEntry"`
 }
 
 // Autogenerated input type of UpdateIssueComment
@@ -15429,15 +13386,15 @@ type UpdateIssueCommentInput struct {
 	// The updated text of the comment.
 	Body string `json:"body"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateIssueComment
 type UpdateIssueCommentPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The updated comment.
-	IssueComment *IssueComment `json:"issueComment,omitempty"`
+	IssueComment *IssueComment `json:"issueComment"`
 }
 
 // Autogenerated input type of UpdateIssue
@@ -15445,31 +13402,31 @@ type UpdateIssueInput struct {
 	// The ID of the Issue to modify.
 	ID string `json:"id"`
 	// The title for the issue.
-	Title *string `json:"title,omitempty"`
+	Title *string `json:"title"`
 	// The body for the issue description.
-	Body *string `json:"body,omitempty"`
+	Body *string `json:"body"`
 	// An array of Node IDs of users for this issue.
-	AssigneeIds []string `json:"assigneeIds,omitempty"`
+	AssigneeIds []string `json:"assigneeIds"`
 	// The Node ID of the milestone for this issue.
-	MilestoneID *string `json:"milestoneId,omitempty"`
+	MilestoneID *string `json:"milestoneId"`
 	// An array of Node IDs of labels for this issue.
-	LabelIds []string `json:"labelIds,omitempty"`
+	LabelIds []string `json:"labelIds"`
 	// The desired issue state.
-	State *IssueState `json:"state,omitempty"`
+	State *IssueState `json:"state"`
 	// An array of Node IDs for projects associated with this issue.
-	ProjectIds []string `json:"projectIds,omitempty"`
+	ProjectIds []string `json:"projectIds"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateIssue
 type UpdateIssuePayload struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The issue.
-	Issue *Issue `json:"issue,omitempty"`
+	Issue *Issue `json:"issue"`
 }
 
 // Autogenerated input type of UpdateNotificationRestrictionSetting
@@ -15479,35 +13436,15 @@ type UpdateNotificationRestrictionSettingInput struct {
 	// The value for the restrict notifications setting.
 	SettingValue NotificationRestrictionSettingValue `json:"settingValue"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateNotificationRestrictionSetting
 type UpdateNotificationRestrictionSettingPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The owner on which the setting was updated.
-	Owner VerifiableDomainOwner `json:"owner,omitempty"`
-}
-
-// Autogenerated input type of UpdateOrganizationAllowPrivateRepositoryForkingSetting
-type UpdateOrganizationAllowPrivateRepositoryForkingSettingInput struct {
-	// The ID of the organization on which to set the allow private repository forking setting.
-	OrganizationID string `json:"organizationId"`
-	// Enable forking of private repositories in the organization?
-	ForkingEnabled bool `json:"forkingEnabled"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of UpdateOrganizationAllowPrivateRepositoryForkingSetting
-type UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// A message confirming the result of updating the allow private repository forking setting.
-	Message *string `json:"message,omitempty"`
-	// The organization with the updated allow private repository forking setting.
-	Organization *Organization `json:"organization,omitempty"`
+	Owner VerifiableDomainOwner `json:"owner"`
 }
 
 // Autogenerated input type of UpdateProjectCard
@@ -15515,19 +13452,19 @@ type UpdateProjectCardInput struct {
 	// The ProjectCard ID to update.
 	ProjectCardID string `json:"projectCardId"`
 	// Whether or not the ProjectCard should be archived
-	IsArchived *bool `json:"isArchived,omitempty"`
+	IsArchived *bool `json:"isArchived"`
 	// The note of ProjectCard.
-	Note *string `json:"note,omitempty"`
+	Note *string `json:"note"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateProjectCard
 type UpdateProjectCardPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The updated ProjectCard.
-	ProjectCard *ProjectCard `json:"projectCard,omitempty"`
+	ProjectCard *ProjectCard `json:"projectCard"`
 }
 
 // Autogenerated input type of UpdateProjectColumn
@@ -15537,15 +13474,15 @@ type UpdateProjectColumnInput struct {
 	// The name of project column.
 	Name string `json:"name"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateProjectColumn
 type UpdateProjectColumnPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The updated project column.
-	ProjectColumn *ProjectColumn `json:"projectColumn,omitempty"`
+	ProjectColumn *ProjectColumn `json:"projectColumn"`
 }
 
 // Autogenerated input type of UpdateProject
@@ -15553,89 +13490,23 @@ type UpdateProjectInput struct {
 	// The Project ID to update.
 	ProjectID string `json:"projectId"`
 	// The name of project.
-	Name *string `json:"name,omitempty"`
+	Name *string `json:"name"`
 	// The description of project.
-	Body *string `json:"body,omitempty"`
+	Body *string `json:"body"`
 	// Whether the project is open or closed.
-	State *ProjectState `json:"state,omitempty"`
+	State *ProjectState `json:"state"`
 	// Whether the project is public or not.
-	Public *bool `json:"public,omitempty"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated input type of UpdateProjectNext
-type UpdateProjectNextInput struct {
-	// The ID of the Project to update.
-	ProjectID string `json:"projectId"`
-	// Set the title of the project.
-	Title *string `json:"title,omitempty"`
-	// Set the readme description of the project.
-	Description *string `json:"description,omitempty"`
-	// Set the short description of the project.
-	ShortDescription *string `json:"shortDescription,omitempty"`
-	// Set the project to closed or open.
-	Closed *bool `json:"closed,omitempty"`
-	// Set the project to public or private.
-	Public *bool `json:"public,omitempty"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated input type of UpdateProjectNextItemField
-type UpdateProjectNextItemFieldInput struct {
-	// The ID of the Project.
-	ProjectID string `json:"projectId"`
-	// The id of the item to be updated.
-	ItemID string `json:"itemId"`
-	// The id of the field to be updated.
-	FieldID *string `json:"fieldId,omitempty"`
-	// The value which will be set on the field.
-	Value string `json:"value"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of UpdateProjectNextItemField
-type UpdateProjectNextItemFieldPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The updated item.
-	ProjectNextItem *ProjectNextItem `json:"projectNextItem,omitempty"`
-}
-
-// Autogenerated return type of UpdateProjectNext
-type UpdateProjectNextPayload struct {
+	Public *bool `json:"public"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The updated Project.
-	ProjectNext *ProjectNext `json:"projectNext,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateProject
 type UpdateProjectPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The updated project.
-	Project *Project `json:"project,omitempty"`
-}
-
-// Autogenerated input type of UpdatePullRequestBranch
-type UpdatePullRequestBranchInput struct {
-	// The Node ID of the pull request.
-	PullRequestID string `json:"pullRequestId"`
-	// The head ref oid for the upstream branch.
-	ExpectedHeadOid *string `json:"expectedHeadOid,omitempty"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of UpdatePullRequestBranch
-type UpdatePullRequestBranchPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The updated pull request.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	Project *Project `json:"project"`
 }
 
 // Autogenerated input type of UpdatePullRequest
@@ -15645,35 +13516,35 @@ type UpdatePullRequestInput struct {
 	// The name of the branch you want your changes pulled into. This should be an existing branch
 	// on the current repository.
 	//
-	BaseRefName *string `json:"baseRefName,omitempty"`
+	BaseRefName *string `json:"baseRefName"`
 	// The title of the pull request.
-	Title *string `json:"title,omitempty"`
+	Title *string `json:"title"`
 	// The contents of the pull request.
-	Body *string `json:"body,omitempty"`
+	Body *string `json:"body"`
 	// The target state of the pull request.
-	State *PullRequestUpdateState `json:"state,omitempty"`
+	State *PullRequestUpdateState `json:"state"`
 	// Indicates whether maintainers can modify the pull request.
-	MaintainerCanModify *bool `json:"maintainerCanModify,omitempty"`
+	MaintainerCanModify *bool `json:"maintainerCanModify"`
 	// An array of Node IDs of users for this pull request.
-	AssigneeIds []string `json:"assigneeIds,omitempty"`
+	AssigneeIds []string `json:"assigneeIds"`
 	// The Node ID of the milestone for this pull request.
-	MilestoneID *string `json:"milestoneId,omitempty"`
+	MilestoneID *string `json:"milestoneId"`
 	// An array of Node IDs of labels for this pull request.
-	LabelIds []string `json:"labelIds,omitempty"`
+	LabelIds []string `json:"labelIds"`
 	// An array of Node IDs for projects associated with this pull request.
-	ProjectIds []string `json:"projectIds,omitempty"`
+	ProjectIds []string `json:"projectIds"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdatePullRequest
 type UpdatePullRequestPayload struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The updated pull request.
-	PullRequest *PullRequest `json:"pullRequest,omitempty"`
+	PullRequest *PullRequest `json:"pullRequest"`
 }
 
 // Autogenerated input type of UpdatePullRequestReviewComment
@@ -15683,15 +13554,15 @@ type UpdatePullRequestReviewCommentInput struct {
 	// The text of the comment.
 	Body string `json:"body"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdatePullRequestReviewComment
 type UpdatePullRequestReviewCommentPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The updated comment.
-	PullRequestReviewComment *PullRequestReviewComment `json:"pullRequestReviewComment,omitempty"`
+	PullRequestReviewComment *PullRequestReviewComment `json:"pullRequestReviewComment"`
 }
 
 // Autogenerated input type of UpdatePullRequestReview
@@ -15701,15 +13572,15 @@ type UpdatePullRequestReviewInput struct {
 	// The contents of the pull request review body.
 	Body string `json:"body"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdatePullRequestReview
 type UpdatePullRequestReviewPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The updated pull request review.
-	PullRequestReview *PullRequestReview `json:"pullRequestReview,omitempty"`
+	PullRequestReview *PullRequestReview `json:"pullRequestReview"`
 }
 
 // Autogenerated input type of UpdateRef
@@ -15719,17 +13590,17 @@ type UpdateRefInput struct {
 	// The GitObjectID that the Ref shall be updated to target.
 	Oid string `json:"oid"`
 	// Permit updates of branch Refs that are not fast-forwards?
-	Force *bool `json:"force,omitempty"`
+	Force *bool `json:"force"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateRef
 type UpdateRefPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The updated Ref.
-	Ref *Ref `json:"ref,omitempty"`
+	Ref *Ref `json:"ref"`
 }
 
 // Autogenerated input type of UpdateRepository
@@ -15737,55 +13608,29 @@ type UpdateRepositoryInput struct {
 	// The ID of the repository to update.
 	RepositoryID string `json:"repositoryId"`
 	// The new name of the repository.
-	Name *string `json:"name,omitempty"`
+	Name *string `json:"name"`
 	// A new description for the repository. Pass an empty string to erase the existing description.
-	Description *string `json:"description,omitempty"`
+	Description *string `json:"description"`
 	// Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure.
-	Template *bool `json:"template,omitempty"`
+	Template *bool `json:"template"`
 	// The URL for a web page about this repository. Pass an empty string to erase the existing URL.
-	HomepageURL *string `json:"homepageUrl,omitempty"`
+	HomepageURL *string `json:"homepageUrl"`
 	// Indicates if the repository should have the wiki feature enabled.
-	HasWikiEnabled *bool `json:"hasWikiEnabled,omitempty"`
+	HasWikiEnabled *bool `json:"hasWikiEnabled"`
 	// Indicates if the repository should have the issues feature enabled.
-	HasIssuesEnabled *bool `json:"hasIssuesEnabled,omitempty"`
+	HasIssuesEnabled *bool `json:"hasIssuesEnabled"`
 	// Indicates if the repository should have the project boards feature enabled.
-	HasProjectsEnabled *bool `json:"hasProjectsEnabled,omitempty"`
+	HasProjectsEnabled *bool `json:"hasProjectsEnabled"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateRepository
 type UpdateRepositoryPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The updated repository.
-	Repository *Repository `json:"repository,omitempty"`
-}
-
-// Autogenerated input type of UpdateSponsorshipPreferences
-type UpdateSponsorshipPreferencesInput struct {
-	// The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given.
-	SponsorID *string `json:"sponsorId,omitempty"`
-	// The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given.
-	SponsorLogin *string `json:"sponsorLogin,omitempty"`
-	// The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
-	SponsorableID *string `json:"sponsorableId,omitempty"`
-	// The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
-	SponsorableLogin *string `json:"sponsorableLogin,omitempty"`
-	// Whether the sponsor should receive email updates from the sponsorable.
-	ReceiveEmails *bool `json:"receiveEmails,omitempty"`
-	// Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used.
-	PrivacyLevel *SponsorshipPrivacy `json:"privacyLevel,omitempty"`
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of UpdateSponsorshipPreferences
-type UpdateSponsorshipPreferencesPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The sponsorship that was updated.
-	Sponsorship *Sponsorship `json:"sponsorship,omitempty"`
+	Repository *Repository `json:"repository"`
 }
 
 // Autogenerated input type of UpdateSubscription
@@ -15795,15 +13640,15 @@ type UpdateSubscriptionInput struct {
 	// The new state of the subscription.
 	State SubscriptionState `json:"state"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateSubscription
 type UpdateSubscriptionPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The input subscribable entity.
-	Subscribable Subscribable `json:"subscribable,omitempty"`
+	Subscribable Subscribable `json:"subscribable"`
 }
 
 // Autogenerated input type of UpdateTeamDiscussionComment
@@ -15813,17 +13658,17 @@ type UpdateTeamDiscussionCommentInput struct {
 	// The updated text of the comment.
 	Body string `json:"body"`
 	// The current version of the body content.
-	BodyVersion *string `json:"bodyVersion,omitempty"`
+	BodyVersion *string `json:"bodyVersion"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateTeamDiscussionComment
 type UpdateTeamDiscussionCommentPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The updated comment.
-	TeamDiscussionComment *TeamDiscussionComment `json:"teamDiscussionComment,omitempty"`
+	TeamDiscussionComment *TeamDiscussionComment `json:"teamDiscussionComment"`
 }
 
 // Autogenerated input type of UpdateTeamDiscussion
@@ -15831,23 +13676,23 @@ type UpdateTeamDiscussionInput struct {
 	// The Node ID of the discussion to modify.
 	ID string `json:"id"`
 	// The updated title of the discussion.
-	Title *string `json:"title,omitempty"`
+	Title *string `json:"title"`
 	// The updated text of the discussion.
-	Body *string `json:"body,omitempty"`
+	Body *string `json:"body"`
 	// The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
-	BodyVersion *string `json:"bodyVersion,omitempty"`
+	BodyVersion *string `json:"bodyVersion"`
 	// If provided, sets the pinned state of the updated discussion.
-	Pinned *bool `json:"pinned,omitempty"`
+	Pinned *bool `json:"pinned"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateTeamDiscussion
 type UpdateTeamDiscussionPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// The updated discussion.
-	TeamDiscussion *TeamDiscussion `json:"teamDiscussion,omitempty"`
+	TeamDiscussion *TeamDiscussion `json:"teamDiscussion"`
 }
 
 // Autogenerated input type of UpdateTopics
@@ -15855,19 +13700,19 @@ type UpdateTopicsInput struct {
 	// The Node ID of the repository.
 	RepositoryID string `json:"repositoryId"`
 	// An array of topic names.
-	TopicNames []string `json:"topicNames,omitempty"`
+	TopicNames []string `json:"topicNames"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
 // Autogenerated return type of UpdateTopics
 type UpdateTopicsPayload struct {
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
+	ClientMutationID *string `json:"clientMutationId"`
 	// Names of the provided topics that are not valid.
-	InvalidTopicNames []string `json:"invalidTopicNames,omitempty"`
+	InvalidTopicNames []string `json:"invalidTopicNames"`
 	// The updated repository.
-	Repository *Repository `json:"repository,omitempty"`
+	Repository *Repository `json:"repository"`
 }
 
 // A user is an individual's account on GitHub that owns repositories and can make new content.
@@ -15877,44 +13722,40 @@ type User struct {
 	// A URL pointing to the user's public avatar.
 	AvatarURL string `json:"avatarUrl"`
 	// The user's public profile bio.
-	Bio *string `json:"bio,omitempty"`
+	Bio *string `json:"bio"`
 	// The user's public profile bio as HTML.
 	BioHTML string `json:"bioHTML"`
-	// Could this user receive email notifications, if the organization had notification restrictions enabled?
-	CanReceiveOrganizationEmailsWhenNotificationsRestricted bool `json:"canReceiveOrganizationEmailsWhenNotificationsRestricted"`
 	// A list of commit comments made by this user.
-	CommitComments *CommitCommentConnection `json:"commitComments,omitempty"`
+	CommitComments *CommitCommentConnection `json:"commitComments"`
 	// The user's public profile company.
-	Company *string `json:"company,omitempty"`
+	Company *string `json:"company"`
 	// The user's public profile company as HTML.
 	CompanyHTML string `json:"companyHTML"`
 	// The collection of contributions this user has made to different repositories.
-	ContributionsCollection *ContributionsCollection `json:"contributionsCollection,omitempty"`
+	ContributionsCollection *ContributionsCollection `json:"contributionsCollection"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
+	DatabaseID *int `json:"databaseId"`
 	// The user's publicly visible profile email.
 	Email string `json:"email"`
-	// The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
-	EstimatedNextSponsorsPayoutInCents int `json:"estimatedNextSponsorsPayoutInCents"`
 	// A list of users the given user is followed by.
-	Followers *FollowerConnection `json:"followers,omitempty"`
+	Followers *FollowerConnection `json:"followers"`
 	// A list of users the given user is following.
-	Following *FollowingConnection `json:"following,omitempty"`
+	Following *FollowingConnection `json:"following"`
 	// Find gist by repo name.
-	Gist *Gist `json:"gist,omitempty"`
+	Gist *Gist `json:"gist"`
 	// A list of gist comments made by this user.
-	GistComments *GistCommentConnection `json:"gistComments,omitempty"`
+	GistComments *GistCommentConnection `json:"gistComments"`
 	// A list of the Gists the user has created.
-	Gists *GistConnection `json:"gists,omitempty"`
+	Gists *GistConnection `json:"gists"`
 	// True if this user/organization has a GitHub Sponsors listing.
 	HasSponsorsListing bool `json:"hasSponsorsListing"`
 	// The hovercard information for this user in a given context
-	Hovercard *Hovercard `json:"hovercard,omitempty"`
+	Hovercard *Hovercard `json:"hovercard"`
 	ID        string     `json:"id"`
 	// The interaction ability settings for this user.
-	InteractionAbility *RepositoryInteractionAbility `json:"interactionAbility,omitempty"`
+	InteractionAbility *RepositoryInteractionAbility `json:"interactionAbility"`
 	// Whether or not this user is a participant in the GitHub Security Bug Bounty.
 	IsBountyHunter bool `json:"isBountyHunter"`
 	// Whether or not this user is a participant in the GitHub Campus Experts Program.
@@ -15923,8 +13764,6 @@ type User struct {
 	IsDeveloperProgramMember bool `json:"isDeveloperProgramMember"`
 	// Whether or not this user is a GitHub employee.
 	IsEmployee bool `json:"isEmployee"`
-	// Whether or not this user is following the viewer. Inverse of viewer_is_following
-	IsFollowingViewer bool `json:"isFollowingViewer"`
 	// Whether or not this user is a member of the GitHub Stars Program.
 	IsGitHubStar bool `json:"isGitHubStar"`
 	// Whether or not the user has marked themselves as for hire.
@@ -15938,90 +13777,70 @@ type User struct {
 	// Whether or not this user is the viewing user.
 	IsViewer bool `json:"isViewer"`
 	// A list of issue comments made by this user.
-	IssueComments *IssueCommentConnection `json:"issueComments,omitempty"`
+	IssueComments *IssueCommentConnection `json:"issueComments"`
 	// A list of issues associated with this user.
-	Issues *IssueConnection `json:"issues,omitempty"`
+	Issues *IssueConnection `json:"issues"`
 	// Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
-	ItemShowcase *ProfileItemShowcase `json:"itemShowcase,omitempty"`
+	ItemShowcase *ProfileItemShowcase `json:"itemShowcase"`
 	// The user's public profile location.
-	Location *string `json:"location,omitempty"`
+	Location *string `json:"location"`
 	// The username used to login.
 	Login string `json:"login"`
-	// The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
-	MonthlyEstimatedSponsorsIncomeInCents int `json:"monthlyEstimatedSponsorsIncomeInCents"`
 	// The user's public profile name.
-	Name *string `json:"name,omitempty"`
+	Name *string `json:"name"`
 	// Find an organization by its login that the user belongs to.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// Verified email addresses that match verified domains for a specified organization the user is a member of.
-	OrganizationVerifiedDomainEmails []string `json:"organizationVerifiedDomainEmails,omitempty"`
+	OrganizationVerifiedDomainEmails []string `json:"organizationVerifiedDomainEmails"`
 	// A list of organizations the user belongs to.
-	Organizations *OrganizationConnection `json:"organizations,omitempty"`
+	Organizations *OrganizationConnection `json:"organizations"`
 	// A list of packages under the owner.
-	Packages *PackageConnection `json:"packages,omitempty"`
+	Packages *PackageConnection `json:"packages"`
 	// A list of repositories and gists this profile owner can pin to their profile.
-	PinnableItems *PinnableItemConnection `json:"pinnableItems,omitempty"`
+	PinnableItems *PinnableItemConnection `json:"pinnableItems"`
 	// A list of repositories and gists this profile owner has pinned to their profile
-	PinnedItems *PinnableItemConnection `json:"pinnedItems,omitempty"`
+	PinnedItems *PinnableItemConnection `json:"pinnedItems"`
 	// Returns how many more items this profile owner can pin to their profile.
 	PinnedItemsRemaining int `json:"pinnedItemsRemaining"`
 	// Find project by number.
-	Project *Project `json:"project,omitempty"`
-	// Find a project by project (beta) number.
-	ProjectNext *ProjectNext `json:"projectNext,omitempty"`
+	Project *Project `json:"project"`
 	// A list of projects under the owner.
-	Projects *ProjectConnection `json:"projects,omitempty"`
-	// A list of projects (beta) under the owner.
-	ProjectsNext *ProjectNextConnection `json:"projectsNext,omitempty"`
+	Projects *ProjectConnection `json:"projects"`
 	// The HTTP path listing user's projects
 	ProjectsResourcePath string `json:"projectsResourcePath"`
 	// The HTTP URL listing user's projects
 	ProjectsURL string `json:"projectsUrl"`
 	// A list of public keys associated with this user.
-	PublicKeys *PublicKeyConnection `json:"publicKeys,omitempty"`
+	PublicKeys *PublicKeyConnection `json:"publicKeys"`
 	// A list of pull requests associated with this user.
-	PullRequests *PullRequestConnection `json:"pullRequests,omitempty"`
+	PullRequests *PullRequestConnection `json:"pullRequests"`
 	// A list of repositories that the user owns.
-	Repositories *RepositoryConnection `json:"repositories,omitempty"`
+	Repositories *RepositoryConnection `json:"repositories"`
 	// A list of repositories that the user recently contributed to.
-	RepositoriesContributedTo *RepositoryConnection `json:"repositoriesContributedTo,omitempty"`
+	RepositoriesContributedTo *RepositoryConnection `json:"repositoriesContributedTo"`
 	// Find Repository.
-	Repository *Repository `json:"repository,omitempty"`
-	// Discussion comments this user has authored.
-	RepositoryDiscussionComments *DiscussionCommentConnection `json:"repositoryDiscussionComments,omitempty"`
-	// Discussions this user has started.
-	RepositoryDiscussions *DiscussionConnection `json:"repositoryDiscussions,omitempty"`
+	Repository *Repository `json:"repository"`
 	// The HTTP path for this user
 	ResourcePath string `json:"resourcePath"`
 	// Replies this user has saved
-	SavedReplies *SavedReplyConnection `json:"savedReplies,omitempty"`
-	// List of users and organizations this entity is sponsoring.
-	Sponsoring *SponsorConnection `json:"sponsoring,omitempty"`
-	// List of sponsors for this user or organization.
-	Sponsors *SponsorConnection `json:"sponsors,omitempty"`
-	// Events involving this sponsorable, such as new sponsorships.
-	SponsorsActivities *SponsorsActivityConnection `json:"sponsorsActivities,omitempty"`
+	SavedReplies *SavedReplyConnection `json:"savedReplies"`
 	// The GitHub Sponsors listing for this user or organization.
-	SponsorsListing *SponsorsListing `json:"sponsorsListing,omitempty"`
-	// The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active.
-	SponsorshipForViewerAsSponsor *Sponsorship `json:"sponsorshipForViewerAsSponsor,omitempty"`
-	// The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active.
-	SponsorshipForViewerAsSponsorable *Sponsorship `json:"sponsorshipForViewerAsSponsorable,omitempty"`
-	// List of sponsorship updates sent from this sponsorable to sponsors.
-	SponsorshipNewsletters *SponsorshipNewsletterConnection `json:"sponsorshipNewsletters,omitempty"`
+	SponsorsListing *SponsorsListing `json:"sponsorsListing"`
+	// The viewer's sponsorship of this entity.
+	SponsorshipForViewerAsSponsor *Sponsorship `json:"sponsorshipForViewerAsSponsor"`
 	// This object's sponsorships as the maintainer.
-	SponsorshipsAsMaintainer *SponsorshipConnection `json:"sponsorshipsAsMaintainer,omitempty"`
+	SponsorshipsAsMaintainer *SponsorshipConnection `json:"sponsorshipsAsMaintainer"`
 	// This object's sponsorships as the sponsor.
-	SponsorshipsAsSponsor *SponsorshipConnection `json:"sponsorshipsAsSponsor,omitempty"`
+	SponsorshipsAsSponsor *SponsorshipConnection `json:"sponsorshipsAsSponsor"`
 	// Repositories the user has starred.
-	StarredRepositories *StarredRepositoryConnection `json:"starredRepositories,omitempty"`
+	StarredRepositories *StarredRepositoryConnection `json:"starredRepositories"`
 	// The user's description of what they're currently doing.
-	Status *UserStatus `json:"status,omitempty"`
+	Status *UserStatus `json:"status"`
 	// Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created
 	//
-	TopRepositories *RepositoryConnection `json:"topRepositories,omitempty"`
+	TopRepositories *RepositoryConnection `json:"topRepositories"`
 	// The user's Twitter username.
-	TwitterUsername *string `json:"twitterUsername,omitempty"`
+	TwitterUsername *string `json:"twitterUsername"`
 	// Identifies the date and time when the object was last updated.
 	UpdatedAt time.Time `json:"updatedAt"`
 	// The HTTP URL for this user
@@ -16034,67 +13853,61 @@ type User struct {
 	ViewerCanFollow bool `json:"viewerCanFollow"`
 	// Whether or not the viewer is able to sponsor this user/organization.
 	ViewerCanSponsor bool `json:"viewerCanSponsor"`
-	// Whether or not this user is followed by the viewer. Inverse of is_following_viewer.
+	// Whether or not this user is followed by the viewer.
 	ViewerIsFollowing bool `json:"viewerIsFollowing"`
 	// True if the viewer is sponsoring this user/organization.
 	ViewerIsSponsoring bool `json:"viewerIsSponsoring"`
 	// A list of repositories the given user is watching.
-	Watching *RepositoryConnection `json:"watching,omitempty"`
+	Watching *RepositoryConnection `json:"watching"`
 	// A URL pointing to the user's public website/blog.
-	WebsiteURL *string `json:"websiteUrl,omitempty"`
-}
-
-func (User) IsDeploymentReviewer()                {}
-func (User) IsRequestedReviewer()                 {}
-func (User) IsAuditEntryActor()                   {}
-func (User) IsNode()                              {}
-func (User) IsActor()                             {}
-func (User) IsPackageOwner()                      {}
-func (User) IsProjectOwner()                      {}
-func (User) IsProjectNextOwner()                  {}
-func (User) IsRepositoryDiscussionAuthor()        {}
-func (User) IsRepositoryDiscussionCommentAuthor() {}
-func (User) IsRepositoryOwner()                   {}
-func (User) IsUniformResourceLocatable()          {}
-func (User) IsProfileOwner()                      {}
-func (User) IsSponsorable()                       {}
-func (User) IsBranchActorAllowanceActor()         {}
-func (User) IsReviewDismissalAllowanceActor()     {}
-func (User) IsSearchResultItem()                  {}
-func (User) IsAssignee()                          {}
-func (User) IsPushAllowanceActor()                {}
-func (User) IsSponsorableItem()                   {}
-func (User) IsReactor()                           {}
-func (User) IsSponsor()                           {}
-func (User) IsEnterpriseMember()                  {}
+	WebsiteURL *string `json:"websiteUrl"`
+}
+
+func (User) IsPushAllowanceActor()            {}
+func (User) IsReviewDismissalAllowanceActor() {}
+func (User) IsEnterpriseMember()              {}
+func (User) IsSearchResultItem()              {}
+func (User) IsSponsor()                       {}
+func (User) IsAuditEntryActor()               {}
+func (User) IsRequestedReviewer()             {}
+func (User) IsAssignee()                      {}
+func (User) IsNode()                          {}
+func (User) IsActor()                         {}
+func (User) IsPackageOwner()                  {}
+func (User) IsProjectOwner()                  {}
+func (User) IsRepositoryOwner()               {}
+func (User) IsUniformResourceLocatable()      {}
+func (User) IsProfileOwner()                  {}
+func (User) IsSponsorable()                   {}
+func (User) IsSponsorableItem()               {}
 
 // Represents a 'user_blocked' event on a given user.
 type UserBlockedEvent struct {
 	// Identifies the actor who performed the event.
-	Actor Actor `json:"actor,omitempty"`
+	Actor Actor `json:"actor"`
 	// Number of days that the user was blocked for.
 	BlockDuration UserBlockDuration `json:"blockDuration"`
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	ID        string    `json:"id"`
 	// The user who was blocked.
-	Subject *User `json:"subject,omitempty"`
+	Subject *User `json:"subject"`
 }
 
+func (UserBlockedEvent) IsPullRequestTimelineItems() {}
 func (UserBlockedEvent) IsIssueTimelineItems()       {}
+func (UserBlockedEvent) IsIssueTimelineItem()        {}
 func (UserBlockedEvent) IsNode()                     {}
-func (UserBlockedEvent) IsPullRequestTimelineItems() {}
 func (UserBlockedEvent) IsPullRequestTimelineItem()  {}
-func (UserBlockedEvent) IsIssueTimelineItem()        {}
 
 // The connection type for User.
 type UserConnection struct {
 	// A list of edges.
-	Edges []*UserEdge `json:"edges,omitempty"`
+	Edges []*UserEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*User `json:"nodes,omitempty"`
+	Nodes []*User `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -16104,15 +13917,15 @@ type UserContentEdit struct {
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the date and time when the object was deleted.
-	DeletedAt *time.Time `json:"deletedAt,omitempty"`
+	DeletedAt *time.Time `json:"deletedAt"`
 	// The actor who deleted this content
-	DeletedBy Actor `json:"deletedBy,omitempty"`
+	DeletedBy Actor `json:"deletedBy"`
 	// A summary of the changes for this edit
-	Diff *string `json:"diff,omitempty"`
+	Diff *string `json:"diff"`
 	// When this content was edited
 	EditedAt time.Time `json:"editedAt"`
 	// The actor who edited this content
-	Editor Actor  `json:"editor,omitempty"`
+	Editor Actor  `json:"editor"`
 	ID     string `json:"id"`
 	// Identifies the date and time when the object was last updated.
 	UpdatedAt time.Time `json:"updatedAt"`
@@ -16123,11 +13936,11 @@ func (UserContentEdit) IsNode() {}
 // A list of edits to content.
 type UserContentEditConnection struct {
 	// A list of edges.
-	Edges []*UserContentEditEdge `json:"edges,omitempty"`
+	Edges []*UserContentEditEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*UserContentEdit `json:"nodes,omitempty"`
+	Nodes []*UserContentEdit `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -16137,7 +13950,7 @@ type UserContentEditEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *UserContentEdit `json:"node,omitempty"`
+	Node *UserContentEdit `json:"node"`
 }
 
 // Represents a user.
@@ -16145,15 +13958,15 @@ type UserEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *User `json:"node,omitempty"`
+	Node *User `json:"node"`
 }
 
 // Email attributes from External Identity
 type UserEmailMetadata struct {
 	// Boolean to identify primary emails
-	Primary *bool `json:"primary,omitempty"`
+	Primary *bool `json:"primary"`
 	// Type of email
-	Type *string `json:"type,omitempty"`
+	Type *string `json:"type"`
 	// Email id
 	Value string `json:"value"`
 }
@@ -16163,22 +13976,23 @@ type UserStatus struct {
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// An emoji summarizing the user's status.
-	Emoji *string `json:"emoji,omitempty"`
+	Emoji *string `json:"emoji"`
 	// The status emoji as HTML.
-	EmojiHTML *string `json:"emojiHTML,omitempty"`
+	EmojiHTML *string `json:"emojiHTML"`
 	// If set, the status will not be shown after this date.
-	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
-	ID        string     `json:"id"`
+	ExpiresAt *time.Time `json:"expiresAt"`
+	// ID of the object.
+	ID string `json:"id"`
 	// Whether this status indicates the user is not fully available on GitHub.
 	IndicatesLimitedAvailability bool `json:"indicatesLimitedAvailability"`
 	// A brief message describing what the user is doing.
-	Message *string `json:"message,omitempty"`
+	Message *string `json:"message"`
 	// The organization whose members can see this status. If null, this status is publicly visible.
-	Organization *Organization `json:"organization,omitempty"`
+	Organization *Organization `json:"organization"`
 	// Identifies the date and time when the object was last updated.
 	UpdatedAt time.Time `json:"updatedAt"`
 	// The user who has this status.
-	User *User `json:"user,omitempty"`
+	User *User `json:"user"`
 }
 
 func (UserStatus) IsNode() {}
@@ -16186,11 +14000,11 @@ func (UserStatus) IsNode() {}
 // The connection type for UserStatus.
 type UserStatusConnection struct {
 	// A list of edges.
-	Edges []*UserStatusEdge `json:"edges,omitempty"`
+	Edges []*UserStatusEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*UserStatus `json:"nodes,omitempty"`
+	Nodes []*UserStatus `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -16200,7 +14014,7 @@ type UserStatusEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *UserStatus `json:"node,omitempty"`
+	Node *UserStatus `json:"node"`
 }
 
 // Ordering options for user status connections.
@@ -16211,14 +14025,14 @@ type UserStatusOrder struct {
 	Direction OrderDirection `json:"direction"`
 }
 
-// A domain that can be verified or approved for an organization or an enterprise.
+// A domain that can be verified for an organization or an enterprise.
 type VerifiableDomain struct {
 	// Identifies the date and time when the object was created.
 	CreatedAt time.Time `json:"createdAt"`
 	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
+	DatabaseID *int `json:"databaseId"`
 	// The DNS host name that should be used for verification.
-	DNSHostName *string `json:"dnsHostName,omitempty"`
+	DNSHostName *string `json:"dnsHostName"`
 	// The unicode encoded domain.
 	Domain string `json:"domain"`
 	// Whether a TXT record for verification with the expected host name was found.
@@ -16226,22 +14040,20 @@ type VerifiableDomain struct {
 	// Whether a TXT record for verification with the expected verification token was found.
 	HasFoundVerificationToken bool   `json:"hasFoundVerificationToken"`
 	ID                        string `json:"id"`
-	// Whether or not the domain is approved.
-	IsApproved bool `json:"isApproved"`
 	// Whether this domain is required to exist for an organization or enterprise policy to be enforced.
 	IsRequiredForPolicyEnforcement bool `json:"isRequiredForPolicyEnforcement"`
 	// Whether or not the domain is verified.
 	IsVerified bool `json:"isVerified"`
 	// The owner of the domain.
-	Owner VerifiableDomainOwner `json:"owner,omitempty"`
+	Owner VerifiableDomainOwner `json:"owner"`
 	// The punycode encoded domain.
 	PunycodeEncodedDomain string `json:"punycodeEncodedDomain"`
 	// The time that the current verification token will expire.
-	TokenExpirationTime *time.Time `json:"tokenExpirationTime,omitempty"`
+	TokenExpirationTime *time.Time `json:"tokenExpirationTime"`
 	// Identifies the date and time when the object was last updated.
 	UpdatedAt time.Time `json:"updatedAt"`
 	// The current verification token for the domain.
-	VerificationToken *string `json:"verificationToken,omitempty"`
+	VerificationToken *string `json:"verificationToken"`
 }
 
 func (VerifiableDomain) IsNode() {}
@@ -16249,11 +14061,11 @@ func (VerifiableDomain) IsNode() {}
 // The connection type for VerifiableDomain.
 type VerifiableDomainConnection struct {
 	// A list of edges.
-	Edges []*VerifiableDomainEdge `json:"edges,omitempty"`
+	Edges []*VerifiableDomainEdge `json:"edges"`
 	// A list of nodes.
-	Nodes []*VerifiableDomain `json:"nodes,omitempty"`
+	Nodes []*VerifiableDomain `json:"nodes"`
 	// Information to aid in pagination.
-	PageInfo *PageInfo `json:"pageInfo,omitempty"`
+	PageInfo *PageInfo `json:"pageInfo"`
 	// Identifies the total count of items in the connection.
 	TotalCount int `json:"totalCount"`
 }
@@ -16263,7 +14075,7 @@ type VerifiableDomainEdge struct {
 	// A cursor for use in pagination.
 	Cursor string `json:"cursor"`
 	// The item at the end of the edge.
-	Node *VerifiableDomain `json:"node,omitempty"`
+	Node *VerifiableDomain `json:"node"`
 }
 
 // Ordering options for verifiable domain connections.
@@ -16279,114 +14091,28 @@ type VerifyVerifiableDomainInput struct {
 	// The ID of the verifiable domain to verify.
 	ID string `json:"id"`
 	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-}
-
-// Autogenerated return type of VerifyVerifiableDomain
-type VerifyVerifiableDomainPayload struct {
-	// A unique identifier for the client performing the mutation.
-	ClientMutationID *string `json:"clientMutationId,omitempty"`
-	// The verifiable domain that was verified.
-	Domain *VerifiableDomain `json:"domain,omitempty"`
-}
-
-// A hovercard context with a message describing how the viewer is related.
-type ViewerHovercardContext struct {
-	// A string describing this context
-	Message string `json:"message"`
-	// An octicon to accompany this context
-	Octicon string `json:"octicon"`
-	// Identifies the user who is related to this context.
-	Viewer *User `json:"viewer,omitempty"`
-}
-
-func (ViewerHovercardContext) IsHovercardContext() {}
-
-// A workflow contains meta information about an Actions workflow file.
-type Workflow struct {
-	// Identifies the date and time when the object was created.
-	CreatedAt time.Time `json:"createdAt"`
-	// Identifies the primary key from the database.
-	DatabaseID *int   `json:"databaseId,omitempty"`
-	ID         string `json:"id"`
-	// The name of the workflow.
-	Name string `json:"name"`
-	// Identifies the date and time when the object was last updated.
-	UpdatedAt time.Time `json:"updatedAt"`
-}
-
-func (Workflow) IsNode() {}
-
-// A workflow run.
-type WorkflowRun struct {
-	// The check suite this workflow run belongs to.
-	CheckSuite *CheckSuite `json:"checkSuite,omitempty"`
-	// Identifies the date and time when the object was created.
-	CreatedAt time.Time `json:"createdAt"`
-	// Identifies the primary key from the database.
-	DatabaseID *int `json:"databaseId,omitempty"`
-	// The log of deployment reviews
-	DeploymentReviews *DeploymentReviewConnection `json:"deploymentReviews,omitempty"`
-	ID                string                      `json:"id"`
-	// The pending deployment requests of all check runs in this workflow run
-	PendingDeploymentRequests *DeploymentRequestConnection `json:"pendingDeploymentRequests,omitempty"`
-	// The HTTP path for this workflow run
-	ResourcePath string `json:"resourcePath"`
-	// A number that uniquely identifies this workflow run in its parent workflow.
-	RunNumber int `json:"runNumber"`
-	// Identifies the date and time when the object was last updated.
-	UpdatedAt time.Time `json:"updatedAt"`
-	// The HTTP URL for this workflow run
-	URL string `json:"url"`
-	// The workflow executed in this workflow run.
-	Workflow *Workflow `json:"workflow,omitempty"`
-}
-
-func (WorkflowRun) IsNode() {}
-
-// The actor's type.
-type ActorType string
-
-const (
-	// Indicates a user actor.
-	ActorTypeUser ActorType = "USER"
-	// Indicates a team actor.
-	ActorTypeTeam ActorType = "TEAM"
-)
-
-var AllActorType = []ActorType{
-	ActorTypeUser,
-	ActorTypeTeam,
-}
-
-func (e ActorType) IsValid() bool {
-	switch e {
-	case ActorTypeUser, ActorTypeTeam:
-		return true
-	}
-	return false
+	ClientMutationID *string `json:"clientMutationId"`
 }
 
-func (e ActorType) String() string {
-	return string(e)
+// Autogenerated return type of VerifyVerifiableDomain
+type VerifyVerifiableDomainPayload struct {
+	// A unique identifier for the client performing the mutation.
+	ClientMutationID *string `json:"clientMutationId"`
+	// The verifiable domain that was verified.
+	Domain *VerifiableDomain `json:"domain"`
 }
 
-func (e *ActorType) UnmarshalGQL(v interface{}) error {
-	str, ok := v.(string)
-	if !ok {
-		return fmt.Errorf("enums must be strings")
-	}
-
-	*e = ActorType(str)
-	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid ActorType", str)
-	}
-	return nil
+// A hovercard context with a message describing how the viewer is related.
+type ViewerHovercardContext struct {
+	// A string describing this context
+	Message string `json:"message"`
+	// An octicon to accompany this context
+	Octicon string `json:"octicon"`
+	// Identifies the user who is related to this context.
+	Viewer *User `json:"viewer"`
 }
 
-func (e ActorType) MarshalGQL(w io.Writer) {
-	fmt.Fprint(w, strconv.Quote(e.String()))
-}
+func (ViewerHovercardContext) IsHovercardContext() {}
 
 // Properties by which Audit Log connections can be ordered.
 type AuditLogOrderField string
@@ -16597,8 +14323,6 @@ const (
 	CheckStatusStateCompleted CheckStatusState = "COMPLETED"
 	// The check suite or run is in waiting state.
 	CheckStatusStateWaiting CheckStatusState = "WAITING"
-	// The check suite or run is in pending state.
-	CheckStatusStatePending CheckStatusState = "PENDING"
 	// The check suite or run has been requested.
 	CheckStatusStateRequested CheckStatusState = "REQUESTED"
 )
@@ -16608,13 +14332,12 @@ var AllCheckStatusState = []CheckStatusState{
 	CheckStatusStateInProgress,
 	CheckStatusStateCompleted,
 	CheckStatusStateWaiting,
-	CheckStatusStatePending,
 	CheckStatusStateRequested,
 }
 
 func (e CheckStatusState) IsValid() bool {
 	switch e {
-	case CheckStatusStateQueued, CheckStatusStateInProgress, CheckStatusStateCompleted, CheckStatusStateWaiting, CheckStatusStatePending, CheckStatusStateRequested:
+	case CheckStatusStateQueued, CheckStatusStateInProgress, CheckStatusStateCompleted, CheckStatusStateWaiting, CheckStatusStateRequested:
 		return true
 	}
 	return false
@@ -16906,7 +14629,7 @@ func (e ContributionLevel) MarshalGQL(w io.Writer) {
 	fmt.Fprint(w, strconv.Quote(e.String()))
 }
 
-// The possible base permissions for repositories.
+// The possible default permissions for repositories.
 type DefaultRepositoryPermissionField string
 
 const (
@@ -16956,68 +14679,6 @@ func (e DefaultRepositoryPermissionField) MarshalGQL(w io.Writer) {
 	fmt.Fprint(w, strconv.Quote(e.String()))
 }
 
-// The possible ecosystems of a dependency graph package.
-type DependencyGraphEcosystem string
-
-const (
-	// Ruby gems hosted at RubyGems.org
-	DependencyGraphEcosystemRubygems DependencyGraphEcosystem = "RUBYGEMS"
-	// JavaScript packages hosted at npmjs.com
-	DependencyGraphEcosystemNpm DependencyGraphEcosystem = "NPM"
-	// Python packages hosted at PyPI.org
-	DependencyGraphEcosystemPip DependencyGraphEcosystem = "PIP"
-	// Java artifacts hosted at the Maven central repository
-	DependencyGraphEcosystemMaven DependencyGraphEcosystem = "MAVEN"
-	// .NET packages hosted at the NuGet Gallery
-	DependencyGraphEcosystemNuget DependencyGraphEcosystem = "NUGET"
-	// PHP packages hosted at packagist.org
-	DependencyGraphEcosystemComposer DependencyGraphEcosystem = "COMPOSER"
-	// Go modules
-	DependencyGraphEcosystemGo DependencyGraphEcosystem = "GO"
-	// GitHub Actions
-	DependencyGraphEcosystemActions DependencyGraphEcosystem = "ACTIONS"
-)
-
-var AllDependencyGraphEcosystem = []DependencyGraphEcosystem{
-	DependencyGraphEcosystemRubygems,
-	DependencyGraphEcosystemNpm,
-	DependencyGraphEcosystemPip,
-	DependencyGraphEcosystemMaven,
-	DependencyGraphEcosystemNuget,
-	DependencyGraphEcosystemComposer,
-	DependencyGraphEcosystemGo,
-	DependencyGraphEcosystemActions,
-}
-
-func (e DependencyGraphEcosystem) IsValid() bool {
-	switch e {
-	case DependencyGraphEcosystemRubygems, DependencyGraphEcosystemNpm, DependencyGraphEcosystemPip, DependencyGraphEcosystemMaven, DependencyGraphEcosystemNuget, DependencyGraphEcosystemComposer, DependencyGraphEcosystemGo, DependencyGraphEcosystemActions:
-		return true
-	}
-	return false
-}
-
-func (e DependencyGraphEcosystem) String() string {
-	return string(e)
-}
-
-func (e *DependencyGraphEcosystem) UnmarshalGQL(v interface{}) error {
-	str, ok := v.(string)
-	if !ok {
-		return fmt.Errorf("enums must be strings")
-	}
-
-	*e = DependencyGraphEcosystem(str)
-	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid DependencyGraphEcosystem", str)
-	}
-	return nil
-}
-
-func (e DependencyGraphEcosystem) MarshalGQL(w io.Writer) {
-	fmt.Fprint(w, strconv.Quote(e.String()))
-}
-
 // Properties by which deployment connections can be ordered.
 type DeploymentOrderField string
 
@@ -17059,94 +14720,6 @@ func (e DeploymentOrderField) MarshalGQL(w io.Writer) {
 	fmt.Fprint(w, strconv.Quote(e.String()))
 }
 
-// The possible protection rule types.
-type DeploymentProtectionRuleType string
-
-const (
-	// Required reviewers
-	DeploymentProtectionRuleTypeRequiredReviewers DeploymentProtectionRuleType = "REQUIRED_REVIEWERS"
-	// Wait timer
-	DeploymentProtectionRuleTypeWaitTimer DeploymentProtectionRuleType = "WAIT_TIMER"
-)
-
-var AllDeploymentProtectionRuleType = []DeploymentProtectionRuleType{
-	DeploymentProtectionRuleTypeRequiredReviewers,
-	DeploymentProtectionRuleTypeWaitTimer,
-}
-
-func (e DeploymentProtectionRuleType) IsValid() bool {
-	switch e {
-	case DeploymentProtectionRuleTypeRequiredReviewers, DeploymentProtectionRuleTypeWaitTimer:
-		return true
-	}
-	return false
-}
-
-func (e DeploymentProtectionRuleType) String() string {
-	return string(e)
-}
-
-func (e *DeploymentProtectionRuleType) UnmarshalGQL(v interface{}) error {
-	str, ok := v.(string)
-	if !ok {
-		return fmt.Errorf("enums must be strings")
-	}
-
-	*e = DeploymentProtectionRuleType(str)
-	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid DeploymentProtectionRuleType", str)
-	}
-	return nil
-}
-
-func (e DeploymentProtectionRuleType) MarshalGQL(w io.Writer) {
-	fmt.Fprint(w, strconv.Quote(e.String()))
-}
-
-// The possible states for a deployment review.
-type DeploymentReviewState string
-
-const (
-	// The deployment was approved.
-	DeploymentReviewStateApproved DeploymentReviewState = "APPROVED"
-	// The deployment was rejected.
-	DeploymentReviewStateRejected DeploymentReviewState = "REJECTED"
-)
-
-var AllDeploymentReviewState = []DeploymentReviewState{
-	DeploymentReviewStateApproved,
-	DeploymentReviewStateRejected,
-}
-
-func (e DeploymentReviewState) IsValid() bool {
-	switch e {
-	case DeploymentReviewStateApproved, DeploymentReviewStateRejected:
-		return true
-	}
-	return false
-}
-
-func (e DeploymentReviewState) String() string {
-	return string(e)
-}
-
-func (e *DeploymentReviewState) UnmarshalGQL(v interface{}) error {
-	str, ok := v.(string)
-	if !ok {
-		return fmt.Errorf("enums must be strings")
-	}
-
-	*e = DeploymentReviewState(str)
-	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid DeploymentReviewState", str)
-	}
-	return nil
-}
-
-func (e DeploymentReviewState) MarshalGQL(w io.Writer) {
-	fmt.Fprint(w, strconv.Quote(e.String()))
-}
-
 // The possible states in which a deployment can be.
 type DeploymentState string
 
@@ -17321,103 +14894,6 @@ func (e DiffSide) MarshalGQL(w io.Writer) {
 	fmt.Fprint(w, strconv.Quote(e.String()))
 }
 
-// Properties by which discussion connections can be ordered.
-type DiscussionOrderField string
-
-const (
-	// Order discussions by creation time.
-	DiscussionOrderFieldCreatedAt DiscussionOrderField = "CREATED_AT"
-	// Order discussions by most recent modification time.
-	DiscussionOrderFieldUpdatedAt DiscussionOrderField = "UPDATED_AT"
-)
-
-var AllDiscussionOrderField = []DiscussionOrderField{
-	DiscussionOrderFieldCreatedAt,
-	DiscussionOrderFieldUpdatedAt,
-}
-
-func (e DiscussionOrderField) IsValid() bool {
-	switch e {
-	case DiscussionOrderFieldCreatedAt, DiscussionOrderFieldUpdatedAt:
-		return true
-	}
-	return false
-}
-
-func (e DiscussionOrderField) String() string {
-	return string(e)
-}
-
-func (e *DiscussionOrderField) UnmarshalGQL(v interface{}) error {
-	str, ok := v.(string)
-	if !ok {
-		return fmt.Errorf("enums must be strings")
-	}
-
-	*e = DiscussionOrderField(str)
-	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid DiscussionOrderField", str)
-	}
-	return nil
-}
-
-func (e DiscussionOrderField) MarshalGQL(w io.Writer) {
-	fmt.Fprint(w, strconv.Quote(e.String()))
-}
-
-// The possible reasons that a Dependabot alert was dismissed.
-type DismissReason string
-
-const (
-	// A fix has already been started
-	DismissReasonFixStarted DismissReason = "FIX_STARTED"
-	// No bandwidth to fix this
-	DismissReasonNoBandwidth DismissReason = "NO_BANDWIDTH"
-	// Risk is tolerable to this project
-	DismissReasonTolerableRisk DismissReason = "TOLERABLE_RISK"
-	// This alert is inaccurate or incorrect
-	DismissReasonInaccurate DismissReason = "INACCURATE"
-	// Vulnerable code is not actually used
-	DismissReasonNotUsed DismissReason = "NOT_USED"
-)
-
-var AllDismissReason = []DismissReason{
-	DismissReasonFixStarted,
-	DismissReasonNoBandwidth,
-	DismissReasonTolerableRisk,
-	DismissReasonInaccurate,
-	DismissReasonNotUsed,
-}
-
-func (e DismissReason) IsValid() bool {
-	switch e {
-	case DismissReasonFixStarted, DismissReasonNoBandwidth, DismissReasonTolerableRisk, DismissReasonInaccurate, DismissReasonNotUsed:
-		return true
-	}
-	return false
-}
-
-func (e DismissReason) String() string {
-	return string(e)
-}
-
-func (e *DismissReason) UnmarshalGQL(v interface{}) error {
-	str, ok := v.(string)
-	if !ok {
-		return fmt.Errorf("enums must be strings")
-	}
-
-	*e = DismissReason(str)
-	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid DismissReason", str)
-	}
-	return nil
-}
-
-func (e DismissReason) MarshalGQL(w io.Writer) {
-	fmt.Fprint(w, strconv.Quote(e.String()))
-}
-
 // Properties by which enterprise administrator invitation connections can be ordered.
 type EnterpriseAdministratorInvitationOrderField string
 
@@ -17503,11 +14979,11 @@ func (e EnterpriseAdministratorRole) MarshalGQL(w io.Writer) {
 	fmt.Fprint(w, strconv.Quote(e.String()))
 }
 
-// The possible values for the enterprise base repository permission setting.
+// The possible values for the enterprise default repository permission setting.
 type EnterpriseDefaultRepositoryPermissionSettingValue string
 
 const (
-	// Organizations in the enterprise choose base repository permissions for their members.
+	// Organizations in the enterprise choose default repository permissions for their members.
 	EnterpriseDefaultRepositoryPermissionSettingValueNoPolicy EnterpriseDefaultRepositoryPermissionSettingValue = "NO_POLICY"
 	// Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories.
 	EnterpriseDefaultRepositoryPermissionSettingValueAdmin EnterpriseDefaultRepositoryPermissionSettingValue = "ADMIN"
@@ -18165,8 +15641,6 @@ const (
 	FundingPlatformIssuehunt FundingPlatform = "ISSUEHUNT"
 	// Otechie funding platform.
 	FundingPlatformOtechie FundingPlatform = "OTECHIE"
-	// LFX Crowdfunding funding platform.
-	FundingPlatformLfxCrowdfunding FundingPlatform = "LFX_CROWDFUNDING"
 	// Custom funding platform.
 	FundingPlatformCustom FundingPlatform = "CUSTOM"
 )
@@ -18181,13 +15655,12 @@ var AllFundingPlatform = []FundingPlatform{
 	FundingPlatformLiberapay,
 	FundingPlatformIssuehunt,
 	FundingPlatformOtechie,
-	FundingPlatformLfxCrowdfunding,
 	FundingPlatformCustom,
 }
 
 func (e FundingPlatform) IsValid() bool {
 	switch e {
-	case FundingPlatformGithub, FundingPlatformPatreon, FundingPlatformOpenCollective, FundingPlatformKoFi, FundingPlatformTidelift, FundingPlatformCommunityBridge, FundingPlatformLiberapay, FundingPlatformIssuehunt, FundingPlatformOtechie, FundingPlatformLfxCrowdfunding, FundingPlatformCustom:
+	case FundingPlatformGithub, FundingPlatformPatreon, FundingPlatformOpenCollective, FundingPlatformKoFi, FundingPlatformTidelift, FundingPlatformCommunityBridge, FundingPlatformLiberapay, FundingPlatformIssuehunt, FundingPlatformOtechie, FundingPlatformCustom:
 		return true
 	}
 	return false
@@ -18532,50 +16005,6 @@ func (e IPAllowListEntryOrderField) MarshalGQL(w io.Writer) {
 	fmt.Fprint(w, strconv.Quote(e.String()))
 }
 
-// The possible values for the IP allow list configuration for installed GitHub Apps setting.
-type IPAllowListForInstalledAppsEnabledSettingValue string
-
-const (
-	// The setting is enabled for the owner.
-	IPAllowListForInstalledAppsEnabledSettingValueEnabled IPAllowListForInstalledAppsEnabledSettingValue = "ENABLED"
-	// The setting is disabled for the owner.
-	IPAllowListForInstalledAppsEnabledSettingValueDisabled IPAllowListForInstalledAppsEnabledSettingValue = "DISABLED"
-)
-
-var AllIPAllowListForInstalledAppsEnabledSettingValue = []IPAllowListForInstalledAppsEnabledSettingValue{
-	IPAllowListForInstalledAppsEnabledSettingValueEnabled,
-	IPAllowListForInstalledAppsEnabledSettingValueDisabled,
-}
-
-func (e IPAllowListForInstalledAppsEnabledSettingValue) IsValid() bool {
-	switch e {
-	case IPAllowListForInstalledAppsEnabledSettingValueEnabled, IPAllowListForInstalledAppsEnabledSettingValueDisabled:
-		return true
-	}
-	return false
-}
-
-func (e IPAllowListForInstalledAppsEnabledSettingValue) String() string {
-	return string(e)
-}
-
-func (e *IPAllowListForInstalledAppsEnabledSettingValue) UnmarshalGQL(v interface{}) error {
-	str, ok := v.(string)
-	if !ok {
-		return fmt.Errorf("enums must be strings")
-	}
-
-	*e = IPAllowListForInstalledAppsEnabledSettingValue(str)
-	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid IpAllowListForInstalledAppsEnabledSettingValue", str)
-	}
-	return nil
-}
-
-func (e IPAllowListForInstalledAppsEnabledSettingValue) MarshalGQL(w io.Writer) {
-	fmt.Fprint(w, strconv.Quote(e.String()))
-}
-
 // Properties by which issue comment connections can be ordered.
 type IssueCommentOrderField string
 
@@ -18728,8 +16157,6 @@ const (
 	IssueTimelineItemsItemTypeConnectedEvent IssueTimelineItemsItemType = "CONNECTED_EVENT"
 	// Represents a 'converted_note_to_issue' event on a given issue or pull request.
 	IssueTimelineItemsItemTypeConvertedNoteToIssueEvent IssueTimelineItemsItemType = "CONVERTED_NOTE_TO_ISSUE_EVENT"
-	// Represents a 'converted_to_discussion' event on a given issue.
-	IssueTimelineItemsItemTypeConvertedToDiscussionEvent IssueTimelineItemsItemType = "CONVERTED_TO_DISCUSSION_EVENT"
 	// Represents a 'demilestoned' event on a given issue or pull request.
 	IssueTimelineItemsItemTypeDemilestonedEvent IssueTimelineItemsItemType = "DEMILESTONED_EVENT"
 	// Represents a 'disconnected' event on a given issue or pull request.
@@ -18785,7 +16212,6 @@ var AllIssueTimelineItemsItemType = []IssueTimelineItemsItemType{
 	IssueTimelineItemsItemTypeCommentDeletedEvent,
 	IssueTimelineItemsItemTypeConnectedEvent,
 	IssueTimelineItemsItemTypeConvertedNoteToIssueEvent,
-	IssueTimelineItemsItemTypeConvertedToDiscussionEvent,
 	IssueTimelineItemsItemTypeDemilestonedEvent,
 	IssueTimelineItemsItemTypeDisconnectedEvent,
 	IssueTimelineItemsItemTypeLabeledEvent,
@@ -18812,7 +16238,7 @@ var AllIssueTimelineItemsItemType = []IssueTimelineItemsItemType{
 
 func (e IssueTimelineItemsItemType) IsValid() bool {
 	switch e {
-	case IssueTimelineItemsItemTypeIssueComment, IssueTimelineItemsItemTypeCrossReferencedEvent, IssueTimelineItemsItemTypeAddedToProjectEvent, IssueTimelineItemsItemTypeAssignedEvent, IssueTimelineItemsItemTypeClosedEvent, IssueTimelineItemsItemTypeCommentDeletedEvent, IssueTimelineItemsItemTypeConnectedEvent, IssueTimelineItemsItemTypeConvertedNoteToIssueEvent, IssueTimelineItemsItemTypeConvertedToDiscussionEvent, IssueTimelineItemsItemTypeDemilestonedEvent, IssueTimelineItemsItemTypeDisconnectedEvent, IssueTimelineItemsItemTypeLabeledEvent, IssueTimelineItemsItemTypeLockedEvent, IssueTimelineItemsItemTypeMarkedAsDuplicateEvent, IssueTimelineItemsItemTypeMentionedEvent, IssueTimelineItemsItemTypeMilestonedEvent, IssueTimelineItemsItemTypeMovedColumnsInProjectEvent, IssueTimelineItemsItemTypePinnedEvent, IssueTimelineItemsItemTypeReferencedEvent, IssueTimelineItemsItemTypeRemovedFromProjectEvent, IssueTimelineItemsItemTypeRenamedTitleEvent, IssueTimelineItemsItemTypeReopenedEvent, IssueTimelineItemsItemTypeSubscribedEvent, IssueTimelineItemsItemTypeTransferredEvent, IssueTimelineItemsItemTypeUnassignedEvent, IssueTimelineItemsItemTypeUnlabeledEvent, IssueTimelineItemsItemTypeUnlockedEvent, IssueTimelineItemsItemTypeUserBlockedEvent, IssueTimelineItemsItemTypeUnmarkedAsDuplicateEvent, IssueTimelineItemsItemTypeUnpinnedEvent, IssueTimelineItemsItemTypeUnsubscribedEvent:
+	case IssueTimelineItemsItemTypeIssueComment, IssueTimelineItemsItemTypeCrossReferencedEvent, IssueTimelineItemsItemTypeAddedToProjectEvent, IssueTimelineItemsItemTypeAssignedEvent, IssueTimelineItemsItemTypeClosedEvent, IssueTimelineItemsItemTypeCommentDeletedEvent, IssueTimelineItemsItemTypeConnectedEvent, IssueTimelineItemsItemTypeConvertedNoteToIssueEvent, IssueTimelineItemsItemTypeDemilestonedEvent, IssueTimelineItemsItemTypeDisconnectedEvent, IssueTimelineItemsItemTypeLabeledEvent, IssueTimelineItemsItemTypeLockedEvent, IssueTimelineItemsItemTypeMarkedAsDuplicateEvent, IssueTimelineItemsItemTypeMentionedEvent, IssueTimelineItemsItemTypeMilestonedEvent, IssueTimelineItemsItemTypeMovedColumnsInProjectEvent, IssueTimelineItemsItemTypePinnedEvent, IssueTimelineItemsItemTypeReferencedEvent, IssueTimelineItemsItemTypeRemovedFromProjectEvent, IssueTimelineItemsItemTypeRenamedTitleEvent, IssueTimelineItemsItemTypeReopenedEvent, IssueTimelineItemsItemTypeSubscribedEvent, IssueTimelineItemsItemTypeTransferredEvent, IssueTimelineItemsItemTypeUnassignedEvent, IssueTimelineItemsItemTypeUnlabeledEvent, IssueTimelineItemsItemTypeUnlockedEvent, IssueTimelineItemsItemTypeUserBlockedEvent, IssueTimelineItemsItemTypeUnmarkedAsDuplicateEvent, IssueTimelineItemsItemTypeUnpinnedEvent, IssueTimelineItemsItemTypeUnsubscribedEvent:
 		return true
 	}
 	return false
@@ -19017,113 +16443,7 @@ func (e *MergeableState) UnmarshalGQL(v interface{}) error {
 	return nil
 }
 
-func (e MergeableState) MarshalGQL(w io.Writer) {
-	fmt.Fprint(w, strconv.Quote(e.String()))
-}
-
-// Represents the different Octoshift migration sources.
-type MigrationSourceType string
-
-const (
-	// A GitLab migration source.
-	MigrationSourceTypeGitlab MigrationSourceType = "GITLAB"
-	// An Azure DevOps migration source.
-	MigrationSourceTypeAzureDevops MigrationSourceType = "AZURE_DEVOPS"
-	// A Bitbucket Server migration source.
-	MigrationSourceTypeBitbucketServer MigrationSourceType = "BITBUCKET_SERVER"
-	// A GitHub migration source.
-	MigrationSourceTypeGithub MigrationSourceType = "GITHUB"
-	// A GitHub Migration API source.
-	MigrationSourceTypeGithubArchive MigrationSourceType = "GITHUB_ARCHIVE"
-)
-
-var AllMigrationSourceType = []MigrationSourceType{
-	MigrationSourceTypeGitlab,
-	MigrationSourceTypeAzureDevops,
-	MigrationSourceTypeBitbucketServer,
-	MigrationSourceTypeGithub,
-	MigrationSourceTypeGithubArchive,
-}
-
-func (e MigrationSourceType) IsValid() bool {
-	switch e {
-	case MigrationSourceTypeGitlab, MigrationSourceTypeAzureDevops, MigrationSourceTypeBitbucketServer, MigrationSourceTypeGithub, MigrationSourceTypeGithubArchive:
-		return true
-	}
-	return false
-}
-
-func (e MigrationSourceType) String() string {
-	return string(e)
-}
-
-func (e *MigrationSourceType) UnmarshalGQL(v interface{}) error {
-	str, ok := v.(string)
-	if !ok {
-		return fmt.Errorf("enums must be strings")
-	}
-
-	*e = MigrationSourceType(str)
-	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid MigrationSourceType", str)
-	}
-	return nil
-}
-
-func (e MigrationSourceType) MarshalGQL(w io.Writer) {
-	fmt.Fprint(w, strconv.Quote(e.String()))
-}
-
-// The Octoshift migration state.
-type MigrationState string
-
-const (
-	// The Octoshift migration has not started.
-	MigrationStateNotStarted MigrationState = "NOT_STARTED"
-	// The Octoshift migration has been queued.
-	MigrationStateQueued MigrationState = "QUEUED"
-	// The Octoshift migration is in progress.
-	MigrationStateInProgress MigrationState = "IN_PROGRESS"
-	// The Octoshift migration has succeeded.
-	MigrationStateSucceeded MigrationState = "SUCCEEDED"
-	// The Octoshift migration has failed.
-	MigrationStateFailed MigrationState = "FAILED"
-)
-
-var AllMigrationState = []MigrationState{
-	MigrationStateNotStarted,
-	MigrationStateQueued,
-	MigrationStateInProgress,
-	MigrationStateSucceeded,
-	MigrationStateFailed,
-}
-
-func (e MigrationState) IsValid() bool {
-	switch e {
-	case MigrationStateNotStarted, MigrationStateQueued, MigrationStateInProgress, MigrationStateSucceeded, MigrationStateFailed:
-		return true
-	}
-	return false
-}
-
-func (e MigrationState) String() string {
-	return string(e)
-}
-
-func (e *MigrationState) UnmarshalGQL(v interface{}) error {
-	str, ok := v.(string)
-	if !ok {
-		return fmt.Errorf("enums must be strings")
-	}
-
-	*e = MigrationState(str)
-	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid MigrationState", str)
-	}
-	return nil
-}
-
-func (e MigrationState) MarshalGQL(w io.Writer) {
+func (e MergeableState) MarshalGQL(w io.Writer) {
 	fmt.Fprint(w, strconv.Quote(e.String()))
 }
 
@@ -19265,47 +16585,6 @@ func (e NotificationRestrictionSettingValue) MarshalGQL(w io.Writer) {
 	fmt.Fprint(w, strconv.Quote(e.String()))
 }
 
-// The OIDC identity provider type
-type OIDCProviderType string
-
-const (
-	// Azure Active Directory
-	OIDCProviderTypeAad OIDCProviderType = "AAD"
-)
-
-var AllOIDCProviderType = []OIDCProviderType{
-	OIDCProviderTypeAad,
-}
-
-func (e OIDCProviderType) IsValid() bool {
-	switch e {
-	case OIDCProviderTypeAad:
-		return true
-	}
-	return false
-}
-
-func (e OIDCProviderType) String() string {
-	return string(e)
-}
-
-func (e *OIDCProviderType) UnmarshalGQL(v interface{}) error {
-	str, ok := v.(string)
-	if !ok {
-		return fmt.Errorf("enums must be strings")
-	}
-
-	*e = OIDCProviderType(str)
-	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid OIDCProviderType", str)
-	}
-	return nil
-}
-
-func (e OIDCProviderType) MarshalGQL(w io.Writer) {
-	fmt.Fprint(w, strconv.Quote(e.String()))
-}
-
 // The state of an OAuth Application when it was created.
 type OauthApplicationCreateAuditEntryState string
 
@@ -19553,47 +16832,6 @@ func (e OrgCreateAuditEntryBillingPlan) MarshalGQL(w io.Writer) {
 	fmt.Fprint(w, strconv.Quote(e.String()))
 }
 
-// Properties by which enterprise owners can be ordered.
-type OrgEnterpriseOwnerOrderField string
-
-const (
-	// Order enterprise owners by login.
-	OrgEnterpriseOwnerOrderFieldLogin OrgEnterpriseOwnerOrderField = "LOGIN"
-)
-
-var AllOrgEnterpriseOwnerOrderField = []OrgEnterpriseOwnerOrderField{
-	OrgEnterpriseOwnerOrderFieldLogin,
-}
-
-func (e OrgEnterpriseOwnerOrderField) IsValid() bool {
-	switch e {
-	case OrgEnterpriseOwnerOrderFieldLogin:
-		return true
-	}
-	return false
-}
-
-func (e OrgEnterpriseOwnerOrderField) String() string {
-	return string(e)
-}
-
-func (e *OrgEnterpriseOwnerOrderField) UnmarshalGQL(v interface{}) error {
-	str, ok := v.(string)
-	if !ok {
-		return fmt.Errorf("enums must be strings")
-	}
-
-	*e = OrgEnterpriseOwnerOrderField(str)
-	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid OrgEnterpriseOwnerOrderField", str)
-	}
-	return nil
-}
-
-func (e OrgEnterpriseOwnerOrderField) MarshalGQL(w io.Writer) {
-	fmt.Fprint(w, strconv.Quote(e.String()))
-}
-
 // The reason a billing manager was removed from an Organization.
 type OrgRemoveBillingManagerAuditEntryReason string
 
@@ -20140,8 +17378,6 @@ const (
 	OrganizationMembersCanCreateRepositoriesSettingValueAll OrganizationMembersCanCreateRepositoriesSettingValue = "ALL"
 	// Members will be able to create only private repositories.
 	OrganizationMembersCanCreateRepositoriesSettingValuePrivate OrganizationMembersCanCreateRepositoriesSettingValue = "PRIVATE"
-	// Members will be able to create only internal repositories.
-	OrganizationMembersCanCreateRepositoriesSettingValueInternal OrganizationMembersCanCreateRepositoriesSettingValue = "INTERNAL"
 	// Members will not be able to create public or private repositories.
 	OrganizationMembersCanCreateRepositoriesSettingValueDisabled OrganizationMembersCanCreateRepositoriesSettingValue = "DISABLED"
 )
@@ -20149,13 +17385,12 @@ const (
 var AllOrganizationMembersCanCreateRepositoriesSettingValue = []OrganizationMembersCanCreateRepositoriesSettingValue{
 	OrganizationMembersCanCreateRepositoriesSettingValueAll,
 	OrganizationMembersCanCreateRepositoriesSettingValuePrivate,
-	OrganizationMembersCanCreateRepositoriesSettingValueInternal,
 	OrganizationMembersCanCreateRepositoriesSettingValueDisabled,
 }
 
 func (e OrganizationMembersCanCreateRepositoriesSettingValue) IsValid() bool {
 	switch e {
-	case OrganizationMembersCanCreateRepositoriesSettingValueAll, OrganizationMembersCanCreateRepositoriesSettingValuePrivate, OrganizationMembersCanCreateRepositoriesSettingValueInternal, OrganizationMembersCanCreateRepositoriesSettingValueDisabled:
+	case OrganizationMembersCanCreateRepositoriesSettingValueAll, OrganizationMembersCanCreateRepositoriesSettingValuePrivate, OrganizationMembersCanCreateRepositoriesSettingValueDisabled:
 		return true
 	}
 	return false
@@ -20470,115 +17705,6 @@ func (e PinnableItemType) MarshalGQL(w io.Writer) {
 	fmt.Fprint(w, strconv.Quote(e.String()))
 }
 
-// Preconfigured gradients that may be used to style discussions pinned within a repository.
-type PinnedDiscussionGradient string
-
-const (
-	// A gradient of red to orange
-	PinnedDiscussionGradientRedOrange PinnedDiscussionGradient = "RED_ORANGE"
-	// A gradient of blue to mint
-	PinnedDiscussionGradientBlueMint PinnedDiscussionGradient = "BLUE_MINT"
-	// A gradient of blue to purple
-	PinnedDiscussionGradientBluePurple PinnedDiscussionGradient = "BLUE_PURPLE"
-	// A gradient of pink to blue
-	PinnedDiscussionGradientPinkBlue PinnedDiscussionGradient = "PINK_BLUE"
-	// A gradient of purple to coral
-	PinnedDiscussionGradientPurpleCoral PinnedDiscussionGradient = "PURPLE_CORAL"
-)
-
-var AllPinnedDiscussionGradient = []PinnedDiscussionGradient{
-	PinnedDiscussionGradientRedOrange,
-	PinnedDiscussionGradientBlueMint,
-	PinnedDiscussionGradientBluePurple,
-	PinnedDiscussionGradientPinkBlue,
-	PinnedDiscussionGradientPurpleCoral,
-}
-
-func (e PinnedDiscussionGradient) IsValid() bool {
-	switch e {
-	case PinnedDiscussionGradientRedOrange, PinnedDiscussionGradientBlueMint, PinnedDiscussionGradientBluePurple, PinnedDiscussionGradientPinkBlue, PinnedDiscussionGradientPurpleCoral:
-		return true
-	}
-	return false
-}
-
-func (e PinnedDiscussionGradient) String() string {
-	return string(e)
-}
-
-func (e *PinnedDiscussionGradient) UnmarshalGQL(v interface{}) error {
-	str, ok := v.(string)
-	if !ok {
-		return fmt.Errorf("enums must be strings")
-	}
-
-	*e = PinnedDiscussionGradient(str)
-	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid PinnedDiscussionGradient", str)
-	}
-	return nil
-}
-
-func (e PinnedDiscussionGradient) MarshalGQL(w io.Writer) {
-	fmt.Fprint(w, strconv.Quote(e.String()))
-}
-
-// Preconfigured background patterns that may be used to style discussions pinned within a repository.
-type PinnedDiscussionPattern string
-
-const (
-	// A solid dot pattern
-	PinnedDiscussionPatternDotFill PinnedDiscussionPattern = "DOT_FILL"
-	// A plus sign pattern
-	PinnedDiscussionPatternPlus PinnedDiscussionPattern = "PLUS"
-	// A lightning bolt pattern
-	PinnedDiscussionPatternZap PinnedDiscussionPattern = "ZAP"
-	// An upward-facing chevron pattern
-	PinnedDiscussionPatternChevronUp PinnedDiscussionPattern = "CHEVRON_UP"
-	// A hollow dot pattern
-	PinnedDiscussionPatternDot PinnedDiscussionPattern = "DOT"
-	// A heart pattern
-	PinnedDiscussionPatternHeartFill PinnedDiscussionPattern = "HEART_FILL"
-)
-
-var AllPinnedDiscussionPattern = []PinnedDiscussionPattern{
-	PinnedDiscussionPatternDotFill,
-	PinnedDiscussionPatternPlus,
-	PinnedDiscussionPatternZap,
-	PinnedDiscussionPatternChevronUp,
-	PinnedDiscussionPatternDot,
-	PinnedDiscussionPatternHeartFill,
-}
-
-func (e PinnedDiscussionPattern) IsValid() bool {
-	switch e {
-	case PinnedDiscussionPatternDotFill, PinnedDiscussionPatternPlus, PinnedDiscussionPatternZap, PinnedDiscussionPatternChevronUp, PinnedDiscussionPatternDot, PinnedDiscussionPatternHeartFill:
-		return true
-	}
-	return false
-}
-
-func (e PinnedDiscussionPattern) String() string {
-	return string(e)
-}
-
-func (e *PinnedDiscussionPattern) UnmarshalGQL(v interface{}) error {
-	str, ok := v.(string)
-	if !ok {
-		return fmt.Errorf("enums must be strings")
-	}
-
-	*e = PinnedDiscussionPattern(str)
-	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid PinnedDiscussionPattern", str)
-	}
-	return nil
-}
-
-func (e PinnedDiscussionPattern) MarshalGQL(w io.Writer) {
-	fmt.Fprint(w, strconv.Quote(e.String()))
-}
-
 // The possible archived states of a project card.
 type ProjectCardArchivedState string
 
@@ -20717,130 +17843,6 @@ func (e ProjectColumnPurpose) MarshalGQL(w io.Writer) {
 	fmt.Fprint(w, strconv.Quote(e.String()))
 }
 
-// The type of a project next field.
-type ProjectNextFieldType string
-
-const (
-	// Assignees
-	ProjectNextFieldTypeAssignees ProjectNextFieldType = "ASSIGNEES"
-	// Linked Pull Requests
-	ProjectNextFieldTypeLinkedPullRequests ProjectNextFieldType = "LINKED_PULL_REQUESTS"
-	// Reviewers
-	ProjectNextFieldTypeReviewers ProjectNextFieldType = "REVIEWERS"
-	// Labels
-	ProjectNextFieldTypeLabels ProjectNextFieldType = "LABELS"
-	// Milestone
-	ProjectNextFieldTypeMilestone ProjectNextFieldType = "MILESTONE"
-	// Repository
-	ProjectNextFieldTypeRepository ProjectNextFieldType = "REPOSITORY"
-	// Title
-	ProjectNextFieldTypeTitle ProjectNextFieldType = "TITLE"
-	// Text
-	ProjectNextFieldTypeText ProjectNextFieldType = "TEXT"
-	// Single Select
-	ProjectNextFieldTypeSingleSelect ProjectNextFieldType = "SINGLE_SELECT"
-	// Number
-	ProjectNextFieldTypeNumber ProjectNextFieldType = "NUMBER"
-	// Date
-	ProjectNextFieldTypeDate ProjectNextFieldType = "DATE"
-	// Iteration
-	ProjectNextFieldTypeIteration ProjectNextFieldType = "ITERATION"
-)
-
-var AllProjectNextFieldType = []ProjectNextFieldType{
-	ProjectNextFieldTypeAssignees,
-	ProjectNextFieldTypeLinkedPullRequests,
-	ProjectNextFieldTypeReviewers,
-	ProjectNextFieldTypeLabels,
-	ProjectNextFieldTypeMilestone,
-	ProjectNextFieldTypeRepository,
-	ProjectNextFieldTypeTitle,
-	ProjectNextFieldTypeText,
-	ProjectNextFieldTypeSingleSelect,
-	ProjectNextFieldTypeNumber,
-	ProjectNextFieldTypeDate,
-	ProjectNextFieldTypeIteration,
-}
-
-func (e ProjectNextFieldType) IsValid() bool {
-	switch e {
-	case ProjectNextFieldTypeAssignees, ProjectNextFieldTypeLinkedPullRequests, ProjectNextFieldTypeReviewers, ProjectNextFieldTypeLabels, ProjectNextFieldTypeMilestone, ProjectNextFieldTypeRepository, ProjectNextFieldTypeTitle, ProjectNextFieldTypeText, ProjectNextFieldTypeSingleSelect, ProjectNextFieldTypeNumber, ProjectNextFieldTypeDate, ProjectNextFieldTypeIteration:
-		return true
-	}
-	return false
-}
-
-func (e ProjectNextFieldType) String() string {
-	return string(e)
-}
-
-func (e *ProjectNextFieldType) UnmarshalGQL(v interface{}) error {
-	str, ok := v.(string)
-	if !ok {
-		return fmt.Errorf("enums must be strings")
-	}
-
-	*e = ProjectNextFieldType(str)
-	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid ProjectNextFieldType", str)
-	}
-	return nil
-}
-
-func (e ProjectNextFieldType) MarshalGQL(w io.Writer) {
-	fmt.Fprint(w, strconv.Quote(e.String()))
-}
-
-// Properties by which the return project can be ordered.
-type ProjectNextOrderField string
-
-const (
-	// The project's title
-	ProjectNextOrderFieldTitle ProjectNextOrderField = "TITLE"
-	// The project's number
-	ProjectNextOrderFieldNumber ProjectNextOrderField = "NUMBER"
-	// The project's date and time of update
-	ProjectNextOrderFieldUpdatedAt ProjectNextOrderField = "UPDATED_AT"
-	// The project's date and time of creation
-	ProjectNextOrderFieldCreatedAt ProjectNextOrderField = "CREATED_AT"
-)
-
-var AllProjectNextOrderField = []ProjectNextOrderField{
-	ProjectNextOrderFieldTitle,
-	ProjectNextOrderFieldNumber,
-	ProjectNextOrderFieldUpdatedAt,
-	ProjectNextOrderFieldCreatedAt,
-}
-
-func (e ProjectNextOrderField) IsValid() bool {
-	switch e {
-	case ProjectNextOrderFieldTitle, ProjectNextOrderFieldNumber, ProjectNextOrderFieldUpdatedAt, ProjectNextOrderFieldCreatedAt:
-		return true
-	}
-	return false
-}
-
-func (e ProjectNextOrderField) String() string {
-	return string(e)
-}
-
-func (e *ProjectNextOrderField) UnmarshalGQL(v interface{}) error {
-	str, ok := v.(string)
-	if !ok {
-		return fmt.Errorf("enums must be strings")
-	}
-
-	*e = ProjectNextOrderField(str)
-	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid ProjectNextOrderField", str)
-	}
-	return nil
-}
-
-func (e ProjectNextOrderField) MarshalGQL(w io.Writer) {
-	fmt.Fprint(w, strconv.Quote(e.String()))
-}
-
 // Properties by which project connections can be ordered.
 type ProjectOrderField string
 
@@ -21368,10 +18370,6 @@ const (
 	PullRequestTimelineItemsItemTypeReadyForReviewEvent PullRequestTimelineItemsItemType = "READY_FOR_REVIEW_EVENT"
 	// Represents a 'convert_to_draft' event on a given pull request.
 	PullRequestTimelineItemsItemTypeConvertToDraftEvent PullRequestTimelineItemsItemType = "CONVERT_TO_DRAFT_EVENT"
-	// Represents an 'added_to_merge_queue' event on a given pull request.
-	PullRequestTimelineItemsItemTypeAddedToMergeQueueEvent PullRequestTimelineItemsItemType = "ADDED_TO_MERGE_QUEUE_EVENT"
-	// Represents a 'removed_from_merge_queue' event on a given pull request.
-	PullRequestTimelineItemsItemTypeRemovedFromMergeQueueEvent PullRequestTimelineItemsItemType = "REMOVED_FROM_MERGE_QUEUE_EVENT"
 	// Represents a comment on an Issue.
 	PullRequestTimelineItemsItemTypeIssueComment PullRequestTimelineItemsItemType = "ISSUE_COMMENT"
 	// Represents a mention made by one issue or pull request to another.
@@ -21388,8 +18386,6 @@ const (
 	PullRequestTimelineItemsItemTypeConnectedEvent PullRequestTimelineItemsItemType = "CONNECTED_EVENT"
 	// Represents a 'converted_note_to_issue' event on a given issue or pull request.
 	PullRequestTimelineItemsItemTypeConvertedNoteToIssueEvent PullRequestTimelineItemsItemType = "CONVERTED_NOTE_TO_ISSUE_EVENT"
-	// Represents a 'converted_to_discussion' event on a given issue.
-	PullRequestTimelineItemsItemTypeConvertedToDiscussionEvent PullRequestTimelineItemsItemType = "CONVERTED_TO_DISCUSSION_EVENT"
 	// Represents a 'demilestoned' event on a given issue or pull request.
 	PullRequestTimelineItemsItemTypeDemilestonedEvent PullRequestTimelineItemsItemType = "DEMILESTONED_EVENT"
 	// Represents a 'disconnected' event on a given issue or pull request.
@@ -21462,8 +18458,6 @@ var AllPullRequestTimelineItemsItemType = []PullRequestTimelineItemsItemType{
 	PullRequestTimelineItemsItemTypeReviewRequestRemovedEvent,
 	PullRequestTimelineItemsItemTypeReadyForReviewEvent,
 	PullRequestTimelineItemsItemTypeConvertToDraftEvent,
-	PullRequestTimelineItemsItemTypeAddedToMergeQueueEvent,
-	PullRequestTimelineItemsItemTypeRemovedFromMergeQueueEvent,
 	PullRequestTimelineItemsItemTypeIssueComment,
 	PullRequestTimelineItemsItemTypeCrossReferencedEvent,
 	PullRequestTimelineItemsItemTypeAddedToProjectEvent,
@@ -21472,7 +18466,6 @@ var AllPullRequestTimelineItemsItemType = []PullRequestTimelineItemsItemType{
 	PullRequestTimelineItemsItemTypeCommentDeletedEvent,
 	PullRequestTimelineItemsItemTypeConnectedEvent,
 	PullRequestTimelineItemsItemTypeConvertedNoteToIssueEvent,
-	PullRequestTimelineItemsItemTypeConvertedToDiscussionEvent,
 	PullRequestTimelineItemsItemTypeDemilestonedEvent,
 	PullRequestTimelineItemsItemTypeDisconnectedEvent,
 	PullRequestTimelineItemsItemTypeLabeledEvent,
@@ -21499,7 +18492,7 @@ var AllPullRequestTimelineItemsItemType = []PullRequestTimelineItemsItemType{
 
 func (e PullRequestTimelineItemsItemType) IsValid() bool {
 	switch e {
-	case PullRequestTimelineItemsItemTypePullRequestCommit, PullRequestTimelineItemsItemTypePullRequestCommitCommentThread, PullRequestTimelineItemsItemTypePullRequestReview, PullRequestTimelineItemsItemTypePullRequestReviewThread, PullRequestTimelineItemsItemTypePullRequestRevisionMarker, PullRequestTimelineItemsItemTypeAutomaticBaseChangeFailedEvent, PullRequestTimelineItemsItemTypeAutomaticBaseChangeSucceededEvent, PullRequestTimelineItemsItemTypeAutoMergeDisabledEvent, PullRequestTimelineItemsItemTypeAutoMergeEnabledEvent, PullRequestTimelineItemsItemTypeAutoRebaseEnabledEvent, PullRequestTimelineItemsItemTypeAutoSquashEnabledEvent, PullRequestTimelineItemsItemTypeBaseRefChangedEvent, PullRequestTimelineItemsItemTypeBaseRefForcePushedEvent, PullRequestTimelineItemsItemTypeBaseRefDeletedEvent, PullRequestTimelineItemsItemTypeDeployedEvent, PullRequestTimelineItemsItemTypeDeploymentEnvironmentChangedEvent, PullRequestTimelineItemsItemTypeHeadRefDeletedEvent, PullRequestTimelineItemsItemTypeHeadRefForcePushedEvent, PullRequestTimelineItemsItemTypeHeadRefRestoredEvent, PullRequestTimelineItemsItemTypeMergedEvent, PullRequestTimelineItemsItemTypeReviewDismissedEvent, PullRequestTimelineItemsItemTypeReviewRequestedEvent, PullRequestTimelineItemsItemTypeReviewRequestRemovedEvent, PullRequestTimelineItemsItemTypeReadyForReviewEvent, PullRequestTimelineItemsItemTypeConvertToDraftEvent, PullRequestTimelineItemsItemTypeAddedToMergeQueueEvent, PullRequestTimelineItemsItemTypeRemovedFromMergeQueueEvent, PullRequestTimelineItemsItemTypeIssueComment, PullRequestTimelineItemsItemTypeCrossReferencedEvent, PullRequestTimelineItemsItemTypeAddedToProjectEvent, PullRequestTimelineItemsItemTypeAssignedEvent, PullRequestTimelineItemsItemTypeClosedEvent, PullRequestTimelineItemsItemTypeCommentDeletedEvent, PullRequestTimelineItemsItemTypeConnectedEvent, PullRequestTimelineItemsItemTypeConvertedNoteToIssueEvent, PullRequestTimelineItemsItemTypeConvertedToDiscussionEvent, PullRequestTimelineItemsItemTypeDemilestonedEvent, PullRequestTimelineItemsItemTypeDisconnectedEvent, PullRequestTimelineItemsItemTypeLabeledEvent, PullRequestTimelineItemsItemTypeLockedEvent, PullRequestTimelineItemsItemTypeMarkedAsDuplicateEvent, PullRequestTimelineItemsItemTypeMentionedEvent, PullRequestTimelineItemsItemTypeMilestonedEvent, PullRequestTimelineItemsItemTypeMovedColumnsInProjectEvent, PullRequestTimelineItemsItemTypePinnedEvent, PullRequestTimelineItemsItemTypeReferencedEvent, PullRequestTimelineItemsItemTypeRemovedFromProjectEvent, PullRequestTimelineItemsItemTypeRenamedTitleEvent, PullRequestTimelineItemsItemTypeReopenedEvent, PullRequestTimelineItemsItemTypeSubscribedEvent, PullRequestTimelineItemsItemTypeTransferredEvent, PullRequestTimelineItemsItemTypeUnassignedEvent, PullRequestTimelineItemsItemTypeUnlabeledEvent, PullRequestTimelineItemsItemTypeUnlockedEvent, PullRequestTimelineItemsItemTypeUserBlockedEvent, PullRequestTimelineItemsItemTypeUnmarkedAsDuplicateEvent, PullRequestTimelineItemsItemTypeUnpinnedEvent, PullRequestTimelineItemsItemTypeUnsubscribedEvent:
+	case PullRequestTimelineItemsItemTypePullRequestCommit, PullRequestTimelineItemsItemTypePullRequestCommitCommentThread, PullRequestTimelineItemsItemTypePullRequestReview, PullRequestTimelineItemsItemTypePullRequestReviewThread, PullRequestTimelineItemsItemTypePullRequestRevisionMarker, PullRequestTimelineItemsItemTypeAutomaticBaseChangeFailedEvent, PullRequestTimelineItemsItemTypeAutomaticBaseChangeSucceededEvent, PullRequestTimelineItemsItemTypeAutoMergeDisabledEvent, PullRequestTimelineItemsItemTypeAutoMergeEnabledEvent, PullRequestTimelineItemsItemTypeAutoRebaseEnabledEvent, PullRequestTimelineItemsItemTypeAutoSquashEnabledEvent, PullRequestTimelineItemsItemTypeBaseRefChangedEvent, PullRequestTimelineItemsItemTypeBaseRefForcePushedEvent, PullRequestTimelineItemsItemTypeBaseRefDeletedEvent, PullRequestTimelineItemsItemTypeDeployedEvent, PullRequestTimelineItemsItemTypeDeploymentEnvironmentChangedEvent, PullRequestTimelineItemsItemTypeHeadRefDeletedEvent, PullRequestTimelineItemsItemTypeHeadRefForcePushedEvent, PullRequestTimelineItemsItemTypeHeadRefRestoredEvent, PullRequestTimelineItemsItemTypeMergedEvent, PullRequestTimelineItemsItemTypeReviewDismissedEvent, PullRequestTimelineItemsItemTypeReviewRequestedEvent, PullRequestTimelineItemsItemTypeReviewRequestRemovedEvent, PullRequestTimelineItemsItemTypeReadyForReviewEvent, PullRequestTimelineItemsItemTypeConvertToDraftEvent, PullRequestTimelineItemsItemTypeIssueComment, PullRequestTimelineItemsItemTypeCrossReferencedEvent, PullRequestTimelineItemsItemTypeAddedToProjectEvent, PullRequestTimelineItemsItemTypeAssignedEvent, PullRequestTimelineItemsItemTypeClosedEvent, PullRequestTimelineItemsItemTypeCommentDeletedEvent, PullRequestTimelineItemsItemTypeConnectedEvent, PullRequestTimelineItemsItemTypeConvertedNoteToIssueEvent, PullRequestTimelineItemsItemTypeDemilestonedEvent, PullRequestTimelineItemsItemTypeDisconnectedEvent, PullRequestTimelineItemsItemTypeLabeledEvent, PullRequestTimelineItemsItemTypeLockedEvent, PullRequestTimelineItemsItemTypeMarkedAsDuplicateEvent, PullRequestTimelineItemsItemTypeMentionedEvent, PullRequestTimelineItemsItemTypeMilestonedEvent, PullRequestTimelineItemsItemTypeMovedColumnsInProjectEvent, PullRequestTimelineItemsItemTypePinnedEvent, PullRequestTimelineItemsItemTypeReferencedEvent, PullRequestTimelineItemsItemTypeRemovedFromProjectEvent, PullRequestTimelineItemsItemTypeRenamedTitleEvent, PullRequestTimelineItemsItemTypeReopenedEvent, PullRequestTimelineItemsItemTypeSubscribedEvent, PullRequestTimelineItemsItemTypeTransferredEvent, PullRequestTimelineItemsItemTypeUnassignedEvent, PullRequestTimelineItemsItemTypeUnlabeledEvent, PullRequestTimelineItemsItemTypeUnlockedEvent, PullRequestTimelineItemsItemTypeUserBlockedEvent, PullRequestTimelineItemsItemTypeUnmarkedAsDuplicateEvent, PullRequestTimelineItemsItemTypeUnpinnedEvent, PullRequestTimelineItemsItemTypeUnsubscribedEvent:
 		return true
 	}
 	return false
@@ -22397,178 +19390,96 @@ func (e RepositoryInteractionLimitOrigin) MarshalGQL(w io.Writer) {
 }
 
 // Properties by which repository invitation connections can be ordered.
-type RepositoryInvitationOrderField string
-
-const (
-	// Order repository invitations by creation time
-	RepositoryInvitationOrderFieldCreatedAt RepositoryInvitationOrderField = "CREATED_AT"
-)
-
-var AllRepositoryInvitationOrderField = []RepositoryInvitationOrderField{
-	RepositoryInvitationOrderFieldCreatedAt,
-}
-
-func (e RepositoryInvitationOrderField) IsValid() bool {
-	switch e {
-	case RepositoryInvitationOrderFieldCreatedAt:
-		return true
-	}
-	return false
-}
-
-func (e RepositoryInvitationOrderField) String() string {
-	return string(e)
-}
-
-func (e *RepositoryInvitationOrderField) UnmarshalGQL(v interface{}) error {
-	str, ok := v.(string)
-	if !ok {
-		return fmt.Errorf("enums must be strings")
-	}
-
-	*e = RepositoryInvitationOrderField(str)
-	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid RepositoryInvitationOrderField", str)
-	}
-	return nil
-}
-
-func (e RepositoryInvitationOrderField) MarshalGQL(w io.Writer) {
-	fmt.Fprint(w, strconv.Quote(e.String()))
-}
-
-// The possible reasons a given repository could be in a locked state.
-type RepositoryLockReason string
-
-const (
-	// The repository is locked due to a move.
-	RepositoryLockReasonMoving RepositoryLockReason = "MOVING"
-	// The repository is locked due to a billing related reason.
-	RepositoryLockReasonBilling RepositoryLockReason = "BILLING"
-	// The repository is locked due to a rename.
-	RepositoryLockReasonRename RepositoryLockReason = "RENAME"
-	// The repository is locked due to a migration.
-	RepositoryLockReasonMigrating RepositoryLockReason = "MIGRATING"
-)
-
-var AllRepositoryLockReason = []RepositoryLockReason{
-	RepositoryLockReasonMoving,
-	RepositoryLockReasonBilling,
-	RepositoryLockReasonRename,
-	RepositoryLockReasonMigrating,
-}
-
-func (e RepositoryLockReason) IsValid() bool {
-	switch e {
-	case RepositoryLockReasonMoving, RepositoryLockReasonBilling, RepositoryLockReasonRename, RepositoryLockReasonMigrating:
-		return true
-	}
-	return false
-}
-
-func (e RepositoryLockReason) String() string {
-	return string(e)
-}
-
-func (e *RepositoryLockReason) UnmarshalGQL(v interface{}) error {
-	str, ok := v.(string)
-	if !ok {
-		return fmt.Errorf("enums must be strings")
-	}
-
-	*e = RepositoryLockReason(str)
-	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid RepositoryLockReason", str)
-	}
-	return nil
-}
-
-func (e RepositoryLockReason) MarshalGQL(w io.Writer) {
-	fmt.Fprint(w, strconv.Quote(e.String()))
-}
-
-// Possible directions in which to order a list of repository migrations when provided an `orderBy` argument.
-type RepositoryMigrationOrderDirection string
+type RepositoryInvitationOrderField string
 
 const (
-	// Specifies an ascending order for a given `orderBy` argument.
-	RepositoryMigrationOrderDirectionAsc RepositoryMigrationOrderDirection = "ASC"
-	// Specifies a descending order for a given `orderBy` argument.
-	RepositoryMigrationOrderDirectionDesc RepositoryMigrationOrderDirection = "DESC"
+	// Order repository invitations by creation time
+	RepositoryInvitationOrderFieldCreatedAt RepositoryInvitationOrderField = "CREATED_AT"
+	// Order repository invitations by invitee login
+	RepositoryInvitationOrderFieldInviteeLogin RepositoryInvitationOrderField = "INVITEE_LOGIN"
 )
 
-var AllRepositoryMigrationOrderDirection = []RepositoryMigrationOrderDirection{
-	RepositoryMigrationOrderDirectionAsc,
-	RepositoryMigrationOrderDirectionDesc,
+var AllRepositoryInvitationOrderField = []RepositoryInvitationOrderField{
+	RepositoryInvitationOrderFieldCreatedAt,
+	RepositoryInvitationOrderFieldInviteeLogin,
 }
 
-func (e RepositoryMigrationOrderDirection) IsValid() bool {
+func (e RepositoryInvitationOrderField) IsValid() bool {
 	switch e {
-	case RepositoryMigrationOrderDirectionAsc, RepositoryMigrationOrderDirectionDesc:
+	case RepositoryInvitationOrderFieldCreatedAt, RepositoryInvitationOrderFieldInviteeLogin:
 		return true
 	}
 	return false
 }
 
-func (e RepositoryMigrationOrderDirection) String() string {
+func (e RepositoryInvitationOrderField) String() string {
 	return string(e)
 }
 
-func (e *RepositoryMigrationOrderDirection) UnmarshalGQL(v interface{}) error {
+func (e *RepositoryInvitationOrderField) UnmarshalGQL(v interface{}) error {
 	str, ok := v.(string)
 	if !ok {
 		return fmt.Errorf("enums must be strings")
 	}
 
-	*e = RepositoryMigrationOrderDirection(str)
+	*e = RepositoryInvitationOrderField(str)
 	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid RepositoryMigrationOrderDirection", str)
+		return fmt.Errorf("%s is not a valid RepositoryInvitationOrderField", str)
 	}
 	return nil
 }
 
-func (e RepositoryMigrationOrderDirection) MarshalGQL(w io.Writer) {
+func (e RepositoryInvitationOrderField) MarshalGQL(w io.Writer) {
 	fmt.Fprint(w, strconv.Quote(e.String()))
 }
 
-// Properties by which repository migrations can be ordered.
-type RepositoryMigrationOrderField string
+// The possible reasons a given repository could be in a locked state.
+type RepositoryLockReason string
 
 const (
-	// Order mannequins why when they were created.
-	RepositoryMigrationOrderFieldCreatedAt RepositoryMigrationOrderField = "CREATED_AT"
+	// The repository is locked due to a move.
+	RepositoryLockReasonMoving RepositoryLockReason = "MOVING"
+	// The repository is locked due to a billing related reason.
+	RepositoryLockReasonBilling RepositoryLockReason = "BILLING"
+	// The repository is locked due to a rename.
+	RepositoryLockReasonRename RepositoryLockReason = "RENAME"
+	// The repository is locked due to a migration.
+	RepositoryLockReasonMigrating RepositoryLockReason = "MIGRATING"
 )
 
-var AllRepositoryMigrationOrderField = []RepositoryMigrationOrderField{
-	RepositoryMigrationOrderFieldCreatedAt,
+var AllRepositoryLockReason = []RepositoryLockReason{
+	RepositoryLockReasonMoving,
+	RepositoryLockReasonBilling,
+	RepositoryLockReasonRename,
+	RepositoryLockReasonMigrating,
 }
 
-func (e RepositoryMigrationOrderField) IsValid() bool {
+func (e RepositoryLockReason) IsValid() bool {
 	switch e {
-	case RepositoryMigrationOrderFieldCreatedAt:
+	case RepositoryLockReasonMoving, RepositoryLockReasonBilling, RepositoryLockReasonRename, RepositoryLockReasonMigrating:
 		return true
 	}
 	return false
 }
 
-func (e RepositoryMigrationOrderField) String() string {
+func (e RepositoryLockReason) String() string {
 	return string(e)
 }
 
-func (e *RepositoryMigrationOrderField) UnmarshalGQL(v interface{}) error {
+func (e *RepositoryLockReason) UnmarshalGQL(v interface{}) error {
 	str, ok := v.(string)
 	if !ok {
 		return fmt.Errorf("enums must be strings")
 	}
 
-	*e = RepositoryMigrationOrderField(str)
+	*e = RepositoryLockReason(str)
 	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid RepositoryMigrationOrderField", str)
+		return fmt.Errorf("%s is not a valid RepositoryLockReason", str)
 	}
 	return nil
 }
 
-func (e RepositoryMigrationOrderField) MarshalGQL(w io.Writer) {
+func (e RepositoryLockReason) MarshalGQL(w io.Writer) {
 	fmt.Fprint(w, strconv.Quote(e.String()))
 }
 
@@ -22769,53 +19680,6 @@ func (e RepositoryVisibility) MarshalGQL(w io.Writer) {
 	fmt.Fprint(w, strconv.Quote(e.String()))
 }
 
-// The possible states of an alert
-type RepositoryVulnerabilityAlertState string
-
-const (
-	// An alert that is still open.
-	RepositoryVulnerabilityAlertStateOpen RepositoryVulnerabilityAlertState = "OPEN"
-	// An alert that has been resolved by a code change.
-	RepositoryVulnerabilityAlertStateFixed RepositoryVulnerabilityAlertState = "FIXED"
-	// An alert that has been manually closed by a user.
-	RepositoryVulnerabilityAlertStateDismissed RepositoryVulnerabilityAlertState = "DISMISSED"
-)
-
-var AllRepositoryVulnerabilityAlertState = []RepositoryVulnerabilityAlertState{
-	RepositoryVulnerabilityAlertStateOpen,
-	RepositoryVulnerabilityAlertStateFixed,
-	RepositoryVulnerabilityAlertStateDismissed,
-}
-
-func (e RepositoryVulnerabilityAlertState) IsValid() bool {
-	switch e {
-	case RepositoryVulnerabilityAlertStateOpen, RepositoryVulnerabilityAlertStateFixed, RepositoryVulnerabilityAlertStateDismissed:
-		return true
-	}
-	return false
-}
-
-func (e RepositoryVulnerabilityAlertState) String() string {
-	return string(e)
-}
-
-func (e *RepositoryVulnerabilityAlertState) UnmarshalGQL(v interface{}) error {
-	str, ok := v.(string)
-	if !ok {
-		return fmt.Errorf("enums must be strings")
-	}
-
-	*e = RepositoryVulnerabilityAlertState(str)
-	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid RepositoryVulnerabilityAlertState", str)
-	}
-	return nil
-}
-
-func (e RepositoryVulnerabilityAlertState) MarshalGQL(w io.Writer) {
-	fmt.Fprint(w, strconv.Quote(e.String()))
-}
-
 // The possible states that can be requested when creating a check run.
 type RequestableCheckStatusState string
 
@@ -22828,8 +19692,6 @@ const (
 	RequestableCheckStatusStateCompleted RequestableCheckStatusState = "COMPLETED"
 	// The check suite or run is in waiting state.
 	RequestableCheckStatusStateWaiting RequestableCheckStatusState = "WAITING"
-	// The check suite or run is in pending state.
-	RequestableCheckStatusStatePending RequestableCheckStatusState = "PENDING"
 )
 
 var AllRequestableCheckStatusState = []RequestableCheckStatusState{
@@ -22837,12 +19699,11 @@ var AllRequestableCheckStatusState = []RequestableCheckStatusState{
 	RequestableCheckStatusStateInProgress,
 	RequestableCheckStatusStateCompleted,
 	RequestableCheckStatusStateWaiting,
-	RequestableCheckStatusStatePending,
 }
 
 func (e RequestableCheckStatusState) IsValid() bool {
 	switch e {
-	case RequestableCheckStatusStateQueued, RequestableCheckStatusStateInProgress, RequestableCheckStatusStateCompleted, RequestableCheckStatusStateWaiting, RequestableCheckStatusStatePending:
+	case RequestableCheckStatusStateQueued, RequestableCheckStatusStateInProgress, RequestableCheckStatusStateCompleted, RequestableCheckStatusStateWaiting:
 		return true
 	}
 	return false
@@ -22869,53 +19730,6 @@ func (e RequestableCheckStatusState) MarshalGQL(w io.Writer) {
 	fmt.Fprint(w, strconv.Quote(e.String()))
 }
 
-// Possible roles a user may have in relation to an organization.
-type RoleInOrganization string
-
-const (
-	// A user with full administrative access to the organization.
-	RoleInOrganizationOwner RoleInOrganization = "OWNER"
-	// A user who is a direct member of the organization.
-	RoleInOrganizationDirectMember RoleInOrganization = "DIRECT_MEMBER"
-	// A user who is unaffiliated with the organization.
-	RoleInOrganizationUnaffiliated RoleInOrganization = "UNAFFILIATED"
-)
-
-var AllRoleInOrganization = []RoleInOrganization{
-	RoleInOrganizationOwner,
-	RoleInOrganizationDirectMember,
-	RoleInOrganizationUnaffiliated,
-}
-
-func (e RoleInOrganization) IsValid() bool {
-	switch e {
-	case RoleInOrganizationOwner, RoleInOrganizationDirectMember, RoleInOrganizationUnaffiliated:
-		return true
-	}
-	return false
-}
-
-func (e RoleInOrganization) String() string {
-	return string(e)
-}
-
-func (e *RoleInOrganization) UnmarshalGQL(v interface{}) error {
-	str, ok := v.(string)
-	if !ok {
-		return fmt.Errorf("enums must be strings")
-	}
-
-	*e = RoleInOrganization(str)
-	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid RoleInOrganization", str)
-	}
-	return nil
-}
-
-func (e RoleInOrganization) MarshalGQL(w io.Writer) {
-	fmt.Fprint(w, strconv.Quote(e.String()))
-}
-
 // The possible digest algorithms used to sign SAML requests for an identity provider.
 type SamlDigestAlgorithm string
 
@@ -23067,20 +19881,17 @@ const (
 	SearchTypeRepository SearchType = "REPOSITORY"
 	// Returns results matching users and organizations on GitHub.
 	SearchTypeUser SearchType = "USER"
-	// Returns matching discussions in repositories.
-	SearchTypeDiscussion SearchType = "DISCUSSION"
 )
 
 var AllSearchType = []SearchType{
 	SearchTypeIssue,
 	SearchTypeRepository,
 	SearchTypeUser,
-	SearchTypeDiscussion,
 }
 
 func (e SearchType) IsValid() bool {
 	switch e {
-	case SearchTypeIssue, SearchTypeRepository, SearchTypeUser, SearchTypeDiscussion:
+	case SearchTypeIssue, SearchTypeRepository, SearchTypeUser:
 		return true
 	}
 	return false
@@ -23111,38 +19922,32 @@ func (e SearchType) MarshalGQL(w io.Writer) {
 type SecurityAdvisoryEcosystem string
 
 const (
-	// PHP packages hosted at packagist.org
-	SecurityAdvisoryEcosystemComposer SecurityAdvisoryEcosystem = "COMPOSER"
-	// Go modules
-	SecurityAdvisoryEcosystemGo SecurityAdvisoryEcosystem = "GO"
-	// Java artifacts hosted at the Maven central repository
-	SecurityAdvisoryEcosystemMaven SecurityAdvisoryEcosystem = "MAVEN"
+	// Ruby gems hosted at RubyGems.org
+	SecurityAdvisoryEcosystemRubygems SecurityAdvisoryEcosystem = "RUBYGEMS"
 	// JavaScript packages hosted at npmjs.com
 	SecurityAdvisoryEcosystemNpm SecurityAdvisoryEcosystem = "NPM"
-	// .NET packages hosted at the NuGet Gallery
-	SecurityAdvisoryEcosystemNuget SecurityAdvisoryEcosystem = "NUGET"
 	// Python packages hosted at PyPI.org
 	SecurityAdvisoryEcosystemPip SecurityAdvisoryEcosystem = "PIP"
-	// Ruby gems hosted at RubyGems.org
-	SecurityAdvisoryEcosystemRubygems SecurityAdvisoryEcosystem = "RUBYGEMS"
-	// Rust crates
-	SecurityAdvisoryEcosystemRust SecurityAdvisoryEcosystem = "RUST"
+	// Java artifacts hosted at the Maven central repository
+	SecurityAdvisoryEcosystemMaven SecurityAdvisoryEcosystem = "MAVEN"
+	// .NET packages hosted at the NuGet Gallery
+	SecurityAdvisoryEcosystemNuget SecurityAdvisoryEcosystem = "NUGET"
+	// PHP packages hosted at packagist.org
+	SecurityAdvisoryEcosystemComposer SecurityAdvisoryEcosystem = "COMPOSER"
 )
 
 var AllSecurityAdvisoryEcosystem = []SecurityAdvisoryEcosystem{
-	SecurityAdvisoryEcosystemComposer,
-	SecurityAdvisoryEcosystemGo,
-	SecurityAdvisoryEcosystemMaven,
+	SecurityAdvisoryEcosystemRubygems,
 	SecurityAdvisoryEcosystemNpm,
-	SecurityAdvisoryEcosystemNuget,
 	SecurityAdvisoryEcosystemPip,
-	SecurityAdvisoryEcosystemRubygems,
-	SecurityAdvisoryEcosystemRust,
+	SecurityAdvisoryEcosystemMaven,
+	SecurityAdvisoryEcosystemNuget,
+	SecurityAdvisoryEcosystemComposer,
 }
 
 func (e SecurityAdvisoryEcosystem) IsValid() bool {
 	switch e {
-	case SecurityAdvisoryEcosystemComposer, SecurityAdvisoryEcosystemGo, SecurityAdvisoryEcosystemMaven, SecurityAdvisoryEcosystemNpm, SecurityAdvisoryEcosystemNuget, SecurityAdvisoryEcosystemPip, SecurityAdvisoryEcosystemRubygems, SecurityAdvisoryEcosystemRust:
+	case SecurityAdvisoryEcosystemRubygems, SecurityAdvisoryEcosystemNpm, SecurityAdvisoryEcosystemPip, SecurityAdvisoryEcosystemMaven, SecurityAdvisoryEcosystemNuget, SecurityAdvisoryEcosystemComposer:
 		return true
 	}
 	return false
@@ -23348,50 +20153,6 @@ func (e SecurityVulnerabilityOrderField) MarshalGQL(w io.Writer) {
 	fmt.Fprint(w, strconv.Quote(e.String()))
 }
 
-// Properties by which sponsor connections can be ordered.
-type SponsorOrderField string
-
-const (
-	// Order sponsorable entities by login (username).
-	SponsorOrderFieldLogin SponsorOrderField = "LOGIN"
-	// Order sponsors by their relevance to the viewer.
-	SponsorOrderFieldRelevance SponsorOrderField = "RELEVANCE"
-)
-
-var AllSponsorOrderField = []SponsorOrderField{
-	SponsorOrderFieldLogin,
-	SponsorOrderFieldRelevance,
-}
-
-func (e SponsorOrderField) IsValid() bool {
-	switch e {
-	case SponsorOrderFieldLogin, SponsorOrderFieldRelevance:
-		return true
-	}
-	return false
-}
-
-func (e SponsorOrderField) String() string {
-	return string(e)
-}
-
-func (e *SponsorOrderField) UnmarshalGQL(v interface{}) error {
-	str, ok := v.(string)
-	if !ok {
-		return fmt.Errorf("enums must be strings")
-	}
-
-	*e = SponsorOrderField(str)
-	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid SponsorOrderField", str)
-	}
-	return nil
-}
-
-func (e SponsorOrderField) MarshalGQL(w io.Writer) {
-	fmt.Fprint(w, strconv.Quote(e.String()))
-}
-
 // Properties by which sponsorable connections can be ordered.
 type SponsorableOrderField string
 
@@ -23433,160 +20194,13 @@ func (e SponsorableOrderField) MarshalGQL(w io.Writer) {
 	fmt.Fprint(w, strconv.Quote(e.String()))
 }
 
-// The possible actions that GitHub Sponsors activities can represent.
-type SponsorsActivityAction string
-
-const (
-	// The activity was starting a sponsorship.
-	SponsorsActivityActionNewSponsorship SponsorsActivityAction = "NEW_SPONSORSHIP"
-	// The activity was cancelling a sponsorship.
-	SponsorsActivityActionCancelledSponsorship SponsorsActivityAction = "CANCELLED_SPONSORSHIP"
-	// The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
-	SponsorsActivityActionTierChange SponsorsActivityAction = "TIER_CHANGE"
-	// The activity was funds being refunded to the sponsor or GitHub.
-	SponsorsActivityActionRefund SponsorsActivityAction = "REFUND"
-	// The activity was scheduling a downgrade or cancellation.
-	SponsorsActivityActionPendingChange SponsorsActivityAction = "PENDING_CHANGE"
-	// The activity was disabling matching for a previously matched sponsorship.
-	SponsorsActivityActionSponsorMatchDisabled SponsorsActivityAction = "SPONSOR_MATCH_DISABLED"
-)
-
-var AllSponsorsActivityAction = []SponsorsActivityAction{
-	SponsorsActivityActionNewSponsorship,
-	SponsorsActivityActionCancelledSponsorship,
-	SponsorsActivityActionTierChange,
-	SponsorsActivityActionRefund,
-	SponsorsActivityActionPendingChange,
-	SponsorsActivityActionSponsorMatchDisabled,
-}
-
-func (e SponsorsActivityAction) IsValid() bool {
-	switch e {
-	case SponsorsActivityActionNewSponsorship, SponsorsActivityActionCancelledSponsorship, SponsorsActivityActionTierChange, SponsorsActivityActionRefund, SponsorsActivityActionPendingChange, SponsorsActivityActionSponsorMatchDisabled:
-		return true
-	}
-	return false
-}
-
-func (e SponsorsActivityAction) String() string {
-	return string(e)
-}
-
-func (e *SponsorsActivityAction) UnmarshalGQL(v interface{}) error {
-	str, ok := v.(string)
-	if !ok {
-		return fmt.Errorf("enums must be strings")
-	}
-
-	*e = SponsorsActivityAction(str)
-	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid SponsorsActivityAction", str)
-	}
-	return nil
-}
-
-func (e SponsorsActivityAction) MarshalGQL(w io.Writer) {
-	fmt.Fprint(w, strconv.Quote(e.String()))
-}
-
-// Properties by which GitHub Sponsors activity connections can be ordered.
-type SponsorsActivityOrderField string
-
-const (
-	// Order activities by when they happened.
-	SponsorsActivityOrderFieldTimestamp SponsorsActivityOrderField = "TIMESTAMP"
-)
-
-var AllSponsorsActivityOrderField = []SponsorsActivityOrderField{
-	SponsorsActivityOrderFieldTimestamp,
-}
-
-func (e SponsorsActivityOrderField) IsValid() bool {
-	switch e {
-	case SponsorsActivityOrderFieldTimestamp:
-		return true
-	}
-	return false
-}
-
-func (e SponsorsActivityOrderField) String() string {
-	return string(e)
-}
-
-func (e *SponsorsActivityOrderField) UnmarshalGQL(v interface{}) error {
-	str, ok := v.(string)
-	if !ok {
-		return fmt.Errorf("enums must be strings")
-	}
-
-	*e = SponsorsActivityOrderField(str)
-	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid SponsorsActivityOrderField", str)
-	}
-	return nil
-}
-
-func (e SponsorsActivityOrderField) MarshalGQL(w io.Writer) {
-	fmt.Fprint(w, strconv.Quote(e.String()))
-}
-
-// The possible time periods for which Sponsors activities can be requested.
-type SponsorsActivityPeriod string
-
-const (
-	// The previous calendar day.
-	SponsorsActivityPeriodDay SponsorsActivityPeriod = "DAY"
-	// The previous seven days.
-	SponsorsActivityPeriodWeek SponsorsActivityPeriod = "WEEK"
-	// The previous thirty days.
-	SponsorsActivityPeriodMonth SponsorsActivityPeriod = "MONTH"
-	// Don't restrict the activity to any date range, include all activity.
-	SponsorsActivityPeriodAll SponsorsActivityPeriod = "ALL"
-)
-
-var AllSponsorsActivityPeriod = []SponsorsActivityPeriod{
-	SponsorsActivityPeriodDay,
-	SponsorsActivityPeriodWeek,
-	SponsorsActivityPeriodMonth,
-	SponsorsActivityPeriodAll,
-}
-
-func (e SponsorsActivityPeriod) IsValid() bool {
-	switch e {
-	case SponsorsActivityPeriodDay, SponsorsActivityPeriodWeek, SponsorsActivityPeriodMonth, SponsorsActivityPeriodAll:
-		return true
-	}
-	return false
-}
-
-func (e SponsorsActivityPeriod) String() string {
-	return string(e)
-}
-
-func (e *SponsorsActivityPeriod) UnmarshalGQL(v interface{}) error {
-	str, ok := v.(string)
-	if !ok {
-		return fmt.Errorf("enums must be strings")
-	}
-
-	*e = SponsorsActivityPeriod(str)
-	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid SponsorsActivityPeriod", str)
-	}
-	return nil
-}
-
-func (e SponsorsActivityPeriod) MarshalGQL(w io.Writer) {
-	fmt.Fprint(w, strconv.Quote(e.String()))
-}
-
 // The different kinds of goals a GitHub Sponsors member can have.
 type SponsorsGoalKind string
 
 const (
 	// The goal is about reaching a certain number of sponsors.
 	SponsorsGoalKindTotalSponsorsCount SponsorsGoalKind = "TOTAL_SPONSORS_COUNT"
-	// The goal is about getting a certain amount in USD from sponsorships each month.
+	// The goal is about getting a certain dollar amount from sponsorships each month.
 	SponsorsGoalKindMonthlySponsorshipAmount SponsorsGoalKind = "MONTHLY_SPONSORSHIP_AMOUNT"
 )
 
@@ -23668,47 +20282,6 @@ func (e SponsorsTierOrderField) MarshalGQL(w io.Writer) {
 	fmt.Fprint(w, strconv.Quote(e.String()))
 }
 
-// Properties by which sponsorship update connections can be ordered.
-type SponsorshipNewsletterOrderField string
-
-const (
-	// Order sponsorship newsletters by when they were created.
-	SponsorshipNewsletterOrderFieldCreatedAt SponsorshipNewsletterOrderField = "CREATED_AT"
-)
-
-var AllSponsorshipNewsletterOrderField = []SponsorshipNewsletterOrderField{
-	SponsorshipNewsletterOrderFieldCreatedAt,
-}
-
-func (e SponsorshipNewsletterOrderField) IsValid() bool {
-	switch e {
-	case SponsorshipNewsletterOrderFieldCreatedAt:
-		return true
-	}
-	return false
-}
-
-func (e SponsorshipNewsletterOrderField) String() string {
-	return string(e)
-}
-
-func (e *SponsorshipNewsletterOrderField) UnmarshalGQL(v interface{}) error {
-	str, ok := v.(string)
-	if !ok {
-		return fmt.Errorf("enums must be strings")
-	}
-
-	*e = SponsorshipNewsletterOrderField(str)
-	if !e.IsValid() {
-		return fmt.Errorf("%s is not a valid SponsorshipNewsletterOrderField", str)
-	}
-	return nil
-}
-
-func (e SponsorshipNewsletterOrderField) MarshalGQL(w io.Writer) {
-	fmt.Fprint(w, strconv.Quote(e.String()))
-}
-
 // Properties by which sponsorship connections can be ordered.
 type SponsorshipOrderField string
 
diff --git a/example/github/main.go b/example/github/main.go
index aa008cf..9da85d9 100644
--- a/example/github/main.go
+++ b/example/github/main.go
@@ -6,22 +6,21 @@ import (
 	"net/http"
 	"os"
 
-	"github.com/Yamashou/gqlgenc/client"
-	"github.com/Yamashou/gqlgenc/clientv2"
-	"github.com/Yamashou/gqlgenc/example/github/gen"
+	"github.com/TripleMint/gqlgenc/client"
+	"github.com/TripleMint/gqlgenc/example/github/gen"
 )
 
 func main() {
 	// This example only read public repository. You don't need to select scopes.
 	token := os.Getenv("GITHUB_TOKEN")
+	authHeader := func(req *http.Request) {
+		req.Header.Set("Authorization", fmt.Sprintf("Bearer %s", token))
+	}
+
 	ctx := context.Background()
 
 	githubClient := &gen.Client{
-		Client: clientv2.NewClient(http.DefaultClient, "https://api.github.com/graphql", func(ctx context.Context, req *http.Request, gqlInfo *clientv2.GQLRequestInfo, res interface{}, next clientv2.RequestInterceptorFunc) error {
-			req.Header.Set("Authorization", fmt.Sprintf("Bearer %s", token))
-
-			return next(ctx, req, gqlInfo, res)
-		}),
+		Client: client.NewClient(http.DefaultClient, "https://api.github.com/graphql", authHeader),
 	}
 	getUser, err := githubClient.GetUser(ctx, 10, 10)
 	if err != nil {
@@ -39,17 +38,5 @@ func main() {
 		for _, language := range repository.Languages.Nodes {
 			fmt.Println(language.Name)
 		}
-
-		res, err := githubClient.GetNode(ctx, repository.ID)
-		if err != nil {
-			if handledError, ok := err.(*client.ErrorResponse); ok {
-				fmt.Fprintf(os.Stderr, "handled error: %s\n", handledError.Error())
-			} else {
-				fmt.Fprintf(os.Stderr, "unhandled error: %s\n", err.Error())
-			}
-			os.Exit(1)
-		}
-
-		fmt.Println(res.Node.ID, res.Node.Repository.Name)
 	}
 }
diff --git a/example/github/query/query.graphql b/example/github/query/query.graphql
index d0c87e6..d6543fc 100644
--- a/example/github/query/query.graphql
+++ b/example/github/query/query.graphql
@@ -1,3 +1,7 @@
+fragment LanguageFragment on Language {
+    id
+    name
+}
 
 
 query GetUser($repositoryFirst: Int!, $languageFirst: Int!) {
@@ -18,52 +22,3 @@ query GetUser($repositoryFirst: Int!, $languageFirst: Int!) {
     }
 }
 
-fragment LanguageFragment on Language {
-    id
-    name
-}
-
-query GetNode($id: ID!) {
-    node(id: $id) {
-        id
-        ... on Repository {
-            ...RepositoryFragment
-        }
-        ... on Reaction {
-            id
-            user {
-                id
-
-            }
-        }
-    }
-}
-
-fragment RepositoryFragment on Repository {
-    id
-    name
-}
-
-mutation AddStar($input: AddStarInput!) {
-    addStar(input: $input) {
-        starrable {
-            id
-            viewerHasStarred
-            ... on Repository {
-                id
-                name
-            }
-        }
-    }
-}
-
-query GetNode2($id: ID!) {
-    node(id: $id) {
-        ... on Release {
-            id
-            name
-        }
-    }
-}
-
-
diff --git a/generator/generater.go b/generator/generater.go
index 7c803ae..e15d951 100644
--- a/generator/generater.go
+++ b/generator/generater.go
@@ -5,35 +5,15 @@ import (
 	"fmt"
 
 	"github.com/99designs/gqlgen/api"
-	codegenconfig "github.com/99designs/gqlgen/codegen/config"
 	"github.com/99designs/gqlgen/plugin"
 	"github.com/99designs/gqlgen/plugin/modelgen"
-	"github.com/Yamashou/gqlgenc/config"
+	"github.com/TripleMint/gqlgenc/config"
 )
 
-// mutateHook adds the "omitempty" option to nilable fields.
-// For more info see https://github.com/99designs/gqlgen/blob/master/docs/content/recipes/modelgen-hook.md
-func mutateHook(build *modelgen.ModelBuild) *modelgen.ModelBuild {
-	for _, model := range build.Models {
-		for _, field := range model.Fields {
-			field.Tag = `json:"` + field.Name
-			if codegenconfig.IsNilable(field.Type) {
-				field.Tag += ",omitempty"
-			}
-			field.Tag += `"`
-		}
-	}
-
-	return build
-}
-
 func Generate(ctx context.Context, cfg *config.Config, option ...api.Option) error {
 	var plugins []plugin.Plugin
 	if cfg.Model.IsDefined() {
-		p := modelgen.Plugin{
-			MutateHook: mutateHook,
-		}
-		plugins = append(plugins, &p)
+		plugins = append(plugins, modelgen.New())
 	}
 	for _, o := range option {
 		o(cfg.GQLConfig, &plugins)
diff --git a/go.mod b/go.mod
index c9d1a38..9a4ce42 100644
--- a/go.mod
+++ b/go.mod
@@ -1,14 +1,15 @@
-module github.com/Yamashou/gqlgenc
+module github.com/TripleMint/gqlgenc
 
-go 1.16
+go 1.14
 
 require (
-	github.com/99designs/gqlgen v0.17.2
-	github.com/agnivade/levenshtein v1.1.1 // indirect
+	github.com/99designs/gqlgen v0.13.0
+	github.com/agnivade/levenshtein v1.1.0 // indirect
 	github.com/google/go-cmp v0.5.4
+	github.com/pkg/errors v0.9.1
 	github.com/stretchr/testify v1.4.0
-	github.com/vektah/gqlparser/v2 v2.4.1
-	golang.org/x/sys v0.0.0-20220319134239-a9b59b0215f8 // indirect
-	golang.org/x/tools v0.1.10 // indirect
-	gopkg.in/yaml.v2 v2.4.0
+	github.com/vektah/gqlparser/v2 v2.1.0
+	golang.org/x/tools v0.0.0-20200827163409-021d7c6f1ec3 // indirect
+	golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 // indirect
+	gopkg.in/yaml.v2 v2.3.0
 )
diff --git a/go.sum b/go.sum
index 81e5eab..fd6ead7 100644
--- a/go.sum
+++ b/go.sum
@@ -1,94 +1,87 @@
-github.com/99designs/gqlgen v0.17.2 h1:yczvlwMsfcVu/JtejqfrLwXuSP0yZFhmcss3caEvHw8=
-github.com/99designs/gqlgen v0.17.2/go.mod h1:K5fzLKwtph+FFgh9j7nFbRUdBKvTcGnsta51fsMTn3o=
+github.com/99designs/gqlgen v0.13.0 h1:haLTcUp3Vwp80xMVEg5KRNwzfUrgFdRmtBY8fuB8scA=
+github.com/99designs/gqlgen v0.13.0/go.mod h1:NV130r6f4tpRWuAI+zsrSdooO/eWUv+Gyyoi3rEfXIk=
 github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=
 github.com/agnivade/levenshtein v1.0.1/go.mod h1:CURSv5d9Uaml+FovSIICkLbAUZ9S4RqaHDIsdSBg7lM=
+github.com/agnivade/levenshtein v1.0.3/go.mod h1:4SFRZbbXWLF4MU1T9Qg0pGgH3Pjs+t6ie5efyrwRJXs=
+github.com/agnivade/levenshtein v1.1.0 h1:n6qGwyHG61v3ABce1rPVZklEYRT8NFpCMrpZdBUbYGM=
 github.com/agnivade/levenshtein v1.1.0/go.mod h1:veldBMzWxcCG2ZvUTKD2kJNRdCk5hVbJomOvKkmgYbo=
-github.com/agnivade/levenshtein v1.1.1 h1:QY8M92nrzkmr798gCo3kmMyqXFzdQVpxLlGPRBij0P8=
-github.com/agnivade/levenshtein v1.1.1/go.mod h1:veldBMzWxcCG2ZvUTKD2kJNRdCk5hVbJomOvKkmgYbo=
 github.com/andreyvit/diff v0.0.0-20170406064948-c7f18ee00883 h1:bvNMNQO63//z+xNgfBlViaCIJKLlCJ6/fmUseuG0wVQ=
 github.com/andreyvit/diff v0.0.0-20170406064948-c7f18ee00883/go.mod h1:rCTlJbsFo29Kk6CurOXKm700vrz8f0KW0JNfpkRJY/8=
 github.com/arbovm/levenshtein v0.0.0-20160628152529-48b4e1c0c4d0 h1:jfIu9sQUG6Ig+0+Ap1h4unLjW6YQJpKZVmUzxsD4E/Q=
 github.com/arbovm/levenshtein v0.0.0-20160628152529-48b4e1c0c4d0/go.mod h1:t2tdKJDJF9BV14lnkjHmOQgcvEKgtqs5a1N3LNdJhGE=
 github.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=
-github.com/cpuguy83/go-md2man/v2 v2.0.1/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=
 github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
 github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
 github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
+github.com/dgryski/trifles v0.0.0-20190318185328-a8d75aae118c/go.mod h1:if7Fbed8SFyPtHLHbg49SI7NAdJiC5WIA09pe59rfAA=
 github.com/dgryski/trifles v0.0.0-20200323201526-dd97f9abfb48 h1:fRzb/w+pyskVMQ+UbP35JkH8yB7MYb4q/qhBarqZE6g=
 github.com/dgryski/trifles v0.0.0-20200323201526-dd97f9abfb48/go.mod h1:if7Fbed8SFyPtHLHbg49SI7NAdJiC5WIA09pe59rfAA=
+github.com/go-chi/chi v3.3.2+incompatible/go.mod h1:eB3wogJHnLi3x/kFX2A+IbTBlXxmMeXJVKy9tTv1XzQ=
+github.com/gogo/protobuf v1.0.0/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=
 github.com/google/go-cmp v0.5.4 h1:L8R9j+yAqZuZjsqh/z+F1NCffTKKLShY6zXTItVIZ8M=
 github.com/google/go-cmp v0.5.4/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
-github.com/gorilla/websocket v1.4.2 h1:+/TMaTYc4QFitKJxsQ7Yye35DkWvkdLcvGKqM+x0Ufc=
+github.com/gorilla/context v0.0.0-20160226214623-1ea25387ff6f/go.mod h1:kBGZzfjB9CEq2AlWe17Uuf7NDRt0dE0s8S51q0aT7Yg=
+github.com/gorilla/mux v1.6.1/go.mod h1:1lud6UwP+6orDFRuTfBEV8e9/aOM/c4fVVCaMa2zaAs=
 github.com/gorilla/websocket v1.4.2/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=
-github.com/hashicorp/golang-lru v0.5.0 h1:CL2msUPvZTLb5O648aiLNJw3hnBxN2+1Jq8rCOH9wdo=
 github.com/hashicorp/golang-lru v0.5.0/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=
-github.com/kevinmbeaulieu/eq-go v1.0.0/go.mod h1:G3S8ajA56gKBZm4UB9AOyoOS37JO3roToPzKNM8dtdM=
 github.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=
 github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=
 github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
 github.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=
 github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
-github.com/logrusorgru/aurora/v3 v3.0.0/go.mod h1:vsR12bk5grlLvLXAYrBsb5Oc/N+LxAlxggSjiwMnCUc=
-github.com/matryer/moq v0.2.3/go.mod h1:9RtPYjTnH1bSBIkpvtHkFN7nbWAnO7oRpdJkEIn6UtE=
+github.com/logrusorgru/aurora v0.0.0-20200102142835-e9ef32dff381/go.mod h1:7rIyQOR62GCctdiQpZ/zOJlFyk6y+94wXzv6RNZgaR4=
+github.com/matryer/moq v0.0.0-20200106131100-75d0ddfc0007/go.mod h1:9ELz6aaclSIGnZBoaSLZ3NAl1VTufbOrXBPvtcy6WiQ=
 github.com/mattn/go-colorable v0.1.4/go.mod h1:U0ppj6V5qS13XJ6of8GYAs25YV2eR4EVcfRqFIhoBtE=
 github.com/mattn/go-isatty v0.0.8/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=
 github.com/mattn/go-isatty v0.0.12/go.mod h1:cbi8OIDigv2wuxKPP5vlRcQ1OAZbq2CE4Kysco4FUpU=
-github.com/mitchellh/mapstructure v1.2.3 h1:f/MjBEBDLttYCGfRaKBbKSRVF5aV2O6fnBpzknuE3jU=
-github.com/mitchellh/mapstructure v1.2.3/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=
+github.com/mitchellh/mapstructure v0.0.0-20180203102830-a4e142e9c047/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=
+github.com/opentracing/basictracer-go v1.0.0/go.mod h1:QfBfYuafItcjQuMwinw9GhYKwFXS9KnPs5lxoYwgW74=
+github.com/opentracing/opentracing-go v1.0.2/go.mod h1:UkNAQd3GIcIGf0SeVgPpRdFStlNbqXla1AfSYxPUl2o=
+github.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
+github.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=
+github.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
 github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
 github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
+github.com/rs/cors v1.6.0/go.mod h1:gFx+x8UowdsKA9AchylcLynDq+nNFfI8FkUZdN/jGCU=
 github.com/russross/blackfriday/v2 v2.0.1/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=
-github.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=
 github.com/sergi/go-diff v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=
 github.com/sergi/go-diff v1.1.0/go.mod h1:STckp+ISIX8hZLjrqAeVduY0gWCT9IjLuqbuNXdaHfM=
+github.com/shurcooL/httpfs v0.0.0-20171119174359-809beceb2371/go.mod h1:ZY1cvUeJuFPAdZ/B6v7RHavJWZn2YPVFQ1OSXhCGOkg=
 github.com/shurcooL/sanitized_anchor_name v1.0.0/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=
+github.com/shurcooL/vfsgen v0.0.0-20180121065927-ffb13db8def0/go.mod h1:TrYk7fJVaAttu97ZZKrO9UbRa8izdowaMIZcxYMbVaw=
 github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
+github.com/stretchr/testify v1.2.1/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=
 github.com/stretchr/testify v1.4.0 h1:2E4SXV/wtOkTonXsotYi4li6zVWxYlZuYNCXe9XRJyk=
 github.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=
-github.com/urfave/cli/v2 v2.3.0/go.mod h1:LJmUH05zAU44vOAcrfzZQKsZbVcdbOG8rtL3/XcUArI=
-github.com/vektah/gqlparser/v2 v2.4.0/go.mod h1:flJWIR04IMQPGz+BXLrORkrARBxv/rtyIAFvd/MceW0=
-github.com/vektah/gqlparser/v2 v2.4.1 h1:QOyEn8DAPMUMARGMeshKDkDgNmVoEaEGiDB0uWxcSlQ=
-github.com/vektah/gqlparser/v2 v2.4.1/go.mod h1:flJWIR04IMQPGz+BXLrORkrARBxv/rtyIAFvd/MceW0=
+github.com/urfave/cli/v2 v2.1.1/go.mod h1:SE9GqnLQmjVa0iPEY0f1w3ygNIYcIJ0OKPMoW2caLfQ=
+github.com/vektah/dataloaden v0.2.1-0.20190515034641-a19b9a6e7c9e/go.mod h1:/HUdMve7rvxZma+2ZELQeNh88+003LL7Pf/CZ089j8U=
+github.com/vektah/gqlparser/v2 v2.1.0 h1:uiKJ+T5HMGGQM2kRKQ8Pxw8+Zq9qhhZhz/lieYvCMns=
+github.com/vektah/gqlparser/v2 v2.1.0/go.mod h1:SyUiHgLATUR8BiYURfTirrTcGpcE+4XkV2se04Px1Ms=
 github.com/yuin/goldmark v1.1.32/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
-github.com/yuin/goldmark v1.4.1/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1Zlc8k=
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=
+golang.org/x/mod v0.1.1-0.20191105210325-c90efee705ee/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=
+golang.org/x/mod v0.3.0 h1:RM4zey1++hCTbCVQfnWeKs9/IEsaBLA8vTkd0WVtmH4=
 golang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
-golang.org/x/mod v0.5.1/go.mod h1:5OXOZSfqPIIbmVBIIKWRFfZjPR0E5r58TLhUjH0a2Ro=
-golang.org/x/mod v0.6.0-dev.0.20220106191415-9b9b3d81d5e3 h1:kQgndtyPBW/JIYERgdxfwMYh3AVStj88WQTlNDi2a+o=
-golang.org/x/mod v0.6.0-dev.0.20220106191415-9b9b3d81d5e3/go.mod h1:3p9vT2HGsQu2K1YbXdKPJLVgG5VJdoTa1poYQBtP1AY=
+golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20200625001655-4c5254603344/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
-golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
-golang.org/x/net v0.0.0-20211015210444-4f30a5c0130f/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=
 golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20200625203802-6e8e738ad208/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
-golang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190222072716-a9d3bda3a223/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200116001909-b77594299b42/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.0.0-20211019181941-9d821ace8654/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.0.0-20220319134239-a9b59b0215f8 h1:OH54vjqzRWmbJ62fjuhxy7AxFFgoHN0/DPc/UrL8cAs=
-golang.org/x/sys v0.0.0-20220319134239-a9b59b0215f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
-golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
-golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
-golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
-golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
+golang.org/x/tools v0.0.0-20190125232054-d66bd3c5d5a6/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
+golang.org/x/tools v0.0.0-20190515012406-7d7faa4812bd/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=
 golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
-golang.org/x/tools v0.0.0-20200815165600-90abf76919f3/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=
-golang.org/x/tools v0.1.9/go.mod h1:nABZi5QlRsZVlzPpHl034qft6wpY4eDcsTt5AaioBiU=
-golang.org/x/tools v0.1.10 h1:QjFRCZxdOhBJ/UNgnBZLbNV13DlbnK0quyivTnXJM20=
-golang.org/x/tools v0.1.10/go.mod h1:Uh6Zz+xoGYZom868N8YTex3t7RhtHDBrE8Gzo9bV56E=
+golang.org/x/tools v0.0.0-20200114235610-7ae403b6b589/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=
+golang.org/x/tools v0.0.0-20200827163409-021d7c6f1ec3 h1:OjYQxZBKJFs+sJbHkvSGIKNMkZXDJQ9JsMpebGhkafI=
+golang.org/x/tools v0.0.0-20200827163409-021d7c6f1ec3/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=
 golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
@@ -98,8 +91,8 @@ gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8
 gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 h1:YR8cESwS4TdDjEe65xsg0ogRM/Nc3DYOhEAlW+xobZo=
 gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
-gopkg.in/yaml.v2 v2.2.3/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
-gopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
-gopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=
-gopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=
+gopkg.in/yaml.v2 v2.3.0 h1:clyUAQHOM3G0M3f5vQj7LuJrETvjVot3Z5el9nffUtU=
+gopkg.in/yaml.v2 v2.3.0/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
+sourcegraph.com/sourcegraph/appdash v0.0.0-20180110180208-2cc67fd64755/go.mod h1:hI742Nqp5OhwiqlzhgfbWU4mW4yO10fP+LoT9WOswdU=
+sourcegraph.com/sourcegraph/appdash-data v0.0.0-20151005221446-73f23eafcf67/go.mod h1:L5q+DGLGOQFpo1snNEkLOJT2d1YTW66rWNzatr3He1k=
diff --git a/graphqljson/graphql.go b/graphqljson/graphql.go
index d41e4c5..39e6f11 100644
--- a/graphqljson/graphql.go
+++ b/graphqljson/graphql.go
@@ -124,8 +124,7 @@ func (d *Decoder) decode() error {
 				return errors.New("unexpected non-key in JSON input")
 			}
 
-			// The last matching one is the one considered
-			var matchingFieldValue *reflect.Value
+			someFieldExist := false
 			for i := range d.vs {
 				v := d.vs[i][len(d.vs[i])-1]
 				if v.Kind() == reflect.Ptr {
@@ -135,26 +134,18 @@ func (d *Decoder) decode() error {
 				if v.Kind() == reflect.Struct {
 					f = fieldByGraphQLName(v, key)
 					if f.IsValid() {
-						matchingFieldValue = &f
+						someFieldExist = true
 					}
 				}
 				d.vs[i] = append(d.vs[i], f)
 			}
-			if matchingFieldValue == nil {
+			if !someFieldExist {
 				return fmt.Errorf("struct field for %q doesn't exist in any of %v places to unmarshal", key, len(d.vs))
 			}
 
 			// We've just consumed the current token, which was the key.
-			// Read the next token, which should be the value.
-			// If it's of json.RawMessage type, decode the value.
-			if matchingFieldValue.Type() == reflect.TypeOf(json.RawMessage{}) {
-				var data json.RawMessage
-				err = d.jsonDecoder.Decode(&data)
-				tok = data
-			} else {
-				tok, err = d.jsonDecoder.Token()
-			}
-
+			// Read the next token, which should be the value, and let the rest of code process it.
+			tok, err = d.jsonDecoder.Token()
 			if err == io.EOF {
 				return errors.New("unexpected end of JSON input")
 			} else if err != nil {
@@ -183,7 +174,7 @@ func (d *Decoder) decode() error {
 		}
 
 		switch tok := tok.(type) {
-		case string, json.Number, bool, nil, json.RawMessage:
+		case string, json.Number, bool, nil:
 			// Value.
 
 			for i := range d.vs {
diff --git a/graphqljson/graphql_test.go b/graphqljson/graphql_test.go
index 304966f..64d0b10 100644
--- a/graphqljson/graphql_test.go
+++ b/graphqljson/graphql_test.go
@@ -1,11 +1,10 @@
 package graphqljson_test
 
 import (
-	"encoding/json"
 	"testing"
 	"time"
 
-	"github.com/Yamashou/gqlgenc/graphqljson"
+	"github.com/TripleMint/gqlgenc/graphqljson"
 	"github.com/google/go-cmp/cmp"
 )
 
@@ -460,106 +459,3 @@ func TestUnmarshalGraphQL_arrayInsideInlineFragment(t *testing.T) {
 		t.Error(diff)
 	}
 }
-
-func TestUnmarshalGraphQL_jsonRawMessage(t *testing.T) {
-	t.Parallel()
-	type query struct {
-		JSONBlob    json.RawMessage `json:"jsonBlob"`
-		JSONArray   json.RawMessage `json:"jsonArray"`
-		JSONNumber  json.RawMessage `json:"jsonNumber"`
-		JSONString  json.RawMessage `json:"jsonString"`
-		JSONOmmited json.RawMessage `json:"jsonOmmited"`
-		Number      int             `json:"number"`
-		String      string          `json:"string"`
-	}
-
-	var got query
-	err := graphqljson.UnmarshalData([]byte(`{
-		"jsonBlob": {
-			"foo": "bar"
-		},
-		"jsonArray": [1, "two", 3],
-		"jsonNumber": 2,
-		"jsonString": "json string",
-		"number": 1,
-		"string": "normal string"
-	}`), &got)
-	if err != nil {
-		t.Fatal(err)
-	}
-
-	want := query{
-		JSONBlob:    []byte(`{"foo":"bar"}`),
-		JSONArray:   []byte(`[1,"two",3]`),
-		JSONNumber:  []byte(`2`),
-		JSONString:  []byte(`"json string"`),
-		JSONOmmited: nil,
-		Number:      1,
-		String:      "normal string",
-	}
-
-	if diff := cmp.Diff(got, want); diff != "" {
-		t.Error(diff)
-	}
-}
-
-func TestUnmarshalGraphQL_jsonRawMessageInFragment(t *testing.T) {
-	t.Parallel()
-	type Object struct {
-		Properties struct {
-			ID       string
-			Metadata json.RawMessage
-		} `graphql:"... on Properties"`
-		Value string
-	}
-	type query struct {
-		Object         Object
-		OptionalObject *Object
-	}
-	var got query
-	err := graphqljson.UnmarshalData([]byte(`{
-		"object": {
-			"id": "81beda46-02c1-4641-aa7b-09cc6634c783",
-			"metadata": {
-				"created": "2021-05-03T21:27:28+00:00"
-			},
-			"value": "object value 1"
-		},
-		"optionalObject": {
-			"id": "6f8af214-f307-4d4d-89d3-965d8b79e3bf",
-			"metadata": {
-				"created": "2021-05-03T21:27:28+00:00",
-				"deleted": "2021-05-04T21:27:28+00:00"
-			},
-			"value": "object value 2"
-		}
-	}`), &got)
-	if err != nil {
-		t.Fatal(err)
-	}
-	var want query
-	want.Object = Object{
-		Properties: struct {
-			ID       string
-			Metadata json.RawMessage
-		}{
-			ID:       "81beda46-02c1-4641-aa7b-09cc6634c783",
-			Metadata: []byte(`{"created":"2021-05-03T21:27:28+00:00"}`),
-		},
-		Value: "object value 1",
-	}
-	want.OptionalObject = &Object{
-		Properties: struct {
-			ID       string
-			Metadata json.RawMessage
-		}{
-			ID:       "6f8af214-f307-4d4d-89d3-965d8b79e3bf",
-			Metadata: []byte(`{"created":"2021-05-03T21:27:28+00:00","deleted":"2021-05-04T21:27:28+00:00"}`),
-		},
-		Value: "object value 2",
-	}
-
-	if diff := cmp.Diff(got, want); diff != "" {
-		t.Error(diff)
-	}
-}
diff --git a/main.go b/main.go
index 2f3d5a8..1d6bb3a 100644
--- a/main.go
+++ b/main.go
@@ -6,10 +6,10 @@ import (
 	"os"
 
 	"github.com/99designs/gqlgen/api"
-	"github.com/Yamashou/gqlgenc/clientgen"
-	"github.com/Yamashou/gqlgenc/clientgenv2"
-	"github.com/Yamashou/gqlgenc/config"
-	"github.com/Yamashou/gqlgenc/generator"
+	"github.com/TripleMint/gqlgenc/clientgen"
+	"github.com/TripleMint/gqlgenc/clientgenv2"
+	"github.com/TripleMint/gqlgenc/config"
+	"github.com/TripleMint/gqlgenc/generator"
 )
 
 func main() {
diff --git a/scalars/bigfloat.go b/scalars/bigfloat.go
new file mode 100644
index 0000000..020f398
--- /dev/null
+++ b/scalars/bigfloat.go
@@ -0,0 +1,46 @@
+package scalars
+
+import (
+	"encoding/json"
+	"fmt"
+	"strconv"
+)
+
+type BigFloat float64
+
+func (f *BigFloat) UnmarshalJSON(b []byte) error {
+	var v interface{}
+	if err := json.Unmarshal(b, &v); err != nil {
+		return err
+	}
+
+	switch v := v.(type) {
+	case string:
+		floatValue, err := strconv.ParseFloat(v, 64)
+		if err != nil {
+			return nil
+		}
+		*f = BigFloat(floatValue)
+
+	case int:
+		*f = BigFloat(v)
+	case int64:
+		*f = BigFloat(v)
+	case float64:
+		*f = BigFloat(v)
+	case json.Number:
+		floatValue, err := strconv.ParseFloat(string(v), 64)
+		if err != nil {
+			return nil
+		}
+		*f = BigFloat(floatValue)
+	default:
+		return fmt.Errorf("%T is not a big float", v)
+	}
+
+	return nil
+}
+
+func (f BigFloat) MarshalJSON() ([]byte, error) {
+	return json.Marshal(float64(f))
+}
diff --git a/scalars/bigfloat_test.go b/scalars/bigfloat_test.go
new file mode 100644
index 0000000..461f6cd
--- /dev/null
+++ b/scalars/bigfloat_test.go
@@ -0,0 +1,27 @@
+package scalars
+
+import (
+	"encoding/json"
+	"testing"
+)
+
+func TestUnmarshalBigFloat(t *testing.T) {
+	t.Parallel()
+	var bf BigFloat
+	err := json.Unmarshal([]byte(`"2.0"`), &bf)
+	if err != nil {
+		t.Fatalf(err.Error())
+	}
+
+	if float64(bf) != 2.0 {
+		t.Fatalf("bf is %v", bf)
+	}
+
+	err = json.Unmarshal([]byte(`2000`), &bf)
+	if err != nil {
+		t.Fatalf(err.Error())
+	}
+	if float64(2000) != float64(bf) {
+		t.Fatalf("bf is %v", bf)
+	}
+}
diff --git a/test.sh b/test.sh
new file mode 100644
index 0000000..a5d1cf1
--- /dev/null
+++ b/test.sh
@@ -0,0 +1,2 @@
+#!/bin/sh
+go build && cd ../watson && ../gqlgenc/gqlgenc
